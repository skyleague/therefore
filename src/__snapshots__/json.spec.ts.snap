// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`json 1`] = `
[
  {
    "data": {
      "00010-000": {
        "referenceName": "{{00010-000:symbolName}}",
        "srcPath": "examples/json/json.schema.type.ts",
        "symbolName": "Json",
        "uniqueSymbolName": "{{00010-000:symbolName}}",
      },
      "00012-000": {
        "referenceName": "{{00012-000:symbolName}}",
        "srcPath": "examples/json/json.schema.type.ts",
        "symbolName": "JsonAdv",
        "uniqueSymbolName": "{{00012-000:symbolName}}",
      },
      "00021-000": {
        "referenceName": "{{00021-000:symbolName}}",
        "srcPath": "examples/json/json.schema.type.ts",
        "symbolName": "JsonLocal",
        "uniqueSymbolName": "{{00021-000:symbolName}}4e98",
      },
    },
    "prettify": true,
    "relativeSource": "./json.schema",
    "targetPath": "examples/json/json.schema.type.ts",
    "template": "/**
* Generated by @skyleague/therefore@v1.0.0-local
* Do not manually touch this
*/
/* eslint-disable */
import jsonAdvSchema from './schemas/json-adv.schema.json'
import jsonSchema from './schemas/json.schema.json'
import AjvValidator from 'ajv'
import type { ValidateFunction } from 'ajv'


export type {{00010-000:symbolName}} = string | null | boolean | number | {
    [k: string]: ( {{00010-000:referenceName}} ) | undefined
} | ({{00010-000:referenceName}})[]

export const {{00010-000:symbolName}} = {
    validate: new AjvValidator({"strict":true,"strictTypes":true,"useDefaults":true,"removeAdditional":false,"strictSchema":false,"code":{"optimize":true}}).compile<{{00010-000:symbolName}}>(jsonSchema),
    schema: jsonSchema,
    is: (o: unknown): o is {{00010-000:symbolName}} => {{00010-000:symbolName}}.validate(o) === true,
} as const

export type {{00012-000:symbolName}} = {{00021-000:referenceName}}

export const {{00012-000:symbolName}} = {
    validate: new AjvValidator({"strict":true,"strictTypes":true,"useDefaults":true,"removeAdditional":false,"strictSchema":false,"code":{"optimize":true}}).compile<{{00012-000:symbolName}}>(jsonAdvSchema),
    schema: jsonAdvSchema,
    is: (o: unknown): o is {{00012-000:symbolName}} => {{00012-000:symbolName}}.validate(o) === true,
    assert: (o: unknown) => {
        if (!{{00012-000:symbolName}}.validate(o)) {
            throw new AjvValidator.ValidationError({{00012-000:symbolName}}.validate.errors ?? [])
        }
    },
} as const

type {{00021-000:symbolName}} = string | null | boolean | number | {
    [k: string]: ( {{00012-000:referenceName}} ) | undefined
} | ({{00012-000:referenceName}})[]

",
    "type": "typescript",
  },
  {
    "data": {
      "00010-000": {
        "referenceName": "{{00010-000:symbolName}}",
        "srcPath": "examples/json/json.schema.type.ts",
        "symbolName": "Json",
        "uniqueSymbolName": "{{00010-000:symbolName}}",
      },
      "00012-000": {
        "referenceName": "{{00012-000:symbolName}}",
        "srcPath": "examples/json/json.schema.type.ts",
        "symbolName": "JsonAdv",
        "uniqueSymbolName": "{{00012-000:symbolName}}",
      },
      "00021-000": {
        "referenceName": "{{00021-000:symbolName}}",
        "srcPath": "examples/json/json.schema.type.ts",
        "symbolName": "JsonLocal",
        "uniqueSymbolName": "{{00021-000:symbolName}}4e98",
      },
    },
    "prettify": true,
    "relativeSource": "./json.schema",
    "targetPath": "examples/json/schemas/json.schema.json",
    "template": "{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "anyOf": [
    {
      "type": "string"
    },
    {
      "type": "null"
    },
    {
      "type": "boolean"
    },
    {
      "type": "number"
    },
    {
      "type": "object",
      "additionalProperties": {
        "$ref": "#"
      }
    },
    {
      "type": "array",
      "items": {
        "$ref": "#"
      }
    }
  ]
}",
    "type": "jsonschema",
  },
  {
    "data": {
      "00010-000": {
        "referenceName": "{{00010-000:symbolName}}",
        "srcPath": "examples/json/json.schema.type.ts",
        "symbolName": "Json",
        "uniqueSymbolName": "{{00010-000:symbolName}}",
      },
      "00012-000": {
        "referenceName": "{{00012-000:symbolName}}",
        "srcPath": "examples/json/json.schema.type.ts",
        "symbolName": "JsonAdv",
        "uniqueSymbolName": "{{00012-000:symbolName}}",
      },
      "00021-000": {
        "referenceName": "{{00021-000:symbolName}}",
        "srcPath": "examples/json/json.schema.type.ts",
        "symbolName": "JsonLocal",
        "uniqueSymbolName": "{{00021-000:symbolName}}4e98",
      },
    },
    "prettify": true,
    "relativeSource": "./json.schema",
    "targetPath": "examples/json/schemas/json-adv.schema.json",
    "template": "{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "$ref": "#/$defs/{{00021-000:uniqueSymbolName}}",
  "$defs": {
    "{{00021-000:uniqueSymbolName}}": {
      "title": "jsonLocal",
      "anyOf": [
        {
          "type": "string"
        },
        {
          "type": "null"
        },
        {
          "type": "boolean"
        },
        {
          "type": "number"
        },
        {
          "type": "object",
          "additionalProperties": {
            "$ref": "#"
          }
        },
        {
          "type": "array",
          "items": {
            "$ref": "#"
          }
        }
      ]
    }
  }
}",
    "type": "jsonschema",
  },
]
`;

exports[`simple 1`] = `
[
  {
    "data": {
      "0005-000": {
        "referenceName": "{{0005-000:symbolName}}",
        "srcPath": "examples/json/simple.schema.type.ts",
        "symbolName": "Simple",
        "uniqueSymbolName": "{{0005-000:symbolName}}",
      },
    },
    "prettify": true,
    "relativeSource": "./simple.schema",
    "targetPath": "examples/json/simple.schema.type.ts",
    "template": "/**
* Generated by @skyleague/therefore@v1.0.0-local
* Do not manually touch this
*/
/* eslint-disable */
import simpleSchema from './schemas/simple.schema.json'
import AjvValidator from 'ajv'
import type { ValidateFunction } from 'ajv'


export type {{0005-000:symbolName}} = number | ({{0005-000:referenceName}})[]

export const {{0005-000:symbolName}} = {
    validate: new AjvValidator({"strict":true,"strictTypes":true,"useDefaults":true,"removeAdditional":false,"strictSchema":false,"code":{"optimize":true}}).compile<{{0005-000:symbolName}}>(simpleSchema),
    schema: simpleSchema,
    is: (o: unknown): o is {{0005-000:symbolName}} => {{0005-000:symbolName}}.validate(o) === true,
    assert: (o: unknown) => {
        if (!{{0005-000:symbolName}}.validate(o)) {
            throw new AjvValidator.ValidationError({{0005-000:symbolName}}.validate.errors ?? [])
        }
    },
} as const

",
    "type": "typescript",
  },
  {
    "data": {
      "0005-000": {
        "referenceName": "{{0005-000:symbolName}}",
        "srcPath": "examples/json/simple.schema.type.ts",
        "symbolName": "Simple",
        "uniqueSymbolName": "{{0005-000:symbolName}}",
      },
    },
    "prettify": true,
    "relativeSource": "./simple.schema",
    "targetPath": "examples/json/schemas/simple.schema.json",
    "template": "{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "anyOf": [
    {
      "type": "number"
    },
    {
      "type": "array",
      "items": {
        "$ref": "#"
      }
    }
  ]
}",
    "type": "jsonschema",
  },
]
`;
