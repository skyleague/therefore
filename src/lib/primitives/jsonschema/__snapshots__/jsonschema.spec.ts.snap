// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`petstore > definition 1`] = `
{
  "children": [
    {
      "children": [
        {
          "children": [],
          "description": {
            "name": "id",
            "optional": "implicit",
          },
          "name": "id",
          "type": "integer",
          "uuid": "0007-000",
          "value": {
            "maximum": undefined,
            "minimum": undefined,
            "multipleOf": undefined,
          },
        },
        {
          "children": [],
          "description": {
            "name": "petId",
            "optional": "implicit",
          },
          "name": "petId",
          "type": "integer",
          "uuid": "0008-000",
          "value": {
            "maximum": undefined,
            "minimum": undefined,
            "multipleOf": undefined,
          },
        },
        {
          "children": [],
          "description": {
            "name": "quantity",
            "optional": "implicit",
          },
          "name": "quantity",
          "type": "integer",
          "uuid": "0009-000",
          "value": {
            "maximum": undefined,
            "minimum": undefined,
            "multipleOf": undefined,
          },
        },
        {
          "children": [],
          "description": {
            "name": "shipDate",
            "optional": "implicit",
          },
          "name": "shipDate",
          "type": "string",
          "uuid": "00010-000",
          "value": {
            "format": "date-time",
            "maxLength": undefined,
            "minLength": undefined,
            "pattern": undefined,
          },
        },
        {
          "children": [
            "placed",
            "approved",
            "delivered",
          ],
          "description": {
            "description": "Order Status",
            "name": "status",
            "optional": "implicit",
          },
          "name": "status",
          "type": "enum",
          "uuid": "00011-000",
          "value": {},
        },
        {
          "children": [],
          "description": {
            "name": "complete",
            "optional": "implicit",
          },
          "name": "complete",
          "type": "boolean",
          "uuid": "00012-000",
          "value": {},
        },
      ],
      "description": {},
      "name": "Order",
      "prepass": true,
      "type": "object",
      "uuid": "00013-000",
      "value": {},
    },
    {
      "children": [
        {
          "children": [],
          "description": {
            "name": "id",
            "optional": "implicit",
          },
          "name": "id",
          "type": "integer",
          "uuid": "00018-000",
          "value": {
            "maximum": undefined,
            "minimum": undefined,
            "multipleOf": undefined,
          },
        },
        {
          "children": [],
          "description": {
            "name": "username",
            "optional": "implicit",
          },
          "name": "username",
          "type": "string",
          "uuid": "00019-000",
          "value": {
            "format": undefined,
            "maxLength": undefined,
            "minLength": undefined,
            "pattern": undefined,
          },
        },
        {
          "children": [
            {
              "children": [
                {
                  "children": [
                    {
                      "children": [],
                      "description": {
                        "name": "street",
                        "optional": "implicit",
                      },
                      "name": "street",
                      "type": "string",
                      "uuid": "00026-000",
                      "value": {
                        "format": undefined,
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                    {
                      "children": [],
                      "description": {
                        "name": "city",
                        "optional": "implicit",
                      },
                      "name": "city",
                      "type": "string",
                      "uuid": "00027-000",
                      "value": {
                        "format": undefined,
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                    {
                      "children": [],
                      "description": {
                        "name": "state",
                        "optional": "implicit",
                      },
                      "name": "state",
                      "type": "string",
                      "uuid": "00028-000",
                      "value": {
                        "format": undefined,
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                    {
                      "children": [],
                      "description": {
                        "name": "zip",
                        "optional": "implicit",
                      },
                      "name": "zip",
                      "type": "string",
                      "uuid": "00029-000",
                      "value": {
                        "format": undefined,
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                  ],
                  "description": {
                    "name": "Address",
                  },
                  "name": "Address",
                  "type": "object",
                  "uuid": "00030-000",
                  "value": {},
                },
              ],
              "description": {
                "name": undefined,
              },
              "name": "Address",
              "type": "ref",
              "uuid": "00016-000",
              "value": {
                "allowIntersectionTypes": false,
                "cache": Map {},
                "exportAllSymbols": false,
                "exportSymbol": false,
                "metaSchemas": {},
                "optionalNullable": false,
                "references": Map {
                  "#" => [
                    undefined,
                    [Function],
                  ],
                  "#/components/schemas/Address" => [
                    "Address",
                    [Function],
                  ],
                },
                "root": {
                  "components": {
                    "requestBodies": {
                      "Pet": {
                        "content": {
                          "application/json": {
                            "schema": {
                              "$ref": "#/components/schemas/Pet",
                            },
                          },
                          "application/xml": {
                            "schema": {
                              "$ref": "#/components/schemas/Pet",
                            },
                          },
                        },
                        "description": "Pet object that needs to be added to the store",
                      },
                      "UserArray": {
                        "content": {
                          "application/json": {
                            "schema": {
                              "items": {
                                "$ref": "#/components/schemas/User",
                              },
                              "type": "array",
                            },
                          },
                        },
                        "description": "List of user object",
                      },
                    },
                    "schemas": {
                      "Address": {
                        "properties": {
                          "city": {
                            "example": "Palo Alto",
                            "type": "string",
                          },
                          "state": {
                            "example": "CA",
                            "type": "string",
                          },
                          "street": {
                            "example": "437 Lytton",
                            "type": "string",
                          },
                          "zip": {
                            "example": "94301",
                            "type": "string",
                          },
                        },
                        "type": "object",
                        "xml": {
                          "name": "address",
                        },
                      },
                      "ApiResponse": {
                        "properties": {
                          "code": {
                            "format": "int32",
                            "type": "integer",
                          },
                          "message": {
                            "type": "string",
                          },
                          "type": {
                            "type": "string",
                          },
                        },
                        "type": "object",
                        "xml": {
                          "name": "##default",
                        },
                      },
                      "Category": {
                        "properties": {
                          "id": {
                            "example": 1,
                            "format": "int64",
                            "type": "integer",
                          },
                          "name": {
                            "example": "Dogs",
                            "type": "string",
                          },
                        },
                        "type": "object",
                        "xml": {
                          "name": "category",
                        },
                      },
                      "Customer": {
                        "properties": {
                          "address": {
                            "items": {
                              "$ref": "#/components/schemas/Address",
                            },
                            "type": "array",
                            "xml": {
                              "name": "addresses",
                              "wrapped": true,
                            },
                          },
                          "id": {
                            "example": 100000,
                            "format": "int64",
                            "type": "integer",
                          },
                          "username": {
                            "example": "fehguy",
                            "type": "string",
                          },
                        },
                        "type": "object",
                        "xml": {
                          "name": "customer",
                        },
                      },
                      "Order": {
                        "properties": {
                          "complete": {
                            "type": "boolean",
                          },
                          "id": {
                            "example": 10,
                            "format": "int64",
                            "type": "integer",
                          },
                          "petId": {
                            "example": 198772,
                            "format": "int64",
                            "type": "integer",
                          },
                          "quantity": {
                            "example": 7,
                            "format": "int32",
                            "type": "integer",
                          },
                          "shipDate": {
                            "format": "date-time",
                            "type": "string",
                          },
                          "status": {
                            "description": "Order Status",
                            "enum": [
                              "placed",
                              "approved",
                              "delivered",
                            ],
                            "example": "approved",
                            "type": "string",
                          },
                        },
                        "type": "object",
                        "xml": {
                          "name": "order",
                        },
                      },
                      "Pet": {
                        "properties": {
                          "category": {
                            "$ref": "#/components/schemas/Category",
                          },
                          "id": {
                            "example": 10,
                            "format": "int64",
                            "type": "integer",
                          },
                          "name": {
                            "example": "doggie",
                            "type": "string",
                          },
                          "photoUrls": {
                            "items": {
                              "type": "string",
                              "xml": {
                                "name": "photoUrl",
                              },
                            },
                            "type": "array",
                            "xml": {
                              "wrapped": true,
                            },
                          },
                          "status": {
                            "description": "pet status in the store",
                            "enum": [
                              "available",
                              "pending",
                              "sold",
                            ],
                            "type": "string",
                          },
                          "tags": {
                            "items": {
                              "$ref": "#/components/schemas/Tag",
                            },
                            "type": "array",
                            "xml": {
                              "wrapped": true,
                            },
                          },
                        },
                        "required": [
                          "name",
                          "photoUrls",
                        ],
                        "type": "object",
                        "xml": {
                          "name": "pet",
                        },
                      },
                      "Tag": {
                        "properties": {
                          "id": {
                            "format": "int64",
                            "type": "integer",
                          },
                          "name": {
                            "type": "string",
                          },
                        },
                        "type": "object",
                        "xml": {
                          "name": "tag",
                        },
                      },
                      "User": {
                        "properties": {
                          "email": {
                            "example": "john@email.com",
                            "type": "string",
                          },
                          "firstName": {
                            "example": "John",
                            "type": "string",
                          },
                          "id": {
                            "example": 10,
                            "format": "int64",
                            "type": "integer",
                          },
                          "lastName": {
                            "example": "James",
                            "type": "string",
                          },
                          "password": {
                            "example": "12345",
                            "type": "string",
                          },
                          "phone": {
                            "example": "12345",
                            "type": "string",
                          },
                          "userStatus": {
                            "description": "User Status",
                            "example": 1,
                            "format": "int32",
                            "type": "integer",
                          },
                          "username": {
                            "example": "theUser",
                            "type": "string",
                          },
                        },
                        "type": "object",
                        "xml": {
                          "name": "user",
                        },
                      },
                    },
                    "securitySchemes": {
                      "api_key": {
                        "in": "header",
                        "name": "api_key",
                        "type": "apiKey",
                      },
                      "petstore_auth": {
                        "flows": {
                          "implicit": {
                            "authorizationUrl": "https://petstore3.swagger.io/oauth/authorize",
                            "scopes": {
                              "read:pets": "read your pets",
                              "write:pets": "modify pets in your account",
                            },
                          },
                        },
                        "type": "oauth2",
                      },
                    },
                  },
                  "externalDocs": {
                    "description": "Find out more about Swagger",
                    "url": "http://swagger.io",
                  },
                  "info": {
                    "contact": {
                      "email": "apiteam@swagger.io",
                    },
                    "description": "This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about
Swagger at [http://swagger.io](http://swagger.io). In the third iteration of the pet store, we've switched to the design first approach!
You can now help us improve the API whether it's by making changes to the definition itself or to the code.
That way, with time, we can improve the API in general, and expose some of the new features in OAS3.

Some useful links:
- [The Pet Store repository](https://github.com/swagger-api/swagger-petstore)
- [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)",
                    "license": {
                      "name": "Apache 2.0",
                      "url": "http://www.apache.org/licenses/LICENSE-2.0.html",
                    },
                    "termsOfService": "http://swagger.io/terms/",
                    "title": "Swagger Petstore - OpenAPI 3.0",
                    "version": "1.0.17",
                  },
                  "openapi": "3.0.2",
                  "paths": {
                    "/pet": {
                      "post": {
                        "description": "Add a new pet to the store",
                        "operationId": "addPet",
                        "requestBody": {
                          "content": {
                            "application/json": {
                              "schema": {
                                "$ref": "#/components/schemas/Pet",
                              },
                            },
                            "application/x-www-form-urlencoded": {
                              "schema": {
                                "$ref": "#/components/schemas/Pet",
                              },
                            },
                            "application/xml": {
                              "schema": {
                                "$ref": "#/components/schemas/Pet",
                              },
                            },
                          },
                          "description": "Create a new pet in the store",
                          "required": true,
                        },
                        "responses": {
                          "200": {
                            "content": {
                              "application/json": {
                                "schema": {
                                  "$ref": "#/components/schemas/Pet",
                                },
                              },
                              "application/xml": {
                                "schema": {
                                  "$ref": "#/components/schemas/Pet",
                                },
                              },
                            },
                            "description": "Successful operation",
                          },
                          "405": {
                            "description": "Invalid input",
                          },
                        },
                        "security": [
                          {
                            "petstore_auth": [
                              "write:pets",
                              "read:pets",
                            ],
                          },
                        ],
                        "summary": "Add a new pet to the store",
                        "tags": [
                          "pet",
                        ],
                      },
                      "put": {
                        "description": "Update an existing pet by Id",
                        "operationId": "updatePet",
                        "requestBody": {
                          "content": {
                            "application/json": {
                              "schema": {
                                "$ref": "#/components/schemas/Pet",
                              },
                            },
                            "application/x-www-form-urlencoded": {
                              "schema": {
                                "$ref": "#/components/schemas/Pet",
                              },
                            },
                            "application/xml": {
                              "schema": {
                                "$ref": "#/components/schemas/Pet",
                              },
                            },
                          },
                          "description": "Update an existent pet in the store",
                          "required": true,
                        },
                        "responses": {
                          "200": {
                            "content": {
                              "application/json": {
                                "schema": {
                                  "$ref": "#/components/schemas/Pet",
                                },
                              },
                              "application/xml": {
                                "schema": {
                                  "$ref": "#/components/schemas/Pet",
                                },
                              },
                            },
                            "description": "Successful operation",
                          },
                          "400": {
                            "description": "Invalid ID supplied",
                          },
                          "404": {
                            "description": "Pet not found",
                          },
                          "405": {
                            "description": "Validation exception",
                          },
                        },
                        "security": [
                          {
                            "petstore_auth": [
                              "write:pets",
                              "read:pets",
                            ],
                          },
                        ],
                        "summary": "Update an existing pet",
                        "tags": [
                          "pet",
                        ],
                      },
                    },
                    "/pet/findByStatus": {
                      "get": {
                        "description": "Multiple status values can be provided with comma separated strings",
                        "operationId": "findPetsByStatus",
                        "parameters": [
                          {
                            "description": "Status values that need to be considered for filter",
                            "explode": true,
                            "in": "query",
                            "name": "status",
                            "required": false,
                            "schema": {
                              "default": "available",
                              "enum": [
                                "available",
                                "pending",
                                "sold",
                              ],
                              "type": "string",
                            },
                          },
                        ],
                        "responses": {
                          "200": {
                            "content": {
                              "application/json": {
                                "schema": {
                                  "items": {
                                    "$ref": "#/components/schemas/Pet",
                                  },
                                  "type": "array",
                                },
                              },
                              "application/xml": {
                                "schema": {
                                  "items": {
                                    "$ref": "#/components/schemas/Pet",
                                  },
                                  "type": "array",
                                },
                              },
                            },
                            "description": "successful operation",
                          },
                          "400": {
                            "description": "Invalid status value",
                          },
                        },
                        "security": [
                          {
                            "petstore_auth": [
                              "write:pets",
                              "read:pets",
                            ],
                          },
                        ],
                        "summary": "Finds Pets by status",
                        "tags": [
                          "pet",
                        ],
                      },
                    },
                    "/pet/findByTags": {
                      "get": {
                        "description": "Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.",
                        "operationId": "findPetsByTags",
                        "parameters": [
                          {
                            "description": "Tags to filter by",
                            "explode": true,
                            "in": "query",
                            "name": "tags",
                            "required": false,
                            "schema": {
                              "items": {
                                "type": "string",
                              },
                              "type": "array",
                            },
                          },
                        ],
                        "responses": {
                          "200": {
                            "content": {
                              "application/json": {
                                "schema": {
                                  "items": {
                                    "$ref": "#/components/schemas/Pet",
                                  },
                                  "type": "array",
                                },
                              },
                              "application/xml": {
                                "schema": {
                                  "items": {
                                    "$ref": "#/components/schemas/Pet",
                                  },
                                  "type": "array",
                                },
                              },
                            },
                            "description": "successful operation",
                          },
                          "400": {
                            "description": "Invalid tag value",
                          },
                        },
                        "security": [
                          {
                            "petstore_auth": [
                              "write:pets",
                              "read:pets",
                            ],
                          },
                        ],
                        "summary": "Finds Pets by tags",
                        "tags": [
                          "pet",
                        ],
                      },
                    },
                    "/pet/{petId}": {
                      "delete": {
                        "description": "",
                        "operationId": "deletePet",
                        "parameters": [
                          {
                            "description": "",
                            "in": "header",
                            "name": "api_key",
                            "required": false,
                            "schema": {
                              "type": "string",
                            },
                          },
                          {
                            "description": "Pet id to delete",
                            "in": "path",
                            "name": "petId",
                            "required": true,
                            "schema": {
                              "format": "int64",
                              "type": "integer",
                            },
                          },
                        ],
                        "responses": {
                          "400": {
                            "description": "Invalid pet value",
                          },
                        },
                        "security": [
                          {
                            "petstore_auth": [
                              "write:pets",
                              "read:pets",
                            ],
                          },
                        ],
                        "summary": "Deletes a pet",
                        "tags": [
                          "pet",
                        ],
                      },
                      "get": {
                        "description": "Returns a single pet",
                        "operationId": "getPetById",
                        "parameters": [
                          {
                            "description": "ID of pet to return",
                            "in": "path",
                            "name": "petId",
                            "required": true,
                            "schema": {
                              "format": "int64",
                              "type": "integer",
                            },
                          },
                        ],
                        "responses": {
                          "200": {
                            "content": {
                              "application/json": {
                                "schema": {
                                  "$ref": "#/components/schemas/Pet",
                                },
                              },
                              "application/xml": {
                                "schema": {
                                  "$ref": "#/components/schemas/Pet",
                                },
                              },
                            },
                            "description": "successful operation",
                          },
                          "400": {
                            "description": "Invalid ID supplied",
                          },
                          "404": {
                            "description": "Pet not found",
                          },
                        },
                        "security": [
                          {
                            "api_key": [],
                          },
                          {
                            "petstore_auth": [
                              "write:pets",
                              "read:pets",
                            ],
                          },
                        ],
                        "summary": "Find pet by ID",
                        "tags": [
                          "pet",
                        ],
                      },
                      "post": {
                        "description": "",
                        "operationId": "updatePetWithForm",
                        "parameters": [
                          {
                            "description": "ID of pet that needs to be updated",
                            "in": "path",
                            "name": "petId",
                            "required": true,
                            "schema": {
                              "format": "int64",
                              "type": "integer",
                            },
                          },
                          {
                            "description": "Name of pet that needs to be updated",
                            "in": "query",
                            "name": "name",
                            "schema": {
                              "type": "string",
                            },
                          },
                          {
                            "description": "Status of pet that needs to be updated",
                            "in": "query",
                            "name": "status",
                            "schema": {
                              "type": "string",
                            },
                          },
                        ],
                        "responses": {
                          "405": {
                            "description": "Invalid input",
                          },
                        },
                        "security": [
                          {
                            "petstore_auth": [
                              "write:pets",
                              "read:pets",
                            ],
                          },
                        ],
                        "summary": "Updates a pet in the store with form data",
                        "tags": [
                          "pet",
                        ],
                      },
                    },
                    "/pet/{petId}/uploadImage": {
                      "post": {
                        "description": "",
                        "operationId": "uploadFile",
                        "parameters": [
                          {
                            "description": "ID of pet to update",
                            "in": "path",
                            "name": "petId",
                            "required": true,
                            "schema": {
                              "format": "int64",
                              "type": "integer",
                            },
                          },
                          {
                            "description": "Additional Metadata",
                            "in": "query",
                            "name": "additionalMetadata",
                            "required": false,
                            "schema": {
                              "type": "string",
                            },
                          },
                        ],
                        "requestBody": {
                          "content": {
                            "application/octet-stream": {
                              "schema": {
                                "format": "binary",
                                "type": "string",
                              },
                            },
                          },
                        },
                        "responses": {
                          "200": {
                            "content": {
                              "application/json": {
                                "schema": {
                                  "$ref": "#/components/schemas/ApiResponse",
                                },
                              },
                            },
                            "description": "successful operation",
                          },
                        },
                        "security": [
                          {
                            "petstore_auth": [
                              "write:pets",
                              "read:pets",
                            ],
                          },
                        ],
                        "summary": "uploads an image",
                        "tags": [
                          "pet",
                        ],
                      },
                    },
                    "/store/inventory": {
                      "get": {
                        "description": "Returns a map of status codes to quantities",
                        "operationId": "getInventory",
                        "responses": {
                          "200": {
                            "content": {
                              "application/json": {
                                "schema": {
                                  "additionalProperties": {
                                    "format": "int32",
                                    "type": "integer",
                                  },
                                  "type": "object",
                                },
                              },
                            },
                            "description": "successful operation",
                          },
                        },
                        "security": [
                          {
                            "api_key": [],
                          },
                        ],
                        "summary": "Returns pet inventories by status",
                        "tags": [
                          "store",
                        ],
                      },
                    },
                    "/store/order": {
                      "post": {
                        "description": "Place a new order in the store",
                        "operationId": "placeOrder",
                        "requestBody": {
                          "content": {
                            "application/json": {
                              "schema": {
                                "$ref": "#/components/schemas/Order",
                              },
                            },
                            "application/x-www-form-urlencoded": {
                              "schema": {
                                "$ref": "#/components/schemas/Order",
                              },
                            },
                            "application/xml": {
                              "schema": {
                                "$ref": "#/components/schemas/Order",
                              },
                            },
                          },
                        },
                        "responses": {
                          "200": {
                            "content": {
                              "application/json": {
                                "schema": {
                                  "$ref": "#/components/schemas/Order",
                                },
                              },
                            },
                            "description": "successful operation",
                          },
                          "405": {
                            "description": "Invalid input",
                          },
                        },
                        "summary": "Place an order for a pet",
                        "tags": [
                          "store",
                        ],
                      },
                    },
                    "/store/order/{orderId}": {
                      "delete": {
                        "description": "For valid response try integer IDs with value < 1000. Anything above 1000 or nonintegers will generate API errors",
                        "operationId": "deleteOrder",
                        "parameters": [
                          {
                            "description": "ID of the order that needs to be deleted",
                            "in": "path",
                            "name": "orderId",
                            "required": true,
                            "schema": {
                              "format": "int64",
                              "type": "integer",
                            },
                          },
                        ],
                        "responses": {
                          "400": {
                            "description": "Invalid ID supplied",
                          },
                          "404": {
                            "description": "Order not found",
                          },
                        },
                        "summary": "Delete purchase order by ID",
                        "tags": [
                          "store",
                        ],
                      },
                      "get": {
                        "description": "For valid response try integer IDs with value <= 5 or > 10. Other values will generate exceptions.",
                        "operationId": "getOrderById",
                        "parameters": [
                          {
                            "description": "ID of order that needs to be fetched",
                            "in": "path",
                            "name": "orderId",
                            "required": true,
                            "schema": {
                              "format": "int64",
                              "type": "integer",
                            },
                          },
                        ],
                        "responses": {
                          "200": {
                            "content": {
                              "application/json": {
                                "schema": {
                                  "$ref": "#/components/schemas/Order",
                                },
                              },
                              "application/xml": {
                                "schema": {
                                  "$ref": "#/components/schemas/Order",
                                },
                              },
                            },
                            "description": "successful operation",
                          },
                          "400": {
                            "description": "Invalid ID supplied",
                          },
                          "404": {
                            "description": "Order not found",
                          },
                        },
                        "summary": "Find purchase order by ID",
                        "tags": [
                          "store",
                        ],
                      },
                    },
                    "/user": {
                      "post": {
                        "description": "This can only be done by the logged in user.",
                        "operationId": "createUser",
                        "requestBody": {
                          "content": {
                            "application/json": {
                              "schema": {
                                "$ref": "#/components/schemas/User",
                              },
                            },
                            "application/x-www-form-urlencoded": {
                              "schema": {
                                "$ref": "#/components/schemas/User",
                              },
                            },
                            "application/xml": {
                              "schema": {
                                "$ref": "#/components/schemas/User",
                              },
                            },
                          },
                          "description": "Created user object",
                        },
                        "responses": {
                          "default": {
                            "content": {
                              "application/json": {
                                "schema": {
                                  "$ref": "#/components/schemas/User",
                                },
                              },
                              "application/xml": {
                                "schema": {
                                  "$ref": "#/components/schemas/User",
                                },
                              },
                            },
                            "description": "successful operation",
                          },
                        },
                        "summary": "Create user",
                        "tags": [
                          "user",
                        ],
                      },
                    },
                    "/user/createWithList": {
                      "post": {
                        "description": "Creates list of users with given input array",
                        "operationId": "createUsersWithListInput",
                        "requestBody": {
                          "content": {
                            "application/json": {
                              "schema": {
                                "items": {
                                  "$ref": "#/components/schemas/User",
                                },
                                "type": "array",
                              },
                            },
                          },
                        },
                        "responses": {
                          "200": {
                            "content": {
                              "application/json": {
                                "schema": {
                                  "$ref": "#/components/schemas/User",
                                },
                              },
                              "application/xml": {
                                "schema": {
                                  "$ref": "#/components/schemas/User",
                                },
                              },
                            },
                            "description": "Successful operation",
                          },
                          "default": {
                            "description": "successful operation",
                          },
                        },
                        "summary": "Creates list of users with given input array",
                        "tags": [
                          "user",
                        ],
                      },
                    },
                    "/user/login": {
                      "get": {
                        "description": "",
                        "operationId": "loginUser",
                        "parameters": [
                          {
                            "description": "The user name for login",
                            "in": "query",
                            "name": "username",
                            "required": false,
                            "schema": {
                              "type": "string",
                            },
                          },
                          {
                            "description": "The password for login in clear text",
                            "in": "query",
                            "name": "password",
                            "required": false,
                            "schema": {
                              "type": "string",
                            },
                          },
                        ],
                        "responses": {
                          "200": {
                            "content": {
                              "application/json": {
                                "schema": {
                                  "type": "string",
                                },
                              },
                              "application/xml": {
                                "schema": {
                                  "type": "string",
                                },
                              },
                            },
                            "description": "successful operation",
                            "headers": {
                              "X-Expires-After": {
                                "description": "date in UTC when token expires",
                                "schema": {
                                  "format": "date-time",
                                  "type": "string",
                                },
                              },
                              "X-Rate-Limit": {
                                "description": "calls per hour allowed by the user",
                                "schema": {
                                  "format": "int32",
                                  "type": "integer",
                                },
                              },
                            },
                          },
                          "400": {
                            "description": "Invalid username/password supplied",
                          },
                        },
                        "summary": "Logs user into the system",
                        "tags": [
                          "user",
                        ],
                      },
                    },
                    "/user/logout": {
                      "get": {
                        "description": "",
                        "operationId": "logoutUser",
                        "parameters": [],
                        "responses": {
                          "default": {
                            "description": "successful operation",
                          },
                        },
                        "summary": "Logs out current logged in user session",
                        "tags": [
                          "user",
                        ],
                      },
                    },
                    "/user/{username}": {
                      "delete": {
                        "description": "This can only be done by the logged in user.",
                        "operationId": "deleteUser",
                        "parameters": [
                          {
                            "description": "The name that needs to be deleted",
                            "in": "path",
                            "name": "username",
                            "required": true,
                            "schema": {
                              "type": "string",
                            },
                          },
                        ],
                        "responses": {
                          "400": {
                            "description": "Invalid username supplied",
                          },
                          "404": {
                            "description": "User not found",
                          },
                        },
                        "summary": "Delete user",
                        "tags": [
                          "user",
                        ],
                      },
                      "get": {
                        "description": "",
                        "operationId": "getUserByName",
                        "parameters": [
                          {
                            "description": "The name that needs to be fetched. Use user1 for testing. ",
                            "in": "path",
                            "name": "username",
                            "required": true,
                            "schema": {
                              "type": "string",
                            },
                          },
                        ],
                        "responses": {
                          "200": {
                            "content": {
                              "application/json": {
                                "schema": {
                                  "$ref": "#/components/schemas/User",
                                },
                              },
                              "application/xml": {
                                "schema": {
                                  "$ref": "#/components/schemas/User",
                                },
                              },
                            },
                            "description": "successful operation",
                          },
                          "400": {
                            "description": "Invalid username supplied",
                          },
                          "404": {
                            "description": "User not found",
                          },
                        },
                        "summary": "Get user by user name",
                        "tags": [
                          "user",
                        ],
                      },
                      "put": {
                        "description": "This can only be done by the logged in user.",
                        "operationId": "updateUser",
                        "parameters": [
                          {
                            "description": "name that need to be deleted",
                            "in": "path",
                            "name": "username",
                            "required": true,
                            "schema": {
                              "type": "string",
                            },
                          },
                        ],
                        "requestBody": {
                          "content": {
                            "application/json": {
                              "schema": {
                                "$ref": "#/components/schemas/User",
                              },
                            },
                            "application/x-www-form-urlencoded": {
                              "schema": {
                                "$ref": "#/components/schemas/User",
                              },
                            },
                            "application/xml": {
                              "schema": {
                                "$ref": "#/components/schemas/User",
                              },
                            },
                          },
                          "description": "Update an existent user in the store",
                        },
                        "responses": {
                          "default": {
                            "description": "successful operation",
                          },
                        },
                        "summary": "Update user",
                        "tags": [
                          "user",
                        ],
                      },
                    },
                  },
                  "servers": [
                    {
                      "url": "/api/v3",
                    },
                  ],
                  "tags": [
                    {
                      "description": "Everything about your Pets",
                      "externalDocs": {
                        "description": "Find out more",
                        "url": "http://swagger.io",
                      },
                      "name": "pet",
                    },
                    {
                      "description": "Access to Petstore orders",
                      "externalDocs": {
                        "description": "Find out more about our store",
                        "url": "http://swagger.io",
                      },
                      "name": "store",
                    },
                    {
                      "description": "Operations about user",
                      "name": "user",
                    },
                  ],
                },
                "strict": true,
              },
            },
          ],
          "description": {
            "name": "address",
            "optional": "implicit",
          },
          "name": "address",
          "type": "array",
          "uuid": "00020-000",
          "value": {
            "maxItems": undefined,
            "minItems": undefined,
            "uniqueItems": undefined,
          },
        },
      ],
      "description": {},
      "name": "Customer",
      "prepass": true,
      "type": "object",
      "uuid": "00021-000",
      "value": {},
    },
    {
      "children": [
        {
          "children": [],
          "description": {
            "name": "street",
            "optional": "implicit",
          },
          "name": "street",
          "type": "string",
          "uuid": "00035-000",
          "value": {
            "format": undefined,
            "maxLength": undefined,
            "minLength": undefined,
            "pattern": undefined,
          },
        },
        {
          "children": [],
          "description": {
            "name": "city",
            "optional": "implicit",
          },
          "name": "city",
          "type": "string",
          "uuid": "00036-000",
          "value": {
            "format": undefined,
            "maxLength": undefined,
            "minLength": undefined,
            "pattern": undefined,
          },
        },
        {
          "children": [],
          "description": {
            "name": "state",
            "optional": "implicit",
          },
          "name": "state",
          "type": "string",
          "uuid": "00037-000",
          "value": {
            "format": undefined,
            "maxLength": undefined,
            "minLength": undefined,
            "pattern": undefined,
          },
        },
        {
          "children": [],
          "description": {
            "name": "zip",
            "optional": "implicit",
          },
          "name": "zip",
          "type": "string",
          "uuid": "00038-000",
          "value": {
            "format": undefined,
            "maxLength": undefined,
            "minLength": undefined,
            "pattern": undefined,
          },
        },
      ],
      "description": {},
      "name": "Address",
      "prepass": true,
      "type": "object",
      "uuid": "00039-000",
      "value": {},
    },
    {
      "children": [
        {
          "children": [],
          "description": {
            "name": "id",
            "optional": "implicit",
          },
          "name": "id",
          "type": "integer",
          "uuid": "00042-000",
          "value": {
            "maximum": undefined,
            "minimum": undefined,
            "multipleOf": undefined,
          },
        },
        {
          "children": [],
          "description": {
            "name": "name",
            "optional": "implicit",
          },
          "name": "name",
          "type": "string",
          "uuid": "00043-000",
          "value": {
            "format": undefined,
            "maxLength": undefined,
            "minLength": undefined,
            "pattern": undefined,
          },
        },
      ],
      "description": {},
      "name": "Category",
      "prepass": true,
      "type": "object",
      "uuid": "00044-000",
      "value": {},
    },
    {
      "children": [
        {
          "children": [],
          "description": {
            "name": "id",
            "optional": "implicit",
          },
          "name": "id",
          "type": "integer",
          "uuid": "00053-000",
          "value": {
            "maximum": undefined,
            "minimum": undefined,
            "multipleOf": undefined,
          },
        },
        {
          "children": [],
          "description": {
            "name": "username",
            "optional": "implicit",
          },
          "name": "username",
          "type": "string",
          "uuid": "00054-000",
          "value": {
            "format": undefined,
            "maxLength": undefined,
            "minLength": undefined,
            "pattern": undefined,
          },
        },
        {
          "children": [],
          "description": {
            "name": "firstName",
            "optional": "implicit",
          },
          "name": "firstName",
          "type": "string",
          "uuid": "00055-000",
          "value": {
            "format": undefined,
            "maxLength": undefined,
            "minLength": undefined,
            "pattern": undefined,
          },
        },
        {
          "children": [],
          "description": {
            "name": "lastName",
            "optional": "implicit",
          },
          "name": "lastName",
          "type": "string",
          "uuid": "00056-000",
          "value": {
            "format": undefined,
            "maxLength": undefined,
            "minLength": undefined,
            "pattern": undefined,
          },
        },
        {
          "children": [],
          "description": {
            "name": "email",
            "optional": "implicit",
          },
          "name": "email",
          "type": "string",
          "uuid": "00057-000",
          "value": {
            "format": undefined,
            "maxLength": undefined,
            "minLength": undefined,
            "pattern": undefined,
          },
        },
        {
          "children": [],
          "description": {
            "name": "password",
            "optional": "implicit",
          },
          "name": "password",
          "type": "string",
          "uuid": "00058-000",
          "value": {
            "format": undefined,
            "maxLength": undefined,
            "minLength": undefined,
            "pattern": undefined,
          },
        },
        {
          "children": [],
          "description": {
            "name": "phone",
            "optional": "implicit",
          },
          "name": "phone",
          "type": "string",
          "uuid": "00059-000",
          "value": {
            "format": undefined,
            "maxLength": undefined,
            "minLength": undefined,
            "pattern": undefined,
          },
        },
        {
          "children": [],
          "description": {
            "description": "User Status",
            "name": "userStatus",
            "optional": "implicit",
          },
          "name": "userStatus",
          "type": "integer",
          "uuid": "00060-000",
          "value": {
            "maximum": undefined,
            "minimum": undefined,
            "multipleOf": undefined,
          },
        },
      ],
      "description": {},
      "name": "User",
      "prepass": true,
      "type": "object",
      "uuid": "00061-000",
      "value": {},
    },
    {
      "children": [
        {
          "children": [],
          "description": {
            "name": "id",
            "optional": "implicit",
          },
          "name": "id",
          "type": "integer",
          "uuid": "00064-000",
          "value": {
            "maximum": undefined,
            "minimum": undefined,
            "multipleOf": undefined,
          },
        },
        {
          "children": [],
          "description": {
            "name": "name",
            "optional": "implicit",
          },
          "name": "name",
          "type": "string",
          "uuid": "00065-000",
          "value": {
            "format": undefined,
            "maxLength": undefined,
            "minLength": undefined,
            "pattern": undefined,
          },
        },
      ],
      "description": {},
      "name": "Tag",
      "prepass": true,
      "type": "object",
      "uuid": "00066-000",
      "value": {},
    },
    {
      "children": [
        {
          "children": [],
          "description": {
            "name": "id",
            "optional": "implicit",
          },
          "name": "id",
          "type": "integer",
          "uuid": "00075-000",
          "value": {
            "maximum": undefined,
            "minimum": undefined,
            "multipleOf": undefined,
          },
        },
        {
          "children": [],
          "description": {
            "name": "name",
          },
          "name": "name",
          "type": "string",
          "uuid": "00068-000",
          "value": {
            "format": undefined,
            "maxLength": undefined,
            "minLength": undefined,
            "pattern": undefined,
          },
        },
        {
          "children": [
            {
              "children": [
                {
                  "children": [],
                  "description": {
                    "name": "id",
                    "optional": "implicit",
                  },
                  "name": "id",
                  "type": "integer",
                  "uuid": "00082-000",
                  "value": {
                    "maximum": undefined,
                    "minimum": undefined,
                    "multipleOf": undefined,
                  },
                },
                {
                  "children": [],
                  "description": {
                    "name": "name",
                    "optional": "implicit",
                  },
                  "name": "name",
                  "type": "string",
                  "uuid": "00083-000",
                  "value": {
                    "format": undefined,
                    "maxLength": undefined,
                    "minLength": undefined,
                    "pattern": undefined,
                  },
                },
              ],
              "description": {
                "name": "Category",
              },
              "name": "Category",
              "type": "object",
              "uuid": "00084-000",
              "value": {},
            },
          ],
          "description": {
            "name": "category",
            "optional": "implicit",
          },
          "name": "category",
          "type": "ref",
          "uuid": "00076-000",
          "value": {
            "allowIntersectionTypes": false,
            "cache": Map {},
            "exportAllSymbols": false,
            "exportSymbol": false,
            "metaSchemas": {},
            "optionalNullable": false,
            "references": Map {
              "#" => [
                undefined,
                [Function],
              ],
              "#/components/schemas/Category" => [
                "Category",
                [Function],
              ],
              "#/components/schemas/Tag" => [
                "Tag",
                [Function],
              ],
            },
            "root": {
              "components": {
                "requestBodies": {
                  "Pet": {
                    "content": {
                      "application/json": {
                        "schema": {
                          "$ref": "#/components/schemas/Pet",
                        },
                      },
                      "application/xml": {
                        "schema": {
                          "$ref": "#/components/schemas/Pet",
                        },
                      },
                    },
                    "description": "Pet object that needs to be added to the store",
                  },
                  "UserArray": {
                    "content": {
                      "application/json": {
                        "schema": {
                          "items": {
                            "$ref": "#/components/schemas/User",
                          },
                          "type": "array",
                        },
                      },
                    },
                    "description": "List of user object",
                  },
                },
                "schemas": {
                  "Address": {
                    "properties": {
                      "city": {
                        "example": "Palo Alto",
                        "type": "string",
                      },
                      "state": {
                        "example": "CA",
                        "type": "string",
                      },
                      "street": {
                        "example": "437 Lytton",
                        "type": "string",
                      },
                      "zip": {
                        "example": "94301",
                        "type": "string",
                      },
                    },
                    "type": "object",
                    "xml": {
                      "name": "address",
                    },
                  },
                  "ApiResponse": {
                    "properties": {
                      "code": {
                        "format": "int32",
                        "type": "integer",
                      },
                      "message": {
                        "type": "string",
                      },
                      "type": {
                        "type": "string",
                      },
                    },
                    "type": "object",
                    "xml": {
                      "name": "##default",
                    },
                  },
                  "Category": {
                    "properties": {
                      "id": {
                        "example": 1,
                        "format": "int64",
                        "type": "integer",
                      },
                      "name": {
                        "example": "Dogs",
                        "type": "string",
                      },
                    },
                    "type": "object",
                    "xml": {
                      "name": "category",
                    },
                  },
                  "Customer": {
                    "properties": {
                      "address": {
                        "items": {
                          "$ref": "#/components/schemas/Address",
                        },
                        "type": "array",
                        "xml": {
                          "name": "addresses",
                          "wrapped": true,
                        },
                      },
                      "id": {
                        "example": 100000,
                        "format": "int64",
                        "type": "integer",
                      },
                      "username": {
                        "example": "fehguy",
                        "type": "string",
                      },
                    },
                    "type": "object",
                    "xml": {
                      "name": "customer",
                    },
                  },
                  "Order": {
                    "properties": {
                      "complete": {
                        "type": "boolean",
                      },
                      "id": {
                        "example": 10,
                        "format": "int64",
                        "type": "integer",
                      },
                      "petId": {
                        "example": 198772,
                        "format": "int64",
                        "type": "integer",
                      },
                      "quantity": {
                        "example": 7,
                        "format": "int32",
                        "type": "integer",
                      },
                      "shipDate": {
                        "format": "date-time",
                        "type": "string",
                      },
                      "status": {
                        "description": "Order Status",
                        "enum": [
                          "placed",
                          "approved",
                          "delivered",
                        ],
                        "example": "approved",
                        "type": "string",
                      },
                    },
                    "type": "object",
                    "xml": {
                      "name": "order",
                    },
                  },
                  "Pet": {
                    "properties": {
                      "category": {
                        "$ref": "#/components/schemas/Category",
                      },
                      "id": {
                        "example": 10,
                        "format": "int64",
                        "type": "integer",
                      },
                      "name": {
                        "example": "doggie",
                        "type": "string",
                      },
                      "photoUrls": {
                        "items": {
                          "type": "string",
                          "xml": {
                            "name": "photoUrl",
                          },
                        },
                        "type": "array",
                        "xml": {
                          "wrapped": true,
                        },
                      },
                      "status": {
                        "description": "pet status in the store",
                        "enum": [
                          "available",
                          "pending",
                          "sold",
                        ],
                        "type": "string",
                      },
                      "tags": {
                        "items": {
                          "$ref": "#/components/schemas/Tag",
                        },
                        "type": "array",
                        "xml": {
                          "wrapped": true,
                        },
                      },
                    },
                    "required": [
                      "name",
                      "photoUrls",
                    ],
                    "type": "object",
                    "xml": {
                      "name": "pet",
                    },
                  },
                  "Tag": {
                    "properties": {
                      "id": {
                        "format": "int64",
                        "type": "integer",
                      },
                      "name": {
                        "type": "string",
                      },
                    },
                    "type": "object",
                    "xml": {
                      "name": "tag",
                    },
                  },
                  "User": {
                    "properties": {
                      "email": {
                        "example": "john@email.com",
                        "type": "string",
                      },
                      "firstName": {
                        "example": "John",
                        "type": "string",
                      },
                      "id": {
                        "example": 10,
                        "format": "int64",
                        "type": "integer",
                      },
                      "lastName": {
                        "example": "James",
                        "type": "string",
                      },
                      "password": {
                        "example": "12345",
                        "type": "string",
                      },
                      "phone": {
                        "example": "12345",
                        "type": "string",
                      },
                      "userStatus": {
                        "description": "User Status",
                        "example": 1,
                        "format": "int32",
                        "type": "integer",
                      },
                      "username": {
                        "example": "theUser",
                        "type": "string",
                      },
                    },
                    "type": "object",
                    "xml": {
                      "name": "user",
                    },
                  },
                },
                "securitySchemes": {
                  "api_key": {
                    "in": "header",
                    "name": "api_key",
                    "type": "apiKey",
                  },
                  "petstore_auth": {
                    "flows": {
                      "implicit": {
                        "authorizationUrl": "https://petstore3.swagger.io/oauth/authorize",
                        "scopes": {
                          "read:pets": "read your pets",
                          "write:pets": "modify pets in your account",
                        },
                      },
                    },
                    "type": "oauth2",
                  },
                },
              },
              "externalDocs": {
                "description": "Find out more about Swagger",
                "url": "http://swagger.io",
              },
              "info": {
                "contact": {
                  "email": "apiteam@swagger.io",
                },
                "description": "This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about
Swagger at [http://swagger.io](http://swagger.io). In the third iteration of the pet store, we've switched to the design first approach!
You can now help us improve the API whether it's by making changes to the definition itself or to the code.
That way, with time, we can improve the API in general, and expose some of the new features in OAS3.

Some useful links:
- [The Pet Store repository](https://github.com/swagger-api/swagger-petstore)
- [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)",
                "license": {
                  "name": "Apache 2.0",
                  "url": "http://www.apache.org/licenses/LICENSE-2.0.html",
                },
                "termsOfService": "http://swagger.io/terms/",
                "title": "Swagger Petstore - OpenAPI 3.0",
                "version": "1.0.17",
              },
              "openapi": "3.0.2",
              "paths": {
                "/pet": {
                  "post": {
                    "description": "Add a new pet to the store",
                    "operationId": "addPet",
                    "requestBody": {
                      "content": {
                        "application/json": {
                          "schema": {
                            "$ref": "#/components/schemas/Pet",
                          },
                        },
                        "application/x-www-form-urlencoded": {
                          "schema": {
                            "$ref": "#/components/schemas/Pet",
                          },
                        },
                        "application/xml": {
                          "schema": {
                            "$ref": "#/components/schemas/Pet",
                          },
                        },
                      },
                      "description": "Create a new pet in the store",
                      "required": true,
                    },
                    "responses": {
                      "200": {
                        "content": {
                          "application/json": {
                            "schema": {
                              "$ref": "#/components/schemas/Pet",
                            },
                          },
                          "application/xml": {
                            "schema": {
                              "$ref": "#/components/schemas/Pet",
                            },
                          },
                        },
                        "description": "Successful operation",
                      },
                      "405": {
                        "description": "Invalid input",
                      },
                    },
                    "security": [
                      {
                        "petstore_auth": [
                          "write:pets",
                          "read:pets",
                        ],
                      },
                    ],
                    "summary": "Add a new pet to the store",
                    "tags": [
                      "pet",
                    ],
                  },
                  "put": {
                    "description": "Update an existing pet by Id",
                    "operationId": "updatePet",
                    "requestBody": {
                      "content": {
                        "application/json": {
                          "schema": {
                            "$ref": "#/components/schemas/Pet",
                          },
                        },
                        "application/x-www-form-urlencoded": {
                          "schema": {
                            "$ref": "#/components/schemas/Pet",
                          },
                        },
                        "application/xml": {
                          "schema": {
                            "$ref": "#/components/schemas/Pet",
                          },
                        },
                      },
                      "description": "Update an existent pet in the store",
                      "required": true,
                    },
                    "responses": {
                      "200": {
                        "content": {
                          "application/json": {
                            "schema": {
                              "$ref": "#/components/schemas/Pet",
                            },
                          },
                          "application/xml": {
                            "schema": {
                              "$ref": "#/components/schemas/Pet",
                            },
                          },
                        },
                        "description": "Successful operation",
                      },
                      "400": {
                        "description": "Invalid ID supplied",
                      },
                      "404": {
                        "description": "Pet not found",
                      },
                      "405": {
                        "description": "Validation exception",
                      },
                    },
                    "security": [
                      {
                        "petstore_auth": [
                          "write:pets",
                          "read:pets",
                        ],
                      },
                    ],
                    "summary": "Update an existing pet",
                    "tags": [
                      "pet",
                    ],
                  },
                },
                "/pet/findByStatus": {
                  "get": {
                    "description": "Multiple status values can be provided with comma separated strings",
                    "operationId": "findPetsByStatus",
                    "parameters": [
                      {
                        "description": "Status values that need to be considered for filter",
                        "explode": true,
                        "in": "query",
                        "name": "status",
                        "required": false,
                        "schema": {
                          "default": "available",
                          "enum": [
                            "available",
                            "pending",
                            "sold",
                          ],
                          "type": "string",
                        },
                      },
                    ],
                    "responses": {
                      "200": {
                        "content": {
                          "application/json": {
                            "schema": {
                              "items": {
                                "$ref": "#/components/schemas/Pet",
                              },
                              "type": "array",
                            },
                          },
                          "application/xml": {
                            "schema": {
                              "items": {
                                "$ref": "#/components/schemas/Pet",
                              },
                              "type": "array",
                            },
                          },
                        },
                        "description": "successful operation",
                      },
                      "400": {
                        "description": "Invalid status value",
                      },
                    },
                    "security": [
                      {
                        "petstore_auth": [
                          "write:pets",
                          "read:pets",
                        ],
                      },
                    ],
                    "summary": "Finds Pets by status",
                    "tags": [
                      "pet",
                    ],
                  },
                },
                "/pet/findByTags": {
                  "get": {
                    "description": "Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.",
                    "operationId": "findPetsByTags",
                    "parameters": [
                      {
                        "description": "Tags to filter by",
                        "explode": true,
                        "in": "query",
                        "name": "tags",
                        "required": false,
                        "schema": {
                          "items": {
                            "type": "string",
                          },
                          "type": "array",
                        },
                      },
                    ],
                    "responses": {
                      "200": {
                        "content": {
                          "application/json": {
                            "schema": {
                              "items": {
                                "$ref": "#/components/schemas/Pet",
                              },
                              "type": "array",
                            },
                          },
                          "application/xml": {
                            "schema": {
                              "items": {
                                "$ref": "#/components/schemas/Pet",
                              },
                              "type": "array",
                            },
                          },
                        },
                        "description": "successful operation",
                      },
                      "400": {
                        "description": "Invalid tag value",
                      },
                    },
                    "security": [
                      {
                        "petstore_auth": [
                          "write:pets",
                          "read:pets",
                        ],
                      },
                    ],
                    "summary": "Finds Pets by tags",
                    "tags": [
                      "pet",
                    ],
                  },
                },
                "/pet/{petId}": {
                  "delete": {
                    "description": "",
                    "operationId": "deletePet",
                    "parameters": [
                      {
                        "description": "",
                        "in": "header",
                        "name": "api_key",
                        "required": false,
                        "schema": {
                          "type": "string",
                        },
                      },
                      {
                        "description": "Pet id to delete",
                        "in": "path",
                        "name": "petId",
                        "required": true,
                        "schema": {
                          "format": "int64",
                          "type": "integer",
                        },
                      },
                    ],
                    "responses": {
                      "400": {
                        "description": "Invalid pet value",
                      },
                    },
                    "security": [
                      {
                        "petstore_auth": [
                          "write:pets",
                          "read:pets",
                        ],
                      },
                    ],
                    "summary": "Deletes a pet",
                    "tags": [
                      "pet",
                    ],
                  },
                  "get": {
                    "description": "Returns a single pet",
                    "operationId": "getPetById",
                    "parameters": [
                      {
                        "description": "ID of pet to return",
                        "in": "path",
                        "name": "petId",
                        "required": true,
                        "schema": {
                          "format": "int64",
                          "type": "integer",
                        },
                      },
                    ],
                    "responses": {
                      "200": {
                        "content": {
                          "application/json": {
                            "schema": {
                              "$ref": "#/components/schemas/Pet",
                            },
                          },
                          "application/xml": {
                            "schema": {
                              "$ref": "#/components/schemas/Pet",
                            },
                          },
                        },
                        "description": "successful operation",
                      },
                      "400": {
                        "description": "Invalid ID supplied",
                      },
                      "404": {
                        "description": "Pet not found",
                      },
                    },
                    "security": [
                      {
                        "api_key": [],
                      },
                      {
                        "petstore_auth": [
                          "write:pets",
                          "read:pets",
                        ],
                      },
                    ],
                    "summary": "Find pet by ID",
                    "tags": [
                      "pet",
                    ],
                  },
                  "post": {
                    "description": "",
                    "operationId": "updatePetWithForm",
                    "parameters": [
                      {
                        "description": "ID of pet that needs to be updated",
                        "in": "path",
                        "name": "petId",
                        "required": true,
                        "schema": {
                          "format": "int64",
                          "type": "integer",
                        },
                      },
                      {
                        "description": "Name of pet that needs to be updated",
                        "in": "query",
                        "name": "name",
                        "schema": {
                          "type": "string",
                        },
                      },
                      {
                        "description": "Status of pet that needs to be updated",
                        "in": "query",
                        "name": "status",
                        "schema": {
                          "type": "string",
                        },
                      },
                    ],
                    "responses": {
                      "405": {
                        "description": "Invalid input",
                      },
                    },
                    "security": [
                      {
                        "petstore_auth": [
                          "write:pets",
                          "read:pets",
                        ],
                      },
                    ],
                    "summary": "Updates a pet in the store with form data",
                    "tags": [
                      "pet",
                    ],
                  },
                },
                "/pet/{petId}/uploadImage": {
                  "post": {
                    "description": "",
                    "operationId": "uploadFile",
                    "parameters": [
                      {
                        "description": "ID of pet to update",
                        "in": "path",
                        "name": "petId",
                        "required": true,
                        "schema": {
                          "format": "int64",
                          "type": "integer",
                        },
                      },
                      {
                        "description": "Additional Metadata",
                        "in": "query",
                        "name": "additionalMetadata",
                        "required": false,
                        "schema": {
                          "type": "string",
                        },
                      },
                    ],
                    "requestBody": {
                      "content": {
                        "application/octet-stream": {
                          "schema": {
                            "format": "binary",
                            "type": "string",
                          },
                        },
                      },
                    },
                    "responses": {
                      "200": {
                        "content": {
                          "application/json": {
                            "schema": {
                              "$ref": "#/components/schemas/ApiResponse",
                            },
                          },
                        },
                        "description": "successful operation",
                      },
                    },
                    "security": [
                      {
                        "petstore_auth": [
                          "write:pets",
                          "read:pets",
                        ],
                      },
                    ],
                    "summary": "uploads an image",
                    "tags": [
                      "pet",
                    ],
                  },
                },
                "/store/inventory": {
                  "get": {
                    "description": "Returns a map of status codes to quantities",
                    "operationId": "getInventory",
                    "responses": {
                      "200": {
                        "content": {
                          "application/json": {
                            "schema": {
                              "additionalProperties": {
                                "format": "int32",
                                "type": "integer",
                              },
                              "type": "object",
                            },
                          },
                        },
                        "description": "successful operation",
                      },
                    },
                    "security": [
                      {
                        "api_key": [],
                      },
                    ],
                    "summary": "Returns pet inventories by status",
                    "tags": [
                      "store",
                    ],
                  },
                },
                "/store/order": {
                  "post": {
                    "description": "Place a new order in the store",
                    "operationId": "placeOrder",
                    "requestBody": {
                      "content": {
                        "application/json": {
                          "schema": {
                            "$ref": "#/components/schemas/Order",
                          },
                        },
                        "application/x-www-form-urlencoded": {
                          "schema": {
                            "$ref": "#/components/schemas/Order",
                          },
                        },
                        "application/xml": {
                          "schema": {
                            "$ref": "#/components/schemas/Order",
                          },
                        },
                      },
                    },
                    "responses": {
                      "200": {
                        "content": {
                          "application/json": {
                            "schema": {
                              "$ref": "#/components/schemas/Order",
                            },
                          },
                        },
                        "description": "successful operation",
                      },
                      "405": {
                        "description": "Invalid input",
                      },
                    },
                    "summary": "Place an order for a pet",
                    "tags": [
                      "store",
                    ],
                  },
                },
                "/store/order/{orderId}": {
                  "delete": {
                    "description": "For valid response try integer IDs with value < 1000. Anything above 1000 or nonintegers will generate API errors",
                    "operationId": "deleteOrder",
                    "parameters": [
                      {
                        "description": "ID of the order that needs to be deleted",
                        "in": "path",
                        "name": "orderId",
                        "required": true,
                        "schema": {
                          "format": "int64",
                          "type": "integer",
                        },
                      },
                    ],
                    "responses": {
                      "400": {
                        "description": "Invalid ID supplied",
                      },
                      "404": {
                        "description": "Order not found",
                      },
                    },
                    "summary": "Delete purchase order by ID",
                    "tags": [
                      "store",
                    ],
                  },
                  "get": {
                    "description": "For valid response try integer IDs with value <= 5 or > 10. Other values will generate exceptions.",
                    "operationId": "getOrderById",
                    "parameters": [
                      {
                        "description": "ID of order that needs to be fetched",
                        "in": "path",
                        "name": "orderId",
                        "required": true,
                        "schema": {
                          "format": "int64",
                          "type": "integer",
                        },
                      },
                    ],
                    "responses": {
                      "200": {
                        "content": {
                          "application/json": {
                            "schema": {
                              "$ref": "#/components/schemas/Order",
                            },
                          },
                          "application/xml": {
                            "schema": {
                              "$ref": "#/components/schemas/Order",
                            },
                          },
                        },
                        "description": "successful operation",
                      },
                      "400": {
                        "description": "Invalid ID supplied",
                      },
                      "404": {
                        "description": "Order not found",
                      },
                    },
                    "summary": "Find purchase order by ID",
                    "tags": [
                      "store",
                    ],
                  },
                },
                "/user": {
                  "post": {
                    "description": "This can only be done by the logged in user.",
                    "operationId": "createUser",
                    "requestBody": {
                      "content": {
                        "application/json": {
                          "schema": {
                            "$ref": "#/components/schemas/User",
                          },
                        },
                        "application/x-www-form-urlencoded": {
                          "schema": {
                            "$ref": "#/components/schemas/User",
                          },
                        },
                        "application/xml": {
                          "schema": {
                            "$ref": "#/components/schemas/User",
                          },
                        },
                      },
                      "description": "Created user object",
                    },
                    "responses": {
                      "default": {
                        "content": {
                          "application/json": {
                            "schema": {
                              "$ref": "#/components/schemas/User",
                            },
                          },
                          "application/xml": {
                            "schema": {
                              "$ref": "#/components/schemas/User",
                            },
                          },
                        },
                        "description": "successful operation",
                      },
                    },
                    "summary": "Create user",
                    "tags": [
                      "user",
                    ],
                  },
                },
                "/user/createWithList": {
                  "post": {
                    "description": "Creates list of users with given input array",
                    "operationId": "createUsersWithListInput",
                    "requestBody": {
                      "content": {
                        "application/json": {
                          "schema": {
                            "items": {
                              "$ref": "#/components/schemas/User",
                            },
                            "type": "array",
                          },
                        },
                      },
                    },
                    "responses": {
                      "200": {
                        "content": {
                          "application/json": {
                            "schema": {
                              "$ref": "#/components/schemas/User",
                            },
                          },
                          "application/xml": {
                            "schema": {
                              "$ref": "#/components/schemas/User",
                            },
                          },
                        },
                        "description": "Successful operation",
                      },
                      "default": {
                        "description": "successful operation",
                      },
                    },
                    "summary": "Creates list of users with given input array",
                    "tags": [
                      "user",
                    ],
                  },
                },
                "/user/login": {
                  "get": {
                    "description": "",
                    "operationId": "loginUser",
                    "parameters": [
                      {
                        "description": "The user name for login",
                        "in": "query",
                        "name": "username",
                        "required": false,
                        "schema": {
                          "type": "string",
                        },
                      },
                      {
                        "description": "The password for login in clear text",
                        "in": "query",
                        "name": "password",
                        "required": false,
                        "schema": {
                          "type": "string",
                        },
                      },
                    ],
                    "responses": {
                      "200": {
                        "content": {
                          "application/json": {
                            "schema": {
                              "type": "string",
                            },
                          },
                          "application/xml": {
                            "schema": {
                              "type": "string",
                            },
                          },
                        },
                        "description": "successful operation",
                        "headers": {
                          "X-Expires-After": {
                            "description": "date in UTC when token expires",
                            "schema": {
                              "format": "date-time",
                              "type": "string",
                            },
                          },
                          "X-Rate-Limit": {
                            "description": "calls per hour allowed by the user",
                            "schema": {
                              "format": "int32",
                              "type": "integer",
                            },
                          },
                        },
                      },
                      "400": {
                        "description": "Invalid username/password supplied",
                      },
                    },
                    "summary": "Logs user into the system",
                    "tags": [
                      "user",
                    ],
                  },
                },
                "/user/logout": {
                  "get": {
                    "description": "",
                    "operationId": "logoutUser",
                    "parameters": [],
                    "responses": {
                      "default": {
                        "description": "successful operation",
                      },
                    },
                    "summary": "Logs out current logged in user session",
                    "tags": [
                      "user",
                    ],
                  },
                },
                "/user/{username}": {
                  "delete": {
                    "description": "This can only be done by the logged in user.",
                    "operationId": "deleteUser",
                    "parameters": [
                      {
                        "description": "The name that needs to be deleted",
                        "in": "path",
                        "name": "username",
                        "required": true,
                        "schema": {
                          "type": "string",
                        },
                      },
                    ],
                    "responses": {
                      "400": {
                        "description": "Invalid username supplied",
                      },
                      "404": {
                        "description": "User not found",
                      },
                    },
                    "summary": "Delete user",
                    "tags": [
                      "user",
                    ],
                  },
                  "get": {
                    "description": "",
                    "operationId": "getUserByName",
                    "parameters": [
                      {
                        "description": "The name that needs to be fetched. Use user1 for testing. ",
                        "in": "path",
                        "name": "username",
                        "required": true,
                        "schema": {
                          "type": "string",
                        },
                      },
                    ],
                    "responses": {
                      "200": {
                        "content": {
                          "application/json": {
                            "schema": {
                              "$ref": "#/components/schemas/User",
                            },
                          },
                          "application/xml": {
                            "schema": {
                              "$ref": "#/components/schemas/User",
                            },
                          },
                        },
                        "description": "successful operation",
                      },
                      "400": {
                        "description": "Invalid username supplied",
                      },
                      "404": {
                        "description": "User not found",
                      },
                    },
                    "summary": "Get user by user name",
                    "tags": [
                      "user",
                    ],
                  },
                  "put": {
                    "description": "This can only be done by the logged in user.",
                    "operationId": "updateUser",
                    "parameters": [
                      {
                        "description": "name that need to be deleted",
                        "in": "path",
                        "name": "username",
                        "required": true,
                        "schema": {
                          "type": "string",
                        },
                      },
                    ],
                    "requestBody": {
                      "content": {
                        "application/json": {
                          "schema": {
                            "$ref": "#/components/schemas/User",
                          },
                        },
                        "application/x-www-form-urlencoded": {
                          "schema": {
                            "$ref": "#/components/schemas/User",
                          },
                        },
                        "application/xml": {
                          "schema": {
                            "$ref": "#/components/schemas/User",
                          },
                        },
                      },
                      "description": "Update an existent user in the store",
                    },
                    "responses": {
                      "default": {
                        "description": "successful operation",
                      },
                    },
                    "summary": "Update user",
                    "tags": [
                      "user",
                    ],
                  },
                },
              },
              "servers": [
                {
                  "url": "/api/v3",
                },
              ],
              "tags": [
                {
                  "description": "Everything about your Pets",
                  "externalDocs": {
                    "description": "Find out more",
                    "url": "http://swagger.io",
                  },
                  "name": "pet",
                },
                {
                  "description": "Access to Petstore orders",
                  "externalDocs": {
                    "description": "Find out more about our store",
                    "url": "http://swagger.io",
                  },
                  "name": "store",
                },
                {
                  "description": "Operations about user",
                  "name": "user",
                },
              ],
            },
            "strict": true,
          },
        },
        {
          "children": [
            {
              "children": [],
              "description": {},
              "type": "string",
              "uuid": "00070-000",
              "value": {
                "format": undefined,
                "maxLength": undefined,
                "minLength": undefined,
                "pattern": undefined,
              },
            },
          ],
          "description": {
            "name": "photoUrls",
          },
          "name": "photoUrls",
          "type": "array",
          "uuid": "00071-000",
          "value": {
            "maxItems": undefined,
            "minItems": undefined,
            "uniqueItems": undefined,
          },
        },
        {
          "children": [
            {
              "children": [
                {
                  "children": [
                    {
                      "children": [],
                      "description": {
                        "name": "id",
                        "optional": "implicit",
                      },
                      "name": "id",
                      "type": "integer",
                      "uuid": "00087-000",
                      "value": {
                        "maximum": undefined,
                        "minimum": undefined,
                        "multipleOf": undefined,
                      },
                    },
                    {
                      "children": [],
                      "description": {
                        "name": "name",
                        "optional": "implicit",
                      },
                      "name": "name",
                      "type": "string",
                      "uuid": "00088-000",
                      "value": {
                        "format": undefined,
                        "maxLength": undefined,
                        "minLength": undefined,
                        "pattern": undefined,
                      },
                    },
                  ],
                  "description": {
                    "name": "Tag",
                  },
                  "name": "Tag",
                  "type": "object",
                  "uuid": "00089-000",
                  "value": {},
                },
              ],
              "description": {
                "name": undefined,
              },
              "name": "Tag",
              "type": "ref",
              "uuid": "00072-000",
              "value": {
                "allowIntersectionTypes": false,
                "cache": Map {},
                "exportAllSymbols": false,
                "exportSymbol": false,
                "metaSchemas": {},
                "optionalNullable": false,
                "references": Map {
                  "#" => [
                    undefined,
                    [Function],
                  ],
                  "#/components/schemas/Category" => [
                    "Category",
                    [Function],
                  ],
                  "#/components/schemas/Tag" => [
                    "Tag",
                    [Function],
                  ],
                },
                "root": {
                  "components": {
                    "requestBodies": {
                      "Pet": {
                        "content": {
                          "application/json": {
                            "schema": {
                              "$ref": "#/components/schemas/Pet",
                            },
                          },
                          "application/xml": {
                            "schema": {
                              "$ref": "#/components/schemas/Pet",
                            },
                          },
                        },
                        "description": "Pet object that needs to be added to the store",
                      },
                      "UserArray": {
                        "content": {
                          "application/json": {
                            "schema": {
                              "items": {
                                "$ref": "#/components/schemas/User",
                              },
                              "type": "array",
                            },
                          },
                        },
                        "description": "List of user object",
                      },
                    },
                    "schemas": {
                      "Address": {
                        "properties": {
                          "city": {
                            "example": "Palo Alto",
                            "type": "string",
                          },
                          "state": {
                            "example": "CA",
                            "type": "string",
                          },
                          "street": {
                            "example": "437 Lytton",
                            "type": "string",
                          },
                          "zip": {
                            "example": "94301",
                            "type": "string",
                          },
                        },
                        "type": "object",
                        "xml": {
                          "name": "address",
                        },
                      },
                      "ApiResponse": {
                        "properties": {
                          "code": {
                            "format": "int32",
                            "type": "integer",
                          },
                          "message": {
                            "type": "string",
                          },
                          "type": {
                            "type": "string",
                          },
                        },
                        "type": "object",
                        "xml": {
                          "name": "##default",
                        },
                      },
                      "Category": {
                        "properties": {
                          "id": {
                            "example": 1,
                            "format": "int64",
                            "type": "integer",
                          },
                          "name": {
                            "example": "Dogs",
                            "type": "string",
                          },
                        },
                        "type": "object",
                        "xml": {
                          "name": "category",
                        },
                      },
                      "Customer": {
                        "properties": {
                          "address": {
                            "items": {
                              "$ref": "#/components/schemas/Address",
                            },
                            "type": "array",
                            "xml": {
                              "name": "addresses",
                              "wrapped": true,
                            },
                          },
                          "id": {
                            "example": 100000,
                            "format": "int64",
                            "type": "integer",
                          },
                          "username": {
                            "example": "fehguy",
                            "type": "string",
                          },
                        },
                        "type": "object",
                        "xml": {
                          "name": "customer",
                        },
                      },
                      "Order": {
                        "properties": {
                          "complete": {
                            "type": "boolean",
                          },
                          "id": {
                            "example": 10,
                            "format": "int64",
                            "type": "integer",
                          },
                          "petId": {
                            "example": 198772,
                            "format": "int64",
                            "type": "integer",
                          },
                          "quantity": {
                            "example": 7,
                            "format": "int32",
                            "type": "integer",
                          },
                          "shipDate": {
                            "format": "date-time",
                            "type": "string",
                          },
                          "status": {
                            "description": "Order Status",
                            "enum": [
                              "placed",
                              "approved",
                              "delivered",
                            ],
                            "example": "approved",
                            "type": "string",
                          },
                        },
                        "type": "object",
                        "xml": {
                          "name": "order",
                        },
                      },
                      "Pet": {
                        "properties": {
                          "category": {
                            "$ref": "#/components/schemas/Category",
                          },
                          "id": {
                            "example": 10,
                            "format": "int64",
                            "type": "integer",
                          },
                          "name": {
                            "example": "doggie",
                            "type": "string",
                          },
                          "photoUrls": {
                            "items": {
                              "type": "string",
                              "xml": {
                                "name": "photoUrl",
                              },
                            },
                            "type": "array",
                            "xml": {
                              "wrapped": true,
                            },
                          },
                          "status": {
                            "description": "pet status in the store",
                            "enum": [
                              "available",
                              "pending",
                              "sold",
                            ],
                            "type": "string",
                          },
                          "tags": {
                            "items": {
                              "$ref": "#/components/schemas/Tag",
                            },
                            "type": "array",
                            "xml": {
                              "wrapped": true,
                            },
                          },
                        },
                        "required": [
                          "name",
                          "photoUrls",
                        ],
                        "type": "object",
                        "xml": {
                          "name": "pet",
                        },
                      },
                      "Tag": {
                        "properties": {
                          "id": {
                            "format": "int64",
                            "type": "integer",
                          },
                          "name": {
                            "type": "string",
                          },
                        },
                        "type": "object",
                        "xml": {
                          "name": "tag",
                        },
                      },
                      "User": {
                        "properties": {
                          "email": {
                            "example": "john@email.com",
                            "type": "string",
                          },
                          "firstName": {
                            "example": "John",
                            "type": "string",
                          },
                          "id": {
                            "example": 10,
                            "format": "int64",
                            "type": "integer",
                          },
                          "lastName": {
                            "example": "James",
                            "type": "string",
                          },
                          "password": {
                            "example": "12345",
                            "type": "string",
                          },
                          "phone": {
                            "example": "12345",
                            "type": "string",
                          },
                          "userStatus": {
                            "description": "User Status",
                            "example": 1,
                            "format": "int32",
                            "type": "integer",
                          },
                          "username": {
                            "example": "theUser",
                            "type": "string",
                          },
                        },
                        "type": "object",
                        "xml": {
                          "name": "user",
                        },
                      },
                    },
                    "securitySchemes": {
                      "api_key": {
                        "in": "header",
                        "name": "api_key",
                        "type": "apiKey",
                      },
                      "petstore_auth": {
                        "flows": {
                          "implicit": {
                            "authorizationUrl": "https://petstore3.swagger.io/oauth/authorize",
                            "scopes": {
                              "read:pets": "read your pets",
                              "write:pets": "modify pets in your account",
                            },
                          },
                        },
                        "type": "oauth2",
                      },
                    },
                  },
                  "externalDocs": {
                    "description": "Find out more about Swagger",
                    "url": "http://swagger.io",
                  },
                  "info": {
                    "contact": {
                      "email": "apiteam@swagger.io",
                    },
                    "description": "This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about
Swagger at [http://swagger.io](http://swagger.io). In the third iteration of the pet store, we've switched to the design first approach!
You can now help us improve the API whether it's by making changes to the definition itself or to the code.
That way, with time, we can improve the API in general, and expose some of the new features in OAS3.

Some useful links:
- [The Pet Store repository](https://github.com/swagger-api/swagger-petstore)
- [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)",
                    "license": {
                      "name": "Apache 2.0",
                      "url": "http://www.apache.org/licenses/LICENSE-2.0.html",
                    },
                    "termsOfService": "http://swagger.io/terms/",
                    "title": "Swagger Petstore - OpenAPI 3.0",
                    "version": "1.0.17",
                  },
                  "openapi": "3.0.2",
                  "paths": {
                    "/pet": {
                      "post": {
                        "description": "Add a new pet to the store",
                        "operationId": "addPet",
                        "requestBody": {
                          "content": {
                            "application/json": {
                              "schema": {
                                "$ref": "#/components/schemas/Pet",
                              },
                            },
                            "application/x-www-form-urlencoded": {
                              "schema": {
                                "$ref": "#/components/schemas/Pet",
                              },
                            },
                            "application/xml": {
                              "schema": {
                                "$ref": "#/components/schemas/Pet",
                              },
                            },
                          },
                          "description": "Create a new pet in the store",
                          "required": true,
                        },
                        "responses": {
                          "200": {
                            "content": {
                              "application/json": {
                                "schema": {
                                  "$ref": "#/components/schemas/Pet",
                                },
                              },
                              "application/xml": {
                                "schema": {
                                  "$ref": "#/components/schemas/Pet",
                                },
                              },
                            },
                            "description": "Successful operation",
                          },
                          "405": {
                            "description": "Invalid input",
                          },
                        },
                        "security": [
                          {
                            "petstore_auth": [
                              "write:pets",
                              "read:pets",
                            ],
                          },
                        ],
                        "summary": "Add a new pet to the store",
                        "tags": [
                          "pet",
                        ],
                      },
                      "put": {
                        "description": "Update an existing pet by Id",
                        "operationId": "updatePet",
                        "requestBody": {
                          "content": {
                            "application/json": {
                              "schema": {
                                "$ref": "#/components/schemas/Pet",
                              },
                            },
                            "application/x-www-form-urlencoded": {
                              "schema": {
                                "$ref": "#/components/schemas/Pet",
                              },
                            },
                            "application/xml": {
                              "schema": {
                                "$ref": "#/components/schemas/Pet",
                              },
                            },
                          },
                          "description": "Update an existent pet in the store",
                          "required": true,
                        },
                        "responses": {
                          "200": {
                            "content": {
                              "application/json": {
                                "schema": {
                                  "$ref": "#/components/schemas/Pet",
                                },
                              },
                              "application/xml": {
                                "schema": {
                                  "$ref": "#/components/schemas/Pet",
                                },
                              },
                            },
                            "description": "Successful operation",
                          },
                          "400": {
                            "description": "Invalid ID supplied",
                          },
                          "404": {
                            "description": "Pet not found",
                          },
                          "405": {
                            "description": "Validation exception",
                          },
                        },
                        "security": [
                          {
                            "petstore_auth": [
                              "write:pets",
                              "read:pets",
                            ],
                          },
                        ],
                        "summary": "Update an existing pet",
                        "tags": [
                          "pet",
                        ],
                      },
                    },
                    "/pet/findByStatus": {
                      "get": {
                        "description": "Multiple status values can be provided with comma separated strings",
                        "operationId": "findPetsByStatus",
                        "parameters": [
                          {
                            "description": "Status values that need to be considered for filter",
                            "explode": true,
                            "in": "query",
                            "name": "status",
                            "required": false,
                            "schema": {
                              "default": "available",
                              "enum": [
                                "available",
                                "pending",
                                "sold",
                              ],
                              "type": "string",
                            },
                          },
                        ],
                        "responses": {
                          "200": {
                            "content": {
                              "application/json": {
                                "schema": {
                                  "items": {
                                    "$ref": "#/components/schemas/Pet",
                                  },
                                  "type": "array",
                                },
                              },
                              "application/xml": {
                                "schema": {
                                  "items": {
                                    "$ref": "#/components/schemas/Pet",
                                  },
                                  "type": "array",
                                },
                              },
                            },
                            "description": "successful operation",
                          },
                          "400": {
                            "description": "Invalid status value",
                          },
                        },
                        "security": [
                          {
                            "petstore_auth": [
                              "write:pets",
                              "read:pets",
                            ],
                          },
                        ],
                        "summary": "Finds Pets by status",
                        "tags": [
                          "pet",
                        ],
                      },
                    },
                    "/pet/findByTags": {
                      "get": {
                        "description": "Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.",
                        "operationId": "findPetsByTags",
                        "parameters": [
                          {
                            "description": "Tags to filter by",
                            "explode": true,
                            "in": "query",
                            "name": "tags",
                            "required": false,
                            "schema": {
                              "items": {
                                "type": "string",
                              },
                              "type": "array",
                            },
                          },
                        ],
                        "responses": {
                          "200": {
                            "content": {
                              "application/json": {
                                "schema": {
                                  "items": {
                                    "$ref": "#/components/schemas/Pet",
                                  },
                                  "type": "array",
                                },
                              },
                              "application/xml": {
                                "schema": {
                                  "items": {
                                    "$ref": "#/components/schemas/Pet",
                                  },
                                  "type": "array",
                                },
                              },
                            },
                            "description": "successful operation",
                          },
                          "400": {
                            "description": "Invalid tag value",
                          },
                        },
                        "security": [
                          {
                            "petstore_auth": [
                              "write:pets",
                              "read:pets",
                            ],
                          },
                        ],
                        "summary": "Finds Pets by tags",
                        "tags": [
                          "pet",
                        ],
                      },
                    },
                    "/pet/{petId}": {
                      "delete": {
                        "description": "",
                        "operationId": "deletePet",
                        "parameters": [
                          {
                            "description": "",
                            "in": "header",
                            "name": "api_key",
                            "required": false,
                            "schema": {
                              "type": "string",
                            },
                          },
                          {
                            "description": "Pet id to delete",
                            "in": "path",
                            "name": "petId",
                            "required": true,
                            "schema": {
                              "format": "int64",
                              "type": "integer",
                            },
                          },
                        ],
                        "responses": {
                          "400": {
                            "description": "Invalid pet value",
                          },
                        },
                        "security": [
                          {
                            "petstore_auth": [
                              "write:pets",
                              "read:pets",
                            ],
                          },
                        ],
                        "summary": "Deletes a pet",
                        "tags": [
                          "pet",
                        ],
                      },
                      "get": {
                        "description": "Returns a single pet",
                        "operationId": "getPetById",
                        "parameters": [
                          {
                            "description": "ID of pet to return",
                            "in": "path",
                            "name": "petId",
                            "required": true,
                            "schema": {
                              "format": "int64",
                              "type": "integer",
                            },
                          },
                        ],
                        "responses": {
                          "200": {
                            "content": {
                              "application/json": {
                                "schema": {
                                  "$ref": "#/components/schemas/Pet",
                                },
                              },
                              "application/xml": {
                                "schema": {
                                  "$ref": "#/components/schemas/Pet",
                                },
                              },
                            },
                            "description": "successful operation",
                          },
                          "400": {
                            "description": "Invalid ID supplied",
                          },
                          "404": {
                            "description": "Pet not found",
                          },
                        },
                        "security": [
                          {
                            "api_key": [],
                          },
                          {
                            "petstore_auth": [
                              "write:pets",
                              "read:pets",
                            ],
                          },
                        ],
                        "summary": "Find pet by ID",
                        "tags": [
                          "pet",
                        ],
                      },
                      "post": {
                        "description": "",
                        "operationId": "updatePetWithForm",
                        "parameters": [
                          {
                            "description": "ID of pet that needs to be updated",
                            "in": "path",
                            "name": "petId",
                            "required": true,
                            "schema": {
                              "format": "int64",
                              "type": "integer",
                            },
                          },
                          {
                            "description": "Name of pet that needs to be updated",
                            "in": "query",
                            "name": "name",
                            "schema": {
                              "type": "string",
                            },
                          },
                          {
                            "description": "Status of pet that needs to be updated",
                            "in": "query",
                            "name": "status",
                            "schema": {
                              "type": "string",
                            },
                          },
                        ],
                        "responses": {
                          "405": {
                            "description": "Invalid input",
                          },
                        },
                        "security": [
                          {
                            "petstore_auth": [
                              "write:pets",
                              "read:pets",
                            ],
                          },
                        ],
                        "summary": "Updates a pet in the store with form data",
                        "tags": [
                          "pet",
                        ],
                      },
                    },
                    "/pet/{petId}/uploadImage": {
                      "post": {
                        "description": "",
                        "operationId": "uploadFile",
                        "parameters": [
                          {
                            "description": "ID of pet to update",
                            "in": "path",
                            "name": "petId",
                            "required": true,
                            "schema": {
                              "format": "int64",
                              "type": "integer",
                            },
                          },
                          {
                            "description": "Additional Metadata",
                            "in": "query",
                            "name": "additionalMetadata",
                            "required": false,
                            "schema": {
                              "type": "string",
                            },
                          },
                        ],
                        "requestBody": {
                          "content": {
                            "application/octet-stream": {
                              "schema": {
                                "format": "binary",
                                "type": "string",
                              },
                            },
                          },
                        },
                        "responses": {
                          "200": {
                            "content": {
                              "application/json": {
                                "schema": {
                                  "$ref": "#/components/schemas/ApiResponse",
                                },
                              },
                            },
                            "description": "successful operation",
                          },
                        },
                        "security": [
                          {
                            "petstore_auth": [
                              "write:pets",
                              "read:pets",
                            ],
                          },
                        ],
                        "summary": "uploads an image",
                        "tags": [
                          "pet",
                        ],
                      },
                    },
                    "/store/inventory": {
                      "get": {
                        "description": "Returns a map of status codes to quantities",
                        "operationId": "getInventory",
                        "responses": {
                          "200": {
                            "content": {
                              "application/json": {
                                "schema": {
                                  "additionalProperties": {
                                    "format": "int32",
                                    "type": "integer",
                                  },
                                  "type": "object",
                                },
                              },
                            },
                            "description": "successful operation",
                          },
                        },
                        "security": [
                          {
                            "api_key": [],
                          },
                        ],
                        "summary": "Returns pet inventories by status",
                        "tags": [
                          "store",
                        ],
                      },
                    },
                    "/store/order": {
                      "post": {
                        "description": "Place a new order in the store",
                        "operationId": "placeOrder",
                        "requestBody": {
                          "content": {
                            "application/json": {
                              "schema": {
                                "$ref": "#/components/schemas/Order",
                              },
                            },
                            "application/x-www-form-urlencoded": {
                              "schema": {
                                "$ref": "#/components/schemas/Order",
                              },
                            },
                            "application/xml": {
                              "schema": {
                                "$ref": "#/components/schemas/Order",
                              },
                            },
                          },
                        },
                        "responses": {
                          "200": {
                            "content": {
                              "application/json": {
                                "schema": {
                                  "$ref": "#/components/schemas/Order",
                                },
                              },
                            },
                            "description": "successful operation",
                          },
                          "405": {
                            "description": "Invalid input",
                          },
                        },
                        "summary": "Place an order for a pet",
                        "tags": [
                          "store",
                        ],
                      },
                    },
                    "/store/order/{orderId}": {
                      "delete": {
                        "description": "For valid response try integer IDs with value < 1000. Anything above 1000 or nonintegers will generate API errors",
                        "operationId": "deleteOrder",
                        "parameters": [
                          {
                            "description": "ID of the order that needs to be deleted",
                            "in": "path",
                            "name": "orderId",
                            "required": true,
                            "schema": {
                              "format": "int64",
                              "type": "integer",
                            },
                          },
                        ],
                        "responses": {
                          "400": {
                            "description": "Invalid ID supplied",
                          },
                          "404": {
                            "description": "Order not found",
                          },
                        },
                        "summary": "Delete purchase order by ID",
                        "tags": [
                          "store",
                        ],
                      },
                      "get": {
                        "description": "For valid response try integer IDs with value <= 5 or > 10. Other values will generate exceptions.",
                        "operationId": "getOrderById",
                        "parameters": [
                          {
                            "description": "ID of order that needs to be fetched",
                            "in": "path",
                            "name": "orderId",
                            "required": true,
                            "schema": {
                              "format": "int64",
                              "type": "integer",
                            },
                          },
                        ],
                        "responses": {
                          "200": {
                            "content": {
                              "application/json": {
                                "schema": {
                                  "$ref": "#/components/schemas/Order",
                                },
                              },
                              "application/xml": {
                                "schema": {
                                  "$ref": "#/components/schemas/Order",
                                },
                              },
                            },
                            "description": "successful operation",
                          },
                          "400": {
                            "description": "Invalid ID supplied",
                          },
                          "404": {
                            "description": "Order not found",
                          },
                        },
                        "summary": "Find purchase order by ID",
                        "tags": [
                          "store",
                        ],
                      },
                    },
                    "/user": {
                      "post": {
                        "description": "This can only be done by the logged in user.",
                        "operationId": "createUser",
                        "requestBody": {
                          "content": {
                            "application/json": {
                              "schema": {
                                "$ref": "#/components/schemas/User",
                              },
                            },
                            "application/x-www-form-urlencoded": {
                              "schema": {
                                "$ref": "#/components/schemas/User",
                              },
                            },
                            "application/xml": {
                              "schema": {
                                "$ref": "#/components/schemas/User",
                              },
                            },
                          },
                          "description": "Created user object",
                        },
                        "responses": {
                          "default": {
                            "content": {
                              "application/json": {
                                "schema": {
                                  "$ref": "#/components/schemas/User",
                                },
                              },
                              "application/xml": {
                                "schema": {
                                  "$ref": "#/components/schemas/User",
                                },
                              },
                            },
                            "description": "successful operation",
                          },
                        },
                        "summary": "Create user",
                        "tags": [
                          "user",
                        ],
                      },
                    },
                    "/user/createWithList": {
                      "post": {
                        "description": "Creates list of users with given input array",
                        "operationId": "createUsersWithListInput",
                        "requestBody": {
                          "content": {
                            "application/json": {
                              "schema": {
                                "items": {
                                  "$ref": "#/components/schemas/User",
                                },
                                "type": "array",
                              },
                            },
                          },
                        },
                        "responses": {
                          "200": {
                            "content": {
                              "application/json": {
                                "schema": {
                                  "$ref": "#/components/schemas/User",
                                },
                              },
                              "application/xml": {
                                "schema": {
                                  "$ref": "#/components/schemas/User",
                                },
                              },
                            },
                            "description": "Successful operation",
                          },
                          "default": {
                            "description": "successful operation",
                          },
                        },
                        "summary": "Creates list of users with given input array",
                        "tags": [
                          "user",
                        ],
                      },
                    },
                    "/user/login": {
                      "get": {
                        "description": "",
                        "operationId": "loginUser",
                        "parameters": [
                          {
                            "description": "The user name for login",
                            "in": "query",
                            "name": "username",
                            "required": false,
                            "schema": {
                              "type": "string",
                            },
                          },
                          {
                            "description": "The password for login in clear text",
                            "in": "query",
                            "name": "password",
                            "required": false,
                            "schema": {
                              "type": "string",
                            },
                          },
                        ],
                        "responses": {
                          "200": {
                            "content": {
                              "application/json": {
                                "schema": {
                                  "type": "string",
                                },
                              },
                              "application/xml": {
                                "schema": {
                                  "type": "string",
                                },
                              },
                            },
                            "description": "successful operation",
                            "headers": {
                              "X-Expires-After": {
                                "description": "date in UTC when token expires",
                                "schema": {
                                  "format": "date-time",
                                  "type": "string",
                                },
                              },
                              "X-Rate-Limit": {
                                "description": "calls per hour allowed by the user",
                                "schema": {
                                  "format": "int32",
                                  "type": "integer",
                                },
                              },
                            },
                          },
                          "400": {
                            "description": "Invalid username/password supplied",
                          },
                        },
                        "summary": "Logs user into the system",
                        "tags": [
                          "user",
                        ],
                      },
                    },
                    "/user/logout": {
                      "get": {
                        "description": "",
                        "operationId": "logoutUser",
                        "parameters": [],
                        "responses": {
                          "default": {
                            "description": "successful operation",
                          },
                        },
                        "summary": "Logs out current logged in user session",
                        "tags": [
                          "user",
                        ],
                      },
                    },
                    "/user/{username}": {
                      "delete": {
                        "description": "This can only be done by the logged in user.",
                        "operationId": "deleteUser",
                        "parameters": [
                          {
                            "description": "The name that needs to be deleted",
                            "in": "path",
                            "name": "username",
                            "required": true,
                            "schema": {
                              "type": "string",
                            },
                          },
                        ],
                        "responses": {
                          "400": {
                            "description": "Invalid username supplied",
                          },
                          "404": {
                            "description": "User not found",
                          },
                        },
                        "summary": "Delete user",
                        "tags": [
                          "user",
                        ],
                      },
                      "get": {
                        "description": "",
                        "operationId": "getUserByName",
                        "parameters": [
                          {
                            "description": "The name that needs to be fetched. Use user1 for testing. ",
                            "in": "path",
                            "name": "username",
                            "required": true,
                            "schema": {
                              "type": "string",
                            },
                          },
                        ],
                        "responses": {
                          "200": {
                            "content": {
                              "application/json": {
                                "schema": {
                                  "$ref": "#/components/schemas/User",
                                },
                              },
                              "application/xml": {
                                "schema": {
                                  "$ref": "#/components/schemas/User",
                                },
                              },
                            },
                            "description": "successful operation",
                          },
                          "400": {
                            "description": "Invalid username supplied",
                          },
                          "404": {
                            "description": "User not found",
                          },
                        },
                        "summary": "Get user by user name",
                        "tags": [
                          "user",
                        ],
                      },
                      "put": {
                        "description": "This can only be done by the logged in user.",
                        "operationId": "updateUser",
                        "parameters": [
                          {
                            "description": "name that need to be deleted",
                            "in": "path",
                            "name": "username",
                            "required": true,
                            "schema": {
                              "type": "string",
                            },
                          },
                        ],
                        "requestBody": {
                          "content": {
                            "application/json": {
                              "schema": {
                                "$ref": "#/components/schemas/User",
                              },
                            },
                            "application/x-www-form-urlencoded": {
                              "schema": {
                                "$ref": "#/components/schemas/User",
                              },
                            },
                            "application/xml": {
                              "schema": {
                                "$ref": "#/components/schemas/User",
                              },
                            },
                          },
                          "description": "Update an existent user in the store",
                        },
                        "responses": {
                          "default": {
                            "description": "successful operation",
                          },
                        },
                        "summary": "Update user",
                        "tags": [
                          "user",
                        ],
                      },
                    },
                  },
                  "servers": [
                    {
                      "url": "/api/v3",
                    },
                  ],
                  "tags": [
                    {
                      "description": "Everything about your Pets",
                      "externalDocs": {
                        "description": "Find out more",
                        "url": "http://swagger.io",
                      },
                      "name": "pet",
                    },
                    {
                      "description": "Access to Petstore orders",
                      "externalDocs": {
                        "description": "Find out more about our store",
                        "url": "http://swagger.io",
                      },
                      "name": "store",
                    },
                    {
                      "description": "Operations about user",
                      "name": "user",
                    },
                  ],
                },
                "strict": true,
              },
            },
          ],
          "description": {
            "name": "tags",
            "optional": "implicit",
          },
          "name": "tags",
          "type": "array",
          "uuid": "00077-000",
          "value": {
            "maxItems": undefined,
            "minItems": undefined,
            "uniqueItems": undefined,
          },
        },
        {
          "children": [
            "available",
            "pending",
            "sold",
          ],
          "description": {
            "description": "pet status in the store",
            "name": "status",
            "optional": "implicit",
          },
          "name": "status",
          "type": "enum",
          "uuid": "00078-000",
          "value": {},
        },
      ],
      "description": {},
      "name": "Pet",
      "prepass": true,
      "type": "object",
      "uuid": "00079-000",
      "value": {},
    },
    {
      "children": [
        {
          "children": [],
          "description": {
            "name": "code",
            "optional": "implicit",
          },
          "name": "code",
          "type": "integer",
          "uuid": "00093-000",
          "value": {
            "maximum": undefined,
            "minimum": undefined,
            "multipleOf": undefined,
          },
        },
        {
          "children": [],
          "description": {
            "name": "type",
            "optional": "implicit",
          },
          "name": "type",
          "type": "string",
          "uuid": "00094-000",
          "value": {
            "format": undefined,
            "maxLength": undefined,
            "minLength": undefined,
            "pattern": undefined,
          },
        },
        {
          "children": [],
          "description": {
            "name": "message",
            "optional": "implicit",
          },
          "name": "message",
          "type": "string",
          "uuid": "00095-000",
          "value": {
            "format": undefined,
            "maxLength": undefined,
            "minLength": undefined,
            "pattern": undefined,
          },
        },
      ],
      "description": {},
      "name": "ApiResponse",
      "prepass": true,
      "type": "object",
      "uuid": "00096-000",
      "value": {},
    },
  ],
  "description": {},
  "type": "object",
  "uuid": "00097-000",
  "value": {},
}
`;

exports[`petstore > jsonschema 1`] = `
{
  "additionalProperties": true,
  "properties": {
    "Address": {
      "additionalProperties": true,
      "properties": {
        "city": {
          "title": "city",
          "type": "string",
        },
        "state": {
          "title": "state",
          "type": "string",
        },
        "street": {
          "title": "street",
          "type": "string",
        },
        "zip": {
          "title": "zip",
          "type": "string",
        },
      },
      "type": "object",
    },
    "ApiResponse": {
      "additionalProperties": true,
      "properties": {
        "code": {
          "title": "code",
          "type": "integer",
        },
        "message": {
          "title": "message",
          "type": "string",
        },
        "type": {
          "title": "type",
          "type": "string",
        },
      },
      "type": "object",
    },
    "Category": {
      "additionalProperties": true,
      "properties": {
        "id": {
          "title": "id",
          "type": "integer",
        },
        "name": {
          "title": "name",
          "type": "string",
        },
      },
      "type": "object",
    },
    "Customer": {
      "additionalProperties": true,
      "properties": {
        "address": {
          "items": {
            "$ref": "#/$defs/{{00030-000:uniqueSymbolName}}",
          },
          "title": "address",
          "type": "array",
        },
        "id": {
          "title": "id",
          "type": "integer",
        },
        "username": {
          "title": "username",
          "type": "string",
        },
      },
      "type": "object",
    },
    "Order": {
      "additionalProperties": true,
      "properties": {
        "complete": {
          "title": "complete",
          "type": "boolean",
        },
        "id": {
          "title": "id",
          "type": "integer",
        },
        "petId": {
          "title": "petId",
          "type": "integer",
        },
        "quantity": {
          "title": "quantity",
          "type": "integer",
        },
        "shipDate": {
          "format": "date-time",
          "title": "shipDate",
          "type": "string",
        },
        "status": {
          "description": "Order Status",
          "enum": [
            "placed",
            "approved",
            "delivered",
          ],
          "title": "status",
        },
      },
      "type": "object",
    },
    "Pet": {
      "additionalProperties": true,
      "properties": {
        "category": {
          "$ref": "#/$defs/{{00084-000:uniqueSymbolName}}",
          "title": "category",
        },
        "id": {
          "title": "id",
          "type": "integer",
        },
        "name": {
          "title": "name",
          "type": "string",
        },
        "photoUrls": {
          "items": {
            "type": "string",
          },
          "title": "photoUrls",
          "type": "array",
        },
        "status": {
          "description": "pet status in the store",
          "enum": [
            "available",
            "pending",
            "sold",
          ],
          "title": "status",
        },
        "tags": {
          "items": {
            "$ref": "#/$defs/{{00089-000:uniqueSymbolName}}",
          },
          "title": "tags",
          "type": "array",
        },
      },
      "required": [
        "name",
        "photoUrls",
      ],
      "type": "object",
    },
    "Tag": {
      "additionalProperties": true,
      "properties": {
        "id": {
          "title": "id",
          "type": "integer",
        },
        "name": {
          "title": "name",
          "type": "string",
        },
      },
      "type": "object",
    },
    "User": {
      "additionalProperties": true,
      "properties": {
        "email": {
          "title": "email",
          "type": "string",
        },
        "firstName": {
          "title": "firstName",
          "type": "string",
        },
        "id": {
          "title": "id",
          "type": "integer",
        },
        "lastName": {
          "title": "lastName",
          "type": "string",
        },
        "password": {
          "title": "password",
          "type": "string",
        },
        "phone": {
          "title": "phone",
          "type": "string",
        },
        "userStatus": {
          "description": "User Status",
          "title": "userStatus",
          "type": "integer",
        },
        "username": {
          "title": "username",
          "type": "string",
        },
      },
      "type": "object",
    },
  },
  "required": [
    "Order",
    "Customer",
    "Address",
    "Category",
    "User",
    "Tag",
    "Pet",
    "ApiResponse",
  ],
  "type": "object",
}
`;

exports[`petstore > typescript 1`] = `
{
  "declaration": "interface {{00097-000:symbolName}} {
    Order: {
        id?: number
        petId?: number
        quantity?: number
        shipDate?: string
        /**
         * Order Status
         */
        status?: 'placed' | 'approved' | 'delivered'
        complete?: boolean
    }
    Customer: {
        id?: number
        username?: string
        address?: ({{00030-000:referenceName}})[]
    }
    Address: {
        street?: string
        city?: string
        state?: string
        zip?: string
    }
    Category: {
        id?: number
        name?: string
    }
    User: {
        id?: number
        username?: string
        firstName?: string
        lastName?: string
        email?: string
        password?: string
        phone?: string
        /**
         * User Status
         */
        userStatus?: number
    }
    Tag: {
        id?: number
        name?: string
    }
    Pet: {
        id?: number
        name: string
        category?: {{00084-000:referenceName}}
        photoUrls: (string)[]
        tags?: ({{00089-000:referenceName}})[]
        /**
         * pet status in the store
         */
        status?: 'available' | 'pending' | 'sold'
    }
    ApiResponse: {
        code?: number
        type?: string
        message?: string
    }
}
",
  "referenceName": "{{00097-000:symbolName}}",
  "render": [Function],
  "sourceSymbol": undefined,
}
`;
