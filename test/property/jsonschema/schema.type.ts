/**
 * Generated by @skyleague/therefore@v1.0.0-local
 * Do not manually touch this
 */
/* eslint-disable */

import { ValidationError } from 'ajv'
import type { DefinedError, ValidateFunction } from 'ajv'

import { validate as JsonSchemaValidator } from './schemas/json-schema.schema.js'

export type AlternateXORUnionInstance = {
    oneOf: [JsonSchema, ...JsonSchema[]]
} & JsonAnnotations

export type AlternativeType = {
    type: [AlternativeTypeTypeArray, ...AlternativeTypeTypeArray[]]
} & JsonAnnotations

export type ArrayInstance = {
    type: 'array'
    items: JsonSchema
    minItems?: number | undefined
    maxItems?: number | undefined
    uniqueItems?: boolean | undefined
    'x-arbitrary': { maxLength: 2 }
} & JsonAnnotations

export type BooleanInstance = {
    type: 'boolean'
} & JsonAnnotations

export type ConstInstance = {
    const: unknown
} & JsonAnnotations

export type EnumInstance = {
    enum: [unknown, ...unknown[]]
} & JsonAnnotations

export type FactoredSchema = ObjectInstance & (UnionInstance | AlternateXORUnionInstance | IntersectionInstance)

export type IntegerInstance = {
    type: 'integer'
    multipleOf?: number | undefined
} & (
    | {
          minimum?: number | undefined
      }
    | {
          exclusiveMinimum?: number | undefined
      }
) &
    (
        | {
              maximum?: number | undefined
          }
        | {
              exclusiveMaximum?: number | undefined
          }
    ) &
    JsonAnnotations

export type IntersectionInstance = {
    allOf: [ObjectInstance, ...ObjectInstance[]]
} & JsonAnnotations

export interface JsonAnnotations {
    title?: string | undefined
    description?: string | undefined
    default?: unknown
    deprecated?: boolean | undefined
    readonly?: boolean | undefined
    writeonly?: boolean | undefined
    examples?: unknown[] | undefined
    nullable?: boolean | undefined
}

export type JsonSchema =
    | BooleanInstance
    | UnknownInstance
    | EnumInstance
    | ConstInstance
    | IntegerInstance
    | NumberInstance
    | StringInstance
    | NullInstance
    | ObjectInstance
    | ArrayInstance
    | TupleInstance
    | VariadicTupleInstance
    | UnionInstance
    | IntersectionInstance
    | RefType
    | AlternateXORUnionInstance
    | AlternativeType

export const JsonSchema = {
    validate: JsonSchemaValidator as ValidateFunction<JsonSchema>,
    get schema() {
        return JsonSchema.validate.schema
    },
    get errors() {
        return JsonSchema.validate.errors ?? undefined
    },
    is: (o: unknown): o is JsonSchema => JsonSchema.validate(o) === true,
    assert: (o: unknown) => {
        if (!JsonSchema.validate(o)) {
            throw new ValidationError(JsonSchema.errors ?? [])
        }
    },
    parse: (o: unknown): { right: JsonSchema } | { left: DefinedError[] } => {
        if (JsonSchema.is(o)) {
            return { right: o }
        }
        return { left: (JsonSchema.errors ?? []) as DefinedError[] }
    },
} as const

export type NullInstance = {
    type: 'null'
} & JsonAnnotations

export type NumberInstance = {
    type: 'number'
    multipleOf?: number | undefined
} & (
    | {
          minimum?: number | undefined
      }
    | {
          exclusiveMinimum?: number | undefined
      }
) &
    (
        | {
              maximum?: number | undefined
          }
        | {
              exclusiveMaximum?: number | undefined
          }
    ) &
    JsonAnnotations

export type ObjectInstance = {
    type: 'object'
    properties: {
        [k: string]: JsonSchema | undefined
    }
} & (
    | {
          patternProperties: {
              [k: string]: JsonSchema
          }
      }
    | {
          additionalProperties: JsonSchema
      }
) &
    JsonAnnotations

export type RefType = {
    $ref: string
}

export type StringInstance = {
    type: 'string'
} & (
    | {
          minLength?: number | undefined
          maxLength?: number | undefined
      }
    | {
          format: 'date-time' | 'date' | 'time' | 'email' | 'hostname' | 'ipv4' | 'ipv6' | 'uri' | 'uuid'
      }
    | {
          pattern: '[a-zA-Z0-9]{2,10}'
      }
) &
    JsonAnnotations

export type TupleInstance = {
    type: 'array'
    items: [JsonSchema, ...JsonSchema[]]
    additionalItems: false
} & JsonAnnotations

type AlternativeTypeTypeArray = 'null' | 'boolean' | 'object' | 'array' | 'number' | 'string'

export type UnionInstance = {
    anyOf: [JsonSchema, ...JsonSchema[]]
} & JsonAnnotations

export type UnknownInstance = JsonAnnotations

export type VariadicTupleInstance = {
    type: 'array'
    items: [JsonSchema, ...JsonSchema[]]
    additionalItems: JsonSchema
} & JsonAnnotations
