// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`output generation 1`] = `
{
  "cleanFn": [Function],
  "outputFiles": {
    "examples/restclients/petstore/options/petstore.client.ts": "/**
* Generated by @skyleague/therefore@v1.0.0-local
* Do not manually touch this
*/
/* eslint-disable */

import { got } from 'got'
import type { CancelableRequest, Got, Options, OptionsInit, Response } from 'got'

import { ApiResponse, CreateUsersWithListInputRequest, FindPetsByStatusResponse, FindPetsByTagsResponse, GetInventoryResponse, LoginUserResponse, Order, Pet, User } from './petstore.type.js'

/**
 * Swagger Petstore - OpenAPI 3.0
 * 
 * This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about
 * Swagger at [http://swagger.io](http://swagger.io). In the third iteration of the pet store, we've switched to the design first approach!
 * You can now help us improve the API whether it's by making changes to the definition itself or to the code.
 * That way, with time, we can improve the API in general, and expose some of the new features in OAS3.
 * 
 * Some useful links:
 * - [The Pet Store repository](https://github.com/swagger-api/swagger-petstore)
 * - [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)
 */
export class PetStoreOptions {
    public client: Got

    public auth: {
        petstoreAuth?: string | (() => Promise<string>),apiKey?: string | (() => Promise<string>)
    }

    public availableAuth: Set<string>
    public defaultAuth: string[][] | string[] | undefined

    public constructor(
    {
        prefixUrl,
        options,
        auth = {},
        defaultAuth,
    }: {
        prefixUrl: string | \`\${string}/api/v3\`,
        options?: Options | OptionsInit,
        auth: {
            petstoreAuth?: string | (() => Promise<string>),apiKey?: string | (() => Promise<string>)
        }
        defaultAuth?: string[][] | string[]
    }) {
        this.client = got.extend(...[{ prefixUrl }, options].filter((o): o is Options => o !== undefined))
        this.auth = auth
        this.availableAuth = new Set(Object.keys(auth))
        this.defaultAuth = defaultAuth
    }


    /**
     * Add a new pet to the store
     */
    public addPet({body, auth = [['petstoreAuth']]}: {body: Pet, auth?: string[][] | string[]})
    {
        this.validateRequestBody(Pet, body)

        return this.awaitResponse(this.buildClient(auth).post('pet', {
            json: body,responseType: 'json',
        }), {
            200: Pet,405: {is: (x: unknown): x is string => true},
        })
    }

    /**
     * Create user
     * 
     * This can only be done by the logged in user.
     */
    public createUser({body}: {body: User})
    {
        this.validateRequestBody(User, body)

        return this.awaitResponse(this.client.post('user', {
            json: body,responseType: 'json',
        }), {
            default: User,
        })
    }

    /**
     * Creates list of users with given input array
     */
    public createUsersWithListInput({body}: {body: CreateUsersWithListInputRequest})
    {
        this.validateRequestBody(CreateUsersWithListInputRequest, body)

        return this.awaitResponse(this.client.post('user/createWithList', {
            json: body,responseType: 'json',
        }), {
            200: User,
        })
    }

    /**
     * Delete purchase order by ID
     * 
     * For valid response try integer IDs with value < 1000. Anything above 1000 or nonintegers will generate API errors
     */
    public deleteOrder({path}: {path: { orderId: string }})
    {
        return this.awaitResponse(this.client.delete(\`store/order/\${path.orderId}\`, {
            responseType: 'text',
        }), {
            400: {is: (x: unknown): x is string => true},404: {is: (x: unknown): x is string => true},
        })
    }

    /**
     * Deletes a pet
     */
    public deletePet({path, headers, auth = [['petstoreAuth']]}: {path: { petId: string }, headers?: { api_key?: string }, auth?: string[][] | string[]})
    {
        return this.awaitResponse(this.buildClient(auth).delete(\`pet/\${path.petId}\`, {
            headers: headers ?? {},responseType: 'text',
        }), {
            400: {is: (x: unknown): x is string => true},
        })
    }

    /**
     * Delete user
     * 
     * This can only be done by the logged in user.
     */
    public deleteUser({path}: {path: { username: string }})
    {
        return this.awaitResponse(this.client.delete(\`user/\${path.username}\`, {
            responseType: 'text',
        }), {
            400: {is: (x: unknown): x is string => true},404: {is: (x: unknown): x is string => true},
        })
    }

    /**
     * Finds Pets by status
     * 
     * Multiple status values can be provided with comma separated strings
     */
    public findPetsByStatus({query, auth = [['petstoreAuth']]}: {query?: { status?: string }, auth?: string[][] | string[]} = {})
    {
        return this.awaitResponse(this.buildClient(auth).get('pet/findByStatus', {
            searchParams: query ?? {},responseType: 'json',
        }), {
            200: FindPetsByStatusResponse,400: {is: (x: unknown): x is string => true},
        })
    }

    /**
     * Finds Pets by tags
     * 
     * Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
     */
    public findPetsByTags({query, auth = [['petstoreAuth']]}: {query?: { tags?: string }, auth?: string[][] | string[]} = {})
    {
        return this.awaitResponse(this.buildClient(auth).get('pet/findByTags', {
            searchParams: query ?? {},responseType: 'json',
        }), {
            200: FindPetsByTagsResponse,400: {is: (x: unknown): x is string => true},
        })
    }

    /**
     * Returns pet inventories by status
     * 
     * Returns a map of status codes to quantities
     */
    public getInventory({auth = [['apiKey']]}: {auth?: string[][] | string[]} = {})
    {
        return this.awaitResponse(this.buildClient(auth).get('store/inventory', {
            responseType: 'json',
        }), {
            200: GetInventoryResponse,
        })
    }

    /**
     * Find purchase order by ID
     * 
     * For valid response try integer IDs with value <= 5 or > 10. Other values will generate exceptions.
     */
    public getOrderById({path}: {path: { orderId: string }})
    {
        return this.awaitResponse(this.client.get(\`store/order/\${path.orderId}\`, {
            responseType: 'json',
        }), {
            200: Order,400: {is: (x: unknown): x is string => true},404: {is: (x: unknown): x is string => true},
        })
    }

    /**
     * Find pet by ID
     * 
     * Returns a single pet
     */
    public getPetById({path, auth = [['apiKey'], ['petstoreAuth']]}: {path: { petId: string }, auth?: string[][] | string[]})
    {
        return this.awaitResponse(this.buildClient(auth).get(\`pet/\${path.petId}\`, {
            responseType: 'json',
        }), {
            200: Pet,400: {is: (x: unknown): x is string => true},404: {is: (x: unknown): x is string => true},
        })
    }

    /**
     * Get user by user name
     */
    public getUserByName({path}: {path: { username: string }})
    {
        return this.awaitResponse(this.client.get(\`user/\${path.username}\`, {
            responseType: 'json',
        }), {
            200: User,400: {is: (x: unknown): x is string => true},404: {is: (x: unknown): x is string => true},
        })
    }

    /**
     * Logs user into the system
     */
    public loginUser({query}: {query?: { username?: string, password?: string }} = {})
    {
        return this.awaitResponse(this.client.get('user/login', {
            searchParams: query ?? {},responseType: 'json',
        }), {
            200: LoginUserResponse,400: {is: (x: unknown): x is string => true},
        })
    }

    /**
     * Logs out current logged in user session
     */
    public logoutUser()
    {
        return this.awaitResponse(this.client.get('user/logout', {
            responseType: 'text',
        }), {
        })
    }

    /**
     * Place an order for a pet
     * 
     * Place a new order in the store
     */
    public placeOrder({body}: {body: Order})
    {
        this.validateRequestBody(Order, body)

        return this.awaitResponse(this.client.post('store/order', {
            json: body,responseType: 'json',
        }), {
            200: Order,405: {is: (x: unknown): x is string => true},
        })
    }

    /**
     * Update an existing pet
     * 
     * Update an existing pet by Id
     */
    public updatePet({body, auth = [['petstoreAuth']]}: {body: Pet, auth?: string[][] | string[]})
    {
        this.validateRequestBody(Pet, body)

        return this.awaitResponse(this.buildClient(auth).put('pet', {
            json: body,responseType: 'json',
        }), {
            200: Pet,400: {is: (x: unknown): x is string => true},404: {is: (x: unknown): x is string => true},405: {is: (x: unknown): x is string => true},
        })
    }

    /**
     * Updates a pet in the store with form data
     */
    public updatePetWithForm({path, query, auth = [['petstoreAuth']]}: {path: { petId: string }, query?: { name?: string, status?: string }, auth?: string[][] | string[]})
    {
        return this.awaitResponse(this.buildClient(auth).post(\`pet/\${path.petId}\`, {
            searchParams: query ?? {},responseType: 'text',
        }), {
            405: {is: (x: unknown): x is string => true},
        })
    }

    /**
     * Update user
     * 
     * This can only be done by the logged in user.
     */
    public updateUser({body, path}: {body: User, path: { username: string }})
    {
        this.validateRequestBody(User, body)

        return this.awaitResponse(this.client.put(\`user/\${path.username}\`, {
            json: body,responseType: 'text',
        }), {
        })
    }

    /**
     * uploads an image
     */
    public uploadFile({body, path, query, auth = [['petstoreAuth']]}: {body: string | Buffer, path: { petId: string }, query?: { additionalMetadata?: string }, auth?: string[][] | string[]})
    {
        return this.awaitResponse(this.buildClient(auth).post(\`pet/\${path.petId}/uploadImage\`, {
            body: body,searchParams: query ?? {},responseType: 'json',
        }), {
            200: ApiResponse,
        })
    }

    public validateRequestBody<T>(schema: { is: (o: unknown) => o is T, assert: (o: unknown) => void}, body: T)
    {
        schema.assert(body)
        return body
    }

    public async awaitResponse<T, S extends Record<PropertyKey, undefined | { is: (o: unknown) => o is T; assert?: (o: unknown) => void }>>(response: CancelableRequest<Response>, schemas: S)
    {
        type FilterStartingWith<S extends PropertyKey, T extends string> = S extends number | string ? \`\${S}\` extends \`\${T}\${infer _X}\` ? S : never : never
        type InferSchemaType<T> = T extends { is: (o: unknown) => o is infer S } ? S : never
        const result = await response
        const schema = schemas[result.statusCode] ?? schemas.default
        schema?.assert?.(result.body)
        return {statusCode: result.statusCode, headers: result.headers, body: result.body as InferSchemaType<S[keyof Pick<S, FilterStartingWith<keyof S, '2' | 'default'>>]> }
    }

    protected buildPetstoreAuthClient(client: Got)
    {
        return client
    }


    protected buildApiKeyClient(client: Got)
    {
        return client.extend({
        hooks: {
        beforeRequest: [
        async (options) => 
        {
            const apiKey = this.auth.apiKey
            const key = typeof apiKey === 'function' ? await apiKey() : apiKey
            options.headers.api_key = key
        }
        ],},})
    }

    protected buildClient(auths: string[][] | string[] | undefined = this.defaultAuth, client?: Got): Got
    {
        const auth = (auths ?? [...this.availableAuth]).map(auth => Array.isArray(auth) ? auth : [auth]).filter((auth) => auth.every((a) => this.availableAuth.has(a)))
        let chosenClient = client ?? this.client
        for (const chosen of auth[0] ?? [])
        {
            if (chosen === 'petstoreAuth')
            {
                chosenClient = this.buildPetstoreAuthClient(chosenClient)
            }
            else
            if (chosen === 'apiKey')
            {
                chosenClient = this.buildApiKeyClient(chosenClient)
            }
        }
        return chosenClient
    }
}

",
    "examples/restclients/petstore/options/petstore.type.ts": "/**
* Generated by @skyleague/therefore@v1.0.0-local
* Do not manually touch this
*/
/* eslint-disable */

import { Ajv, ValidationError } from 'ajv'
import type { DefinedError } from 'ajv'
import addFormats from 'ajv-formats'
import type { FormatName } from 'ajv-formats'

import ApiResponseSchema from './schemas/api-response.schema.json' with { type: "json" }
import CreateUsersWithListInputRequestSchema from './schemas/create-users-with-list-input-request.schema.json' with { type: "json" }
import FindPetsByStatusResponseSchema from './schemas/find-pets-by-status-response.schema.json' with { type: "json" }
import FindPetsByTagsResponseSchema from './schemas/find-pets-by-tags-response.schema.json' with { type: "json" }
import GetInventoryResponseSchema from './schemas/get-inventory-response.schema.json' with { type: "json" }
import LoginUserResponseSchema from './schemas/login-user-response.schema.json' with { type: "json" }
import OrderSchema from './schemas/order.schema.json' with { type: "json" }
import PetSchema from './schemas/pet.schema.json' with { type: "json" }
import UserSchema from './schemas/user.schema.json' with { type: "json" }

export interface ApiResponse {
    code?: (number | undefined)
    message?: (string | undefined)
    type?: (string | undefined)
}

export const ApiResponse = {
    validate: new Ajv({"strict":true,"strictSchema":false,"strictTypes":true,"strictTuples":false,"useDefaults":true,"logger":false,"loopRequired":5,"loopEnum":5,"multipleOfPrecision":4,"code":{"esm":true}}).compile<ApiResponse>(ApiResponseSchema),
    schema: ApiResponseSchema,
    get errors() { return ApiResponse.validate.errors ?? undefined },
    is: (o: unknown): o is ApiResponse => ApiResponse.validate(o) === true,
    assert: (o: unknown) => {
        if (!ApiResponse.validate(o)) {
            throw new ValidationError(ApiResponse.errors ?? [])
        }
    },
    parse: (o: unknown): { right: ApiResponse } | { left: DefinedError[] } => 
    {
        if(ApiResponse.is(o)) {
            return { right: o }
        }
        return { left: (ApiResponse.errors ?? []) as DefinedError[] }
    },
} as const


export interface Category {
    id?: (number | undefined)
    name?: (string | undefined)
}

export type CreateUsersWithListInputRequest = (User)[]

export const CreateUsersWithListInputRequest = {
    validate: new Ajv({"strict":true,"strictSchema":false,"strictTypes":true,"strictTuples":false,"useDefaults":true,"logger":false,"loopRequired":5,"loopEnum":5,"multipleOfPrecision":4,"code":{"esm":true}}).compile<CreateUsersWithListInputRequest>(CreateUsersWithListInputRequestSchema),
    schema: CreateUsersWithListInputRequestSchema,
    get errors() { return CreateUsersWithListInputRequest.validate.errors ?? undefined },
    is: (o: unknown): o is CreateUsersWithListInputRequest => CreateUsersWithListInputRequest.validate(o) === true,
    assert: (o: unknown) => {
        if (!CreateUsersWithListInputRequest.validate(o)) {
            throw new ValidationError(CreateUsersWithListInputRequest.errors ?? [])
        }
    },
    parse: (o: unknown): { right: CreateUsersWithListInputRequest } | { left: DefinedError[] } => 
    {
        if(CreateUsersWithListInputRequest.is(o)) {
            return { right: o }
        }
        return { left: (CreateUsersWithListInputRequest.errors ?? []) as DefinedError[] }
    },
} as const


export type FindPetsByStatusResponse = (Pet)[]

export const FindPetsByStatusResponse = {
    validate: new Ajv({"strict":true,"strictSchema":false,"strictTypes":true,"strictTuples":false,"useDefaults":true,"logger":false,"loopRequired":5,"loopEnum":5,"multipleOfPrecision":4,"code":{"esm":true}}).compile<FindPetsByStatusResponse>(FindPetsByStatusResponseSchema),
    schema: FindPetsByStatusResponseSchema,
    get errors() { return FindPetsByStatusResponse.validate.errors ?? undefined },
    is: (o: unknown): o is FindPetsByStatusResponse => FindPetsByStatusResponse.validate(o) === true,
    assert: (o: unknown) => {
        if (!FindPetsByStatusResponse.validate(o)) {
            throw new ValidationError(FindPetsByStatusResponse.errors ?? [])
        }
    },
    parse: (o: unknown): { right: FindPetsByStatusResponse } | { left: DefinedError[] } => 
    {
        if(FindPetsByStatusResponse.is(o)) {
            return { right: o }
        }
        return { left: (FindPetsByStatusResponse.errors ?? []) as DefinedError[] }
    },
} as const


export type FindPetsByTagsResponse = (Pet)[]

export const FindPetsByTagsResponse = {
    validate: new Ajv({"strict":true,"strictSchema":false,"strictTypes":true,"strictTuples":false,"useDefaults":true,"logger":false,"loopRequired":5,"loopEnum":5,"multipleOfPrecision":4,"code":{"esm":true}}).compile<FindPetsByTagsResponse>(FindPetsByTagsResponseSchema),
    schema: FindPetsByTagsResponseSchema,
    get errors() { return FindPetsByTagsResponse.validate.errors ?? undefined },
    is: (o: unknown): o is FindPetsByTagsResponse => FindPetsByTagsResponse.validate(o) === true,
    assert: (o: unknown) => {
        if (!FindPetsByTagsResponse.validate(o)) {
            throw new ValidationError(FindPetsByTagsResponse.errors ?? [])
        }
    },
    parse: (o: unknown): { right: FindPetsByTagsResponse } | { left: DefinedError[] } => 
    {
        if(FindPetsByTagsResponse.is(o)) {
            return { right: o }
        }
        return { left: (FindPetsByTagsResponse.errors ?? []) as DefinedError[] }
    },
} as const


export interface GetInventoryResponse {
    [k: string]: (number | undefined)
}

export const GetInventoryResponse = {
    validate: new Ajv({"strict":true,"strictSchema":false,"strictTypes":true,"strictTuples":false,"useDefaults":true,"logger":false,"loopRequired":5,"loopEnum":5,"multipleOfPrecision":4,"code":{"esm":true}}).compile<GetInventoryResponse>(GetInventoryResponseSchema),
    schema: GetInventoryResponseSchema,
    get errors() { return GetInventoryResponse.validate.errors ?? undefined },
    is: (o: unknown): o is GetInventoryResponse => GetInventoryResponse.validate(o) === true,
    assert: (o: unknown) => {
        if (!GetInventoryResponse.validate(o)) {
            throw new ValidationError(GetInventoryResponse.errors ?? [])
        }
    },
    parse: (o: unknown): { right: GetInventoryResponse } | { left: DefinedError[] } => 
    {
        if(GetInventoryResponse.is(o)) {
            return { right: o }
        }
        return { left: (GetInventoryResponse.errors ?? []) as DefinedError[] }
    },
} as const


export type LoginUserResponse = string

export const LoginUserResponse = {
    validate: new Ajv({"strict":true,"strictSchema":false,"strictTypes":true,"strictTuples":false,"useDefaults":true,"logger":false,"loopRequired":5,"loopEnum":5,"multipleOfPrecision":4,"code":{"esm":true}}).compile<LoginUserResponse>(LoginUserResponseSchema),
    schema: LoginUserResponseSchema,
    get errors() { return LoginUserResponse.validate.errors ?? undefined },
    is: (o: unknown): o is LoginUserResponse => LoginUserResponse.validate(o) === true,
    assert: (o: unknown) => {
        if (!LoginUserResponse.validate(o)) {
            throw new ValidationError(LoginUserResponse.errors ?? [])
        }
    },
    parse: (o: unknown): { right: LoginUserResponse } | { left: DefinedError[] } => 
    {
        if(LoginUserResponse.is(o)) {
            return { right: o }
        }
        return { left: (LoginUserResponse.errors ?? []) as DefinedError[] }
    },
} as const


export interface Order {
    complete?: (boolean | undefined)
    id?: (number | undefined)
    petId?: (number | undefined)
    quantity?: (number | undefined)
    shipDate?: (string | undefined)
    /**
     * Order Status
     */
    status?: ('placed' | 'approved' | 'delivered' | undefined)
}

export const Order = {
    validate: addFormats.default(new Ajv({"strict":true,"strictSchema":false,"strictTypes":true,"strictTuples":false,"useDefaults":true,"logger":false,"loopRequired":5,"loopEnum":5,"multipleOfPrecision":4,"code":{"esm":true}}), ['date-time'] as FormatName[]).compile<Order>(OrderSchema),
    schema: OrderSchema,
    get errors() { return Order.validate.errors ?? undefined },
    is: (o: unknown): o is Order => Order.validate(o) === true,
    assert: (o: unknown) => {
        if (!Order.validate(o)) {
            throw new ValidationError(Order.errors ?? [])
        }
    },
    parse: (o: unknown): { right: Order } | { left: DefinedError[] } => 
    {
        if(Order.is(o)) {
            return { right: o }
        }
        return { left: (Order.errors ?? []) as DefinedError[] }
    },
} as const


export interface Pet {
    category?: (Category | undefined)
    id?: (number | undefined)
    name: string
    photoUrls: (string)[]
    /**
     * pet status in the store
     */
    status?: ('available' | 'pending' | 'sold' | undefined)
    tags?: ((Tag)[] | undefined)
}

export const Pet = {
    validate: new Ajv({"strict":true,"strictSchema":false,"strictTypes":true,"strictTuples":false,"useDefaults":true,"logger":false,"loopRequired":5,"loopEnum":5,"multipleOfPrecision":4,"code":{"esm":true}}).compile<Pet>(PetSchema),
    schema: PetSchema,
    get errors() { return Pet.validate.errors ?? undefined },
    is: (o: unknown): o is Pet => Pet.validate(o) === true,
    assert: (o: unknown) => {
        if (!Pet.validate(o)) {
            throw new ValidationError(Pet.errors ?? [])
        }
    },
    parse: (o: unknown): { right: Pet } | { left: DefinedError[] } => 
    {
        if(Pet.is(o)) {
            return { right: o }
        }
        return { left: (Pet.errors ?? []) as DefinedError[] }
    },
} as const


export interface Tag {
    id?: (number | undefined)
    name?: (string | undefined)
}

export interface User {
    email?: (string | undefined)
    firstName?: (string | undefined)
    id?: (number | undefined)
    lastName?: (string | undefined)
    password?: (string | undefined)
    phone?: (string | undefined)
    username?: (string | undefined)
    /**
     * User Status
     */
    userStatus?: (number | undefined)
}

export const User = {
    validate: new Ajv({"strict":true,"strictSchema":false,"strictTypes":true,"strictTuples":false,"useDefaults":true,"logger":false,"loopRequired":5,"loopEnum":5,"multipleOfPrecision":4,"code":{"esm":true}}).compile<User>(UserSchema),
    schema: UserSchema,
    get errors() { return User.validate.errors ?? undefined },
    is: (o: unknown): o is User => User.validate(o) === true,
    assert: (o: unknown) => {
        if (!User.validate(o)) {
            throw new ValidationError(User.errors ?? [])
        }
    },
    parse: (o: unknown): { right: User } | { left: DefinedError[] } => 
    {
        if(User.is(o)) {
            return { right: o }
        }
        return { left: (User.errors ?? []) as DefinedError[] }
    },
} as const


",
    "examples/restclients/petstore/options/schemas/api-response.schema.json": "{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "ApiResponse",
  "type": "object",
  "properties": {
    "code": {
      "type": "integer"
    },
    "message": {
      "type": "string"
    },
    "type": {
      "type": "string"
    }
  },
  "additionalProperties": true
}",
    "examples/restclients/petstore/options/schemas/create-users-with-list-input-request.schema.json": "{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "CreateUsersWithListInputRequest",
  "type": "array",
  "items": {
    "$ref": "#/$defs/User"
  },
  "$defs": {
    "User": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "id": {
          "type": "integer"
        },
        "lastName": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "phone": {
          "type": "string"
        },
        "username": {
          "type": "string"
        },
        "userStatus": {
          "type": "integer",
          "description": "User Status"
        }
      },
      "additionalProperties": true
    }
  }
}",
    "examples/restclients/petstore/options/schemas/find-pets-by-status-response.schema.json": "{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "FindPetsByStatusResponse",
  "type": "array",
  "items": {
    "$ref": "#/$defs/Pet"
  },
  "$defs": {
    "Pet": {
      "type": "object",
      "properties": {
        "category": {
          "$ref": "#/$defs/Category"
        },
        "id": {
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "photoUrls": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "status": {
          "description": "pet status in the store",
          "enum": [
            "available",
            "pending",
            "sold"
          ]
        },
        "tags": {
          "type": "array",
          "items": {
            "$ref": "#/$defs/Tag"
          }
        }
      },
      "required": [
        "name",
        "photoUrls"
      ],
      "additionalProperties": true
    },
    "Category": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer"
        },
        "name": {
          "type": "string"
        }
      },
      "additionalProperties": true
    },
    "Tag": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer"
        },
        "name": {
          "type": "string"
        }
      },
      "additionalProperties": true
    }
  }
}",
    "examples/restclients/petstore/options/schemas/find-pets-by-tags-response.schema.json": "{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "FindPetsByTagsResponse",
  "type": "array",
  "items": {
    "$ref": "#/$defs/Pet"
  },
  "$defs": {
    "Pet": {
      "type": "object",
      "properties": {
        "category": {
          "$ref": "#/$defs/Category"
        },
        "id": {
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "photoUrls": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "status": {
          "description": "pet status in the store",
          "enum": [
            "available",
            "pending",
            "sold"
          ]
        },
        "tags": {
          "type": "array",
          "items": {
            "$ref": "#/$defs/Tag"
          }
        }
      },
      "required": [
        "name",
        "photoUrls"
      ],
      "additionalProperties": true
    },
    "Category": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer"
        },
        "name": {
          "type": "string"
        }
      },
      "additionalProperties": true
    },
    "Tag": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer"
        },
        "name": {
          "type": "string"
        }
      },
      "additionalProperties": true
    }
  }
}",
    "examples/restclients/petstore/options/schemas/get-inventory-response.schema.json": "{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "GetInventoryResponse",
  "type": "object",
  "additionalProperties": {
    "type": "integer"
  }
}",
    "examples/restclients/petstore/options/schemas/login-user-response.schema.json": "{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "LoginUserResponse",
  "type": "string"
}",
    "examples/restclients/petstore/options/schemas/order.schema.json": "{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "Order",
  "type": "object",
  "properties": {
    "complete": {
      "type": "boolean"
    },
    "id": {
      "type": "integer"
    },
    "petId": {
      "type": "integer"
    },
    "quantity": {
      "type": "integer"
    },
    "shipDate": {
      "type": "string",
      "format": "date-time"
    },
    "status": {
      "description": "Order Status",
      "enum": [
        "placed",
        "approved",
        "delivered"
      ]
    }
  },
  "additionalProperties": true
}",
    "examples/restclients/petstore/options/schemas/pet.schema.json": "{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "Pet",
  "type": "object",
  "properties": {
    "category": {
      "$ref": "#/$defs/Category"
    },
    "id": {
      "type": "integer"
    },
    "name": {
      "type": "string"
    },
    "photoUrls": {
      "type": "array",
      "items": {
        "type": "string"
      }
    },
    "status": {
      "description": "pet status in the store",
      "enum": [
        "available",
        "pending",
        "sold"
      ]
    },
    "tags": {
      "type": "array",
      "items": {
        "$ref": "#/$defs/Tag"
      }
    }
  },
  "required": [
    "name",
    "photoUrls"
  ],
  "additionalProperties": true,
  "$defs": {
    "Category": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer"
        },
        "name": {
          "type": "string"
        }
      },
      "additionalProperties": true
    },
    "Tag": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer"
        },
        "name": {
          "type": "string"
        }
      },
      "additionalProperties": true
    }
  }
}",
    "examples/restclients/petstore/options/schemas/user.schema.json": "{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "User",
  "type": "object",
  "properties": {
    "email": {
      "type": "string"
    },
    "firstName": {
      "type": "string"
    },
    "id": {
      "type": "integer"
    },
    "lastName": {
      "type": "string"
    },
    "password": {
      "type": "string"
    },
    "phone": {
      "type": "string"
    },
    "username": {
      "type": "string"
    },
    "userStatus": {
      "type": "integer",
      "description": "User Status"
    }
  },
  "additionalProperties": true
}",
    "examples/restclients/petstore/petstore.client.ts": "/**
* Generated by @skyleague/therefore@v1.0.0-local
* Do not manually touch this
*/
/* eslint-disable */

import type { IncomingHttpHeaders } from 'node:http'

import type { DefinedError } from 'ajv'
import { got } from 'got'
import type { CancelableRequest, Got, Options, OptionsInit, Response } from 'got'

import { ApiResponse, CreateUsersWithListInputRequest, FindPetsByStatusResponse, FindPetsByTagsResponse, GetInventoryResponse, LoginUserResponse, Order, Pet, User } from './petstore.type.js'

/**
 * Swagger Petstore - OpenAPI 3.0
 * 
 * This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about
 * Swagger at [http://swagger.io](http://swagger.io). In the third iteration of the pet store, we've switched to the design first approach!
 * You can now help us improve the API whether it's by making changes to the definition itself or to the code.
 * That way, with time, we can improve the API in general, and expose some of the new features in OAS3.
 * 
 * Some useful links:
 * - [The Pet Store repository](https://github.com/swagger-api/swagger-petstore)
 * - [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)
 */
export class PetStore {
    public client: Got

    public auth: {
        petstoreAuth?: string | (() => Promise<string>),apiKey?: string | (() => Promise<string>)
    }

    public availableAuth: Set<string>
    public defaultAuth: string[][] | string[] | undefined

    public constructor(
    {
        prefixUrl,
        options,
        auth = {},
        defaultAuth,
    }: {
        prefixUrl: string | \`\${string}/api/v3\`,
        options?: Options | OptionsInit,
        auth: {
            petstoreAuth?: string | (() => Promise<string>),apiKey?: string | (() => Promise<string>)
        }
        defaultAuth?: string[][] | string[]
    }) {
        this.client = got.extend(...[{ prefixUrl, throwHttpErrors: false }, options].filter((o): o is Options => o !== undefined))
        this.auth = auth
        this.availableAuth = new Set(Object.keys(auth))
        this.defaultAuth = defaultAuth
    }


    /**
     * Add a new pet to the store
     */
    public addPet({body, auth = [['petstoreAuth']]}: {body: Pet, auth?: string[][] | string[]}): Promise<
    | SuccessResponse<'200', Pet>
    | FailureResponse<'405', unknown, 'response:statuscode'>
    | FailureResponse<undefined, unknown, 'request:body', undefined>
    | FailureResponse<StatusCode<2>, string, 'response:body', IncomingHttpHeaders>
    | FailureResponse<Exclude<StatusCode<1 | 3 | 4 | 5>, "405">, unknown, 'response:statuscode', IncomingHttpHeaders>
    >
    {
        const _body = this.validateRequestBody(Pet, body)
        if ('left' in _body) {
        return Promise.resolve(_body)
        }


        return this.awaitResponse(this.buildClient(auth).post('pet', {
            json: _body.right as Pet,responseType: 'json',
        }), {
            200: Pet,405: { parse: (x: unknown) => ({ right: x }) },
        }) as ReturnType<this["addPet"]>
    }

    /**
     * Create user
     * 
     * This can only be done by the logged in user.
     */
    public createUser({body}: {body: User}): Promise<
    | SuccessResponse<StatusCode<2>, User>
    | FailureResponse<undefined, unknown, 'request:body', undefined>
    | FailureResponse<StatusCode<2>, string, 'response:body', IncomingHttpHeaders>
    | FailureResponse<StatusCode<1 | 3 | 4 | 5>, string, 'response:statuscode', IncomingHttpHeaders>
    >
    {
        const _body = this.validateRequestBody(User, body)
        if ('left' in _body) {
        return Promise.resolve(_body)
        }


        return this.awaitResponse(this.client.post('user', {
            json: _body.right as User,responseType: 'json',
        }), {
            default: User,
        }) as ReturnType<this["createUser"]>
    }

    /**
     * Creates list of users with given input array
     */
    public createUsersWithListInput({body}: {body: CreateUsersWithListInputRequest}): Promise<
    | SuccessResponse<'200', User>
    | FailureResponse<undefined, unknown, 'request:body', undefined>
    | FailureResponse<StatusCode<2>, string, 'response:body', IncomingHttpHeaders>
    | FailureResponse<StatusCode<1 | 3 | 4 | 5>, string, 'response:statuscode', IncomingHttpHeaders>
    >
    {
        const _body = this.validateRequestBody(CreateUsersWithListInputRequest, body)
        if ('left' in _body) {
        return Promise.resolve(_body)
        }


        return this.awaitResponse(this.client.post('user/createWithList', {
            json: _body.right as CreateUsersWithListInputRequest,responseType: 'json',
        }), {
            200: User,
        }) as ReturnType<this["createUsersWithListInput"]>
    }

    /**
     * Delete purchase order by ID
     * 
     * For valid response try integer IDs with value < 1000. Anything above 1000 or nonintegers will generate API errors
     */
    public deleteOrder({path}: {path: { orderId: string }}): Promise<
    | FailureResponse<'400', unknown, 'response:statuscode'>
    | FailureResponse<'404', unknown, 'response:statuscode'>
    | FailureResponse<StatusCode<2>, string, 'response:body', IncomingHttpHeaders>
    | FailureResponse<Exclude<StatusCode<1 | 3 | 4 | 5>, "400" | "404">, unknown, 'response:statuscode', IncomingHttpHeaders>
    >
    {
        return this.awaitResponse(this.client.delete(\`store/order/\${path.orderId}\`, {
            responseType: 'text',
        }), {
            400: { parse: (x: unknown) => ({ right: x }) },404: { parse: (x: unknown) => ({ right: x }) },
        }) as ReturnType<this["deleteOrder"]>
    }

    /**
     * Deletes a pet
     */
    public deletePet({path, headers, auth = [['petstoreAuth']]}: {path: { petId: string }, headers?: { api_key?: string }, auth?: string[][] | string[]}): Promise<
    | FailureResponse<'400', unknown, 'response:statuscode'>
    | FailureResponse<StatusCode<2>, string, 'response:body', IncomingHttpHeaders>
    | FailureResponse<Exclude<StatusCode<1 | 3 | 4 | 5>, "400">, unknown, 'response:statuscode', IncomingHttpHeaders>
    >
    {
        return this.awaitResponse(this.buildClient(auth).delete(\`pet/\${path.petId}\`, {
            headers: headers ?? {},responseType: 'text',
        }), {
            400: { parse: (x: unknown) => ({ right: x }) },
        }) as ReturnType<this["deletePet"]>
    }

    /**
     * Delete user
     * 
     * This can only be done by the logged in user.
     */
    public deleteUser({path}: {path: { username: string }}): Promise<
    | FailureResponse<'400', unknown, 'response:statuscode'>
    | FailureResponse<'404', unknown, 'response:statuscode'>
    | FailureResponse<StatusCode<2>, string, 'response:body', IncomingHttpHeaders>
    | FailureResponse<Exclude<StatusCode<1 | 3 | 4 | 5>, "400" | "404">, unknown, 'response:statuscode', IncomingHttpHeaders>
    >
    {
        return this.awaitResponse(this.client.delete(\`user/\${path.username}\`, {
            responseType: 'text',
        }), {
            400: { parse: (x: unknown) => ({ right: x }) },404: { parse: (x: unknown) => ({ right: x }) },
        }) as ReturnType<this["deleteUser"]>
    }

    /**
     * Finds Pets by status
     * 
     * Multiple status values can be provided with comma separated strings
     */
    public findPetsByStatus({query, auth = [['petstoreAuth']]}: {query?: { status?: string }, auth?: string[][] | string[]} = {}): Promise<
    | SuccessResponse<'200', FindPetsByStatusResponse>
    | FailureResponse<'400', unknown, 'response:statuscode'>
    | FailureResponse<StatusCode<2>, string, 'response:body', IncomingHttpHeaders>
    | FailureResponse<Exclude<StatusCode<1 | 3 | 4 | 5>, "400">, unknown, 'response:statuscode', IncomingHttpHeaders>
    >
    {
        return this.awaitResponse(this.buildClient(auth).get('pet/findByStatus', {
            searchParams: query ?? {},responseType: 'json',
        }), {
            200: FindPetsByStatusResponse,400: { parse: (x: unknown) => ({ right: x }) },
        }) as ReturnType<this["findPetsByStatus"]>
    }

    /**
     * Finds Pets by tags
     * 
     * Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
     */
    public findPetsByTags({query, auth = [['petstoreAuth']]}: {query?: { tags?: string }, auth?: string[][] | string[]} = {}): Promise<
    | SuccessResponse<'200', FindPetsByTagsResponse>
    | FailureResponse<'400', unknown, 'response:statuscode'>
    | FailureResponse<StatusCode<2>, string, 'response:body', IncomingHttpHeaders>
    | FailureResponse<Exclude<StatusCode<1 | 3 | 4 | 5>, "400">, unknown, 'response:statuscode', IncomingHttpHeaders>
    >
    {
        return this.awaitResponse(this.buildClient(auth).get('pet/findByTags', {
            searchParams: query ?? {},responseType: 'json',
        }), {
            200: FindPetsByTagsResponse,400: { parse: (x: unknown) => ({ right: x }) },
        }) as ReturnType<this["findPetsByTags"]>
    }

    /**
     * Returns pet inventories by status
     * 
     * Returns a map of status codes to quantities
     */
    public getInventory({auth = [['apiKey']]}: {auth?: string[][] | string[]} = {}): Promise<
    | SuccessResponse<'200', GetInventoryResponse>
    | FailureResponse<StatusCode<2>, string, 'response:body', IncomingHttpHeaders>
    | FailureResponse<StatusCode<1 | 3 | 4 | 5>, string, 'response:statuscode', IncomingHttpHeaders>
    >
    {
        return this.awaitResponse(this.buildClient(auth).get('store/inventory', {
            responseType: 'json',
        }), {
            200: GetInventoryResponse,
        }) as ReturnType<this["getInventory"]>
    }

    /**
     * Find purchase order by ID
     * 
     * For valid response try integer IDs with value <= 5 or > 10. Other values will generate exceptions.
     */
    public getOrderById({path}: {path: { orderId: string }}): Promise<
    | SuccessResponse<'200', Order>
    | FailureResponse<'400', unknown, 'response:statuscode'>
    | FailureResponse<'404', unknown, 'response:statuscode'>
    | FailureResponse<StatusCode<2>, string, 'response:body', IncomingHttpHeaders>
    | FailureResponse<Exclude<StatusCode<1 | 3 | 4 | 5>, "400" | "404">, unknown, 'response:statuscode', IncomingHttpHeaders>
    >
    {
        return this.awaitResponse(this.client.get(\`store/order/\${path.orderId}\`, {
            responseType: 'json',
        }), {
            200: Order,400: { parse: (x: unknown) => ({ right: x }) },404: { parse: (x: unknown) => ({ right: x }) },
        }) as ReturnType<this["getOrderById"]>
    }

    /**
     * Find pet by ID
     * 
     * Returns a single pet
     */
    public getPetById({path, auth = [['apiKey'], ['petstoreAuth']]}: {path: { petId: string }, auth?: string[][] | string[]}): Promise<
    | SuccessResponse<'200', Pet>
    | FailureResponse<'400', unknown, 'response:statuscode'>
    | FailureResponse<'404', unknown, 'response:statuscode'>
    | FailureResponse<StatusCode<2>, string, 'response:body', IncomingHttpHeaders>
    | FailureResponse<Exclude<StatusCode<1 | 3 | 4 | 5>, "400" | "404">, unknown, 'response:statuscode', IncomingHttpHeaders>
    >
    {
        return this.awaitResponse(this.buildClient(auth).get(\`pet/\${path.petId}\`, {
            responseType: 'json',
        }), {
            200: Pet,400: { parse: (x: unknown) => ({ right: x }) },404: { parse: (x: unknown) => ({ right: x }) },
        }) as ReturnType<this["getPetById"]>
    }

    /**
     * Get user by user name
     */
    public getUserByName({path}: {path: { username: string }}): Promise<
    | SuccessResponse<'200', User>
    | FailureResponse<'400', unknown, 'response:statuscode'>
    | FailureResponse<'404', unknown, 'response:statuscode'>
    | FailureResponse<StatusCode<2>, string, 'response:body', IncomingHttpHeaders>
    | FailureResponse<Exclude<StatusCode<1 | 3 | 4 | 5>, "400" | "404">, unknown, 'response:statuscode', IncomingHttpHeaders>
    >
    {
        return this.awaitResponse(this.client.get(\`user/\${path.username}\`, {
            responseType: 'json',
        }), {
            200: User,400: { parse: (x: unknown) => ({ right: x }) },404: { parse: (x: unknown) => ({ right: x }) },
        }) as ReturnType<this["getUserByName"]>
    }

    /**
     * Logs user into the system
     */
    public loginUser({query}: {query?: { username?: string, password?: string }} = {}): Promise<
    | SuccessResponse<'200', LoginUserResponse>
    | FailureResponse<'400', unknown, 'response:statuscode'>
    | FailureResponse<StatusCode<2>, string, 'response:body', IncomingHttpHeaders>
    | FailureResponse<Exclude<StatusCode<1 | 3 | 4 | 5>, "400">, unknown, 'response:statuscode', IncomingHttpHeaders>
    >
    {
        return this.awaitResponse(this.client.get('user/login', {
            searchParams: query ?? {},responseType: 'json',
        }), {
            200: LoginUserResponse,400: { parse: (x: unknown) => ({ right: x }) },
        }) as ReturnType<this["loginUser"]>
    }

    /**
     * Logs out current logged in user session
     */
    public logoutUser(): Promise<
    | FailureResponse<StatusCode<2>, string, 'response:body', IncomingHttpHeaders>
    | FailureResponse<StatusCode<1 | 3 | 4 | 5>, string, 'response:statuscode', IncomingHttpHeaders>
    >
    {
        return this.awaitResponse(this.client.get('user/logout', {
            responseType: 'text',
        }), {
        }) as ReturnType<this["logoutUser"]>
    }

    /**
     * Place an order for a pet
     * 
     * Place a new order in the store
     */
    public placeOrder({body}: {body: Order}): Promise<
    | SuccessResponse<'200', Order>
    | FailureResponse<'405', unknown, 'response:statuscode'>
    | FailureResponse<undefined, unknown, 'request:body', undefined>
    | FailureResponse<StatusCode<2>, string, 'response:body', IncomingHttpHeaders>
    | FailureResponse<Exclude<StatusCode<1 | 3 | 4 | 5>, "405">, unknown, 'response:statuscode', IncomingHttpHeaders>
    >
    {
        const _body = this.validateRequestBody(Order, body)
        if ('left' in _body) {
        return Promise.resolve(_body)
        }


        return this.awaitResponse(this.client.post('store/order', {
            json: _body.right as Order,responseType: 'json',
        }), {
            200: Order,405: { parse: (x: unknown) => ({ right: x }) },
        }) as ReturnType<this["placeOrder"]>
    }

    /**
     * Update an existing pet
     * 
     * Update an existing pet by Id
     */
    public updatePet({body, auth = [['petstoreAuth']]}: {body: Pet, auth?: string[][] | string[]}): Promise<
    | SuccessResponse<'200', Pet>
    | FailureResponse<'400', unknown, 'response:statuscode'>
    | FailureResponse<'404', unknown, 'response:statuscode'>
    | FailureResponse<'405', unknown, 'response:statuscode'>
    | FailureResponse<undefined, unknown, 'request:body', undefined>
    | FailureResponse<StatusCode<2>, string, 'response:body', IncomingHttpHeaders>
    | FailureResponse<Exclude<StatusCode<1 | 3 | 4 | 5>, "400" | "404" | "405">, unknown, 'response:statuscode', IncomingHttpHeaders>
    >
    {
        const _body = this.validateRequestBody(Pet, body)
        if ('left' in _body) {
        return Promise.resolve(_body)
        }


        return this.awaitResponse(this.buildClient(auth).put('pet', {
            json: _body.right as Pet,responseType: 'json',
        }), {
            200: Pet,400: { parse: (x: unknown) => ({ right: x }) },404: { parse: (x: unknown) => ({ right: x }) },405: { parse: (x: unknown) => ({ right: x }) },
        }) as ReturnType<this["updatePet"]>
    }

    /**
     * Updates a pet in the store with form data
     */
    public updatePetWithForm({path, query, auth = [['petstoreAuth']]}: {path: { petId: string }, query?: { name?: string, status?: string }, auth?: string[][] | string[]}): Promise<
    | FailureResponse<'405', unknown, 'response:statuscode'>
    | FailureResponse<StatusCode<2>, string, 'response:body', IncomingHttpHeaders>
    | FailureResponse<Exclude<StatusCode<1 | 3 | 4 | 5>, "405">, unknown, 'response:statuscode', IncomingHttpHeaders>
    >
    {
        return this.awaitResponse(this.buildClient(auth).post(\`pet/\${path.petId}\`, {
            searchParams: query ?? {},responseType: 'text',
        }), {
            405: { parse: (x: unknown) => ({ right: x }) },
        }) as ReturnType<this["updatePetWithForm"]>
    }

    /**
     * Update user
     * 
     * This can only be done by the logged in user.
     */
    public updateUser({body, path}: {body: User, path: { username: string }}): Promise<
    | FailureResponse<undefined, unknown, 'request:body', undefined>
    | FailureResponse<StatusCode<2>, string, 'response:body', IncomingHttpHeaders>
    | FailureResponse<StatusCode<1 | 3 | 4 | 5>, string, 'response:statuscode', IncomingHttpHeaders>
    >
    {
        const _body = this.validateRequestBody(User, body)
        if ('left' in _body) {
        return Promise.resolve(_body)
        }


        return this.awaitResponse(this.client.put(\`user/\${path.username}\`, {
            json: _body.right as User,responseType: 'text',
        }), {
        }) as ReturnType<this["updateUser"]>
    }

    /**
     * uploads an image
     */
    public uploadFile({body, path, query, auth = [['petstoreAuth']]}: {body: string | Buffer, path: { petId: string }, query?: { additionalMetadata?: string }, auth?: string[][] | string[]}): Promise<
    | SuccessResponse<'200', ApiResponse>
    | FailureResponse<StatusCode<2>, string, 'response:body', IncomingHttpHeaders>
    | FailureResponse<StatusCode<1 | 3 | 4 | 5>, string, 'response:statuscode', IncomingHttpHeaders>
    >
    {
        return this.awaitResponse(this.buildClient(auth).post(\`pet/\${path.petId}/uploadImage\`, {
            body: body,searchParams: query ?? {},responseType: 'json',
        }), {
            200: ApiResponse,
        }) as ReturnType<this["uploadFile"]>
    }

    public validateRequestBody<Parser extends { parse: (o: unknown) => { left: DefinedError[] } | { right: Body } }, Body>(
    parser: Parser, body: unknown )
    {
        const _body = parser.parse(body)
        if ('left' in _body)
        {
            return {statusCode: undefined, status: undefined, headers: undefined, left: body, validationErrors: _body.left, where: 'request:body' } satisfies FailureResponse<undefined, unknown, 'request:body', undefined>
        }
        return _body
    }

    public async awaitResponse<I, S extends Record<PropertyKey, { parse: (o: I) => { left: DefinedError[] } | { right: unknown } } | undefined>>(response: CancelableRequest<Response<I>>, schemas: S)
    {
        const result = await response
        const status = result.statusCode < 200 ? 'informational' : result.statusCode < 300 ? 'success' : result.statusCode < 400 ? 'redirection' : result.statusCode < 500 ? 'client-error' : 'server-error'
        const validator = schemas[result.statusCode] ?? schemas.default
        const body = validator?.parse?.(result.body)
         if (result.statusCode < 200 || result.statusCode >= 300) 
        {
            return {statusCode: result.statusCode.toString(), status, headers: result.headers, left: body !== undefined && 'right' in body ? body.right : result.body, validationErrors: body !== undefined && 'left' in body ? body.left : undefined, where: 'response:statuscode' } 
        }
        if (body === undefined || 'left' in body)
        {
            return {statusCode: result.statusCode.toString(), status, headers: result.headers, left: result.body, validationErrors: body?.left, where: 'response:body' }
        }
        return {statusCode: result.statusCode.toString(), status, headers: result.headers, right: result.body }
    }

    protected buildPetstoreAuthClient(client: Got)
    {
        return client
    }


    protected buildApiKeyClient(client: Got)
    {
        return client.extend({
        hooks: {
        beforeRequest: [
        async (options) => 
        {
            const apiKey = this.auth.apiKey
            const key = typeof apiKey === 'function' ? await apiKey() : apiKey
            options.headers.api_key = key
        }
        ],},})
    }

    protected buildClient(auths: string[][] | string[] | undefined = this.defaultAuth, client?: Got): Got
    {
        const auth = (auths ?? [...this.availableAuth]).map(auth => Array.isArray(auth) ? auth : [auth]).filter((auth) => auth.every((a) => this.availableAuth.has(a)))
        let chosenClient = client ?? this.client
        for (const chosen of auth[0] ?? [])
        {
            if (chosen === 'petstoreAuth')
            {
                chosenClient = this.buildPetstoreAuthClient(chosenClient)
            }
            else
            if (chosen === 'apiKey')
            {
                chosenClient = this.buildApiKeyClient(chosenClient)
            }
        }
        return chosenClient
    }
}

export type Status<Major> = Major extends string ? Major extends \`1\${number}\`? 'informational': Major extends \`2\${number}\` ? 'success' : Major extends \`3\${number}\` ? 'redirection' : Major extends \`4\${number}\` ? 'client-error' : 'server-error' : undefined
export interface SuccessResponse<StatusCode extends string, T> { statusCode: StatusCode; status: Status<StatusCode>; headers: IncomingHttpHeaders; right: T }
export interface FailureResponse<StatusCode = string, T = unknown, Where = never, Headers = IncomingHttpHeaders> {
                    statusCode: StatusCode
                    status: Status<StatusCode>
                    headers: Headers
                    validationErrors: DefinedError[] | undefined
                    left: T
                    where: Where
                }
export type StatusCode<Major extends number = 1 | 2 | 3 | 4 | 5> = \`\${Major}\${number}\`



",
    "examples/restclients/petstore/petstore.type.ts": "/**
* Generated by @skyleague/therefore@v1.0.0-local
* Do not manually touch this
*/
/* eslint-disable */

import type { DefinedError, ValidateFunction } from 'ajv'

import { validate as ApiResponseValidator } from './schemas/api-response.schema.js'
import { validate as CreateUsersWithListInputRequestValidator } from './schemas/create-users-with-list-input-request.schema.js'
import { validate as FindPetsByStatusResponseValidator } from './schemas/find-pets-by-status-response.schema.js'
import { validate as FindPetsByTagsResponseValidator } from './schemas/find-pets-by-tags-response.schema.js'
import { validate as GetInventoryResponseValidator } from './schemas/get-inventory-response.schema.js'
import { validate as LoginUserResponseValidator } from './schemas/login-user-response.schema.js'
import { validate as OrderValidator } from './schemas/order.schema.js'
import { validate as PetValidator } from './schemas/pet.schema.js'
import { validate as UserValidator } from './schemas/user.schema.js'

export interface ApiResponse {
    code?: (number | undefined)
    message?: (string | undefined)
    type?: (string | undefined)
}

export const ApiResponse = {
    validate: ApiResponseValidator as ValidateFunction<ApiResponse>,
    get schema() { return ApiResponse.validate.schema},
    get errors() { return ApiResponse.validate.errors ?? undefined },
    is: (o: unknown): o is ApiResponse => ApiResponse.validate(o) === true,
    parse: (o: unknown): { right: ApiResponse } | { left: DefinedError[] } => 
    {
        if(ApiResponse.is(o)) {
            return { right: o }
        }
        return { left: (ApiResponse.errors ?? []) as DefinedError[] }
    },
} as const


export interface Category {
    id?: (number | undefined)
    name?: (string | undefined)
}

export type CreateUsersWithListInputRequest = (User)[]

export const CreateUsersWithListInputRequest = {
    validate: CreateUsersWithListInputRequestValidator as ValidateFunction<CreateUsersWithListInputRequest>,
    get schema() { return CreateUsersWithListInputRequest.validate.schema},
    get errors() { return CreateUsersWithListInputRequest.validate.errors ?? undefined },
    is: (o: unknown): o is CreateUsersWithListInputRequest => CreateUsersWithListInputRequest.validate(o) === true,
    parse: (o: unknown): { right: CreateUsersWithListInputRequest } | { left: DefinedError[] } => 
    {
        if(CreateUsersWithListInputRequest.is(o)) {
            return { right: o }
        }
        return { left: (CreateUsersWithListInputRequest.errors ?? []) as DefinedError[] }
    },
} as const


export type FindPetsByStatusResponse = (Pet)[]

export const FindPetsByStatusResponse = {
    validate: FindPetsByStatusResponseValidator as ValidateFunction<FindPetsByStatusResponse>,
    get schema() { return FindPetsByStatusResponse.validate.schema},
    get errors() { return FindPetsByStatusResponse.validate.errors ?? undefined },
    is: (o: unknown): o is FindPetsByStatusResponse => FindPetsByStatusResponse.validate(o) === true,
    parse: (o: unknown): { right: FindPetsByStatusResponse } | { left: DefinedError[] } => 
    {
        if(FindPetsByStatusResponse.is(o)) {
            return { right: o }
        }
        return { left: (FindPetsByStatusResponse.errors ?? []) as DefinedError[] }
    },
} as const


export type FindPetsByTagsResponse = (Pet)[]

export const FindPetsByTagsResponse = {
    validate: FindPetsByTagsResponseValidator as ValidateFunction<FindPetsByTagsResponse>,
    get schema() { return FindPetsByTagsResponse.validate.schema},
    get errors() { return FindPetsByTagsResponse.validate.errors ?? undefined },
    is: (o: unknown): o is FindPetsByTagsResponse => FindPetsByTagsResponse.validate(o) === true,
    parse: (o: unknown): { right: FindPetsByTagsResponse } | { left: DefinedError[] } => 
    {
        if(FindPetsByTagsResponse.is(o)) {
            return { right: o }
        }
        return { left: (FindPetsByTagsResponse.errors ?? []) as DefinedError[] }
    },
} as const


export interface GetInventoryResponse {
    [k: string]: (number | undefined)
}

export const GetInventoryResponse = {
    validate: GetInventoryResponseValidator as ValidateFunction<GetInventoryResponse>,
    get schema() { return GetInventoryResponse.validate.schema},
    get errors() { return GetInventoryResponse.validate.errors ?? undefined },
    is: (o: unknown): o is GetInventoryResponse => GetInventoryResponse.validate(o) === true,
    parse: (o: unknown): { right: GetInventoryResponse } | { left: DefinedError[] } => 
    {
        if(GetInventoryResponse.is(o)) {
            return { right: o }
        }
        return { left: (GetInventoryResponse.errors ?? []) as DefinedError[] }
    },
} as const


export type LoginUserResponse = string

export const LoginUserResponse = {
    validate: LoginUserResponseValidator as ValidateFunction<LoginUserResponse>,
    get schema() { return LoginUserResponse.validate.schema},
    get errors() { return LoginUserResponse.validate.errors ?? undefined },
    is: (o: unknown): o is LoginUserResponse => LoginUserResponse.validate(o) === true,
    parse: (o: unknown): { right: LoginUserResponse } | { left: DefinedError[] } => 
    {
        if(LoginUserResponse.is(o)) {
            return { right: o }
        }
        return { left: (LoginUserResponse.errors ?? []) as DefinedError[] }
    },
} as const


export interface Order {
    complete?: (boolean | undefined)
    id?: (number | undefined)
    petId?: (number | undefined)
    quantity?: (number | undefined)
    shipDate?: (string | undefined)
    /**
     * Order Status
     */
    status?: ('placed' | 'approved' | 'delivered' | undefined)
}

export const Order = {
    validate: OrderValidator as ValidateFunction<Order>,
    get schema() { return Order.validate.schema},
    get errors() { return Order.validate.errors ?? undefined },
    is: (o: unknown): o is Order => Order.validate(o) === true,
    parse: (o: unknown): { right: Order } | { left: DefinedError[] } => 
    {
        if(Order.is(o)) {
            return { right: o }
        }
        return { left: (Order.errors ?? []) as DefinedError[] }
    },
} as const


export interface Pet {
    category?: (Category | undefined)
    id?: (number | undefined)
    name: string
    photoUrls: (string)[]
    /**
     * pet status in the store
     */
    status?: ('available' | 'pending' | 'sold' | undefined)
    tags?: ((Tag)[] | undefined)
}

export const Pet = {
    validate: PetValidator as ValidateFunction<Pet>,
    get schema() { return Pet.validate.schema},
    get errors() { return Pet.validate.errors ?? undefined },
    is: (o: unknown): o is Pet => Pet.validate(o) === true,
    parse: (o: unknown): { right: Pet } | { left: DefinedError[] } => 
    {
        if(Pet.is(o)) {
            return { right: o }
        }
        return { left: (Pet.errors ?? []) as DefinedError[] }
    },
} as const


export interface Tag {
    id?: (number | undefined)
    name?: (string | undefined)
}

export interface User {
    email?: (string | undefined)
    firstName?: (string | undefined)
    id?: (number | undefined)
    lastName?: (string | undefined)
    password?: (string | undefined)
    phone?: (string | undefined)
    username?: (string | undefined)
    /**
     * User Status
     */
    userStatus?: (number | undefined)
}

export const User = {
    validate: UserValidator as ValidateFunction<User>,
    get schema() { return User.validate.schema},
    get errors() { return User.validate.errors ?? undefined },
    is: (o: unknown): o is User => User.validate(o) === true,
    parse: (o: unknown): { right: User } | { left: DefinedError[] } => 
    {
        if(User.is(o)) {
            return { right: o }
        }
        return { left: (User.errors ?? []) as DefinedError[] }
    },
} as const


",
    "examples/restclients/petstore/schemas/api-response.schema.js": "/* eslint-disable */
// @ts-nocheck
/**
 * Generated by Ajv https://ajv.js.org/guide/managing-schemas.html#standalone-validation-code
 */
"use strict";
/** @type {unknown} */
export const validate = validate10;export default validate10;const schema11 = {"$schema":"http://json-schema.org/draft-07/schema#","title":"ApiResponse","type":"object","properties":{"code":{"type":"integer"},"message":{"type":"string"},"type":{"type":"string"}},"additionalProperties":true};function validate10(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){let vErrors = null;let errors = 0;if(errors === 0){if(data && typeof data == "object" && !Array.isArray(data)){if(data.code !== undefined){let data0 = data.code;const _errs2 = errors;if(!(((typeof data0 == "number") && (!(data0 % 1) && !isNaN(data0))) && (isFinite(data0)))){validate10.errors = [{instancePath:instancePath+"/code",schemaPath:"#/properties/code/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];return false;}var valid0 = _errs2 === errors;}else {var valid0 = true;}if(valid0){if(data.message !== undefined){const _errs4 = errors;if(typeof data.message !== "string"){validate10.errors = [{instancePath:instancePath+"/message",schemaPath:"#/properties/message/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid0 = _errs4 === errors;}else {var valid0 = true;}if(valid0){if(data.type !== undefined){const _errs6 = errors;if(typeof data.type !== "string"){validate10.errors = [{instancePath:instancePath+"/type",schemaPath:"#/properties/type/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid0 = _errs6 === errors;}else {var valid0 = true;}}}}else {validate10.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}validate10.errors = vErrors;return errors === 0;};validate.schema=schema11;",
    "examples/restclients/petstore/schemas/create-users-with-list-input-request.schema.js": "/* eslint-disable */
// @ts-nocheck
/**
 * Generated by Ajv https://ajv.js.org/guide/managing-schemas.html#standalone-validation-code
 */
"use strict";
/** @type {unknown} */
export const validate = validate10;export default validate10;const schema11 = {"$schema":"http://json-schema.org/draft-07/schema#","title":"CreateUsersWithListInputRequest","type":"array","items":{"$ref":"#/$defs/User"},"$defs":{"User":{"type":"object","properties":{"email":{"type":"string"},"firstName":{"type":"string"},"id":{"type":"integer"},"lastName":{"type":"string"},"password":{"type":"string"},"phone":{"type":"string"},"username":{"type":"string"},"userStatus":{"type":"integer","description":"User Status"}},"additionalProperties":true}}};const schema12 = {"type":"object","properties":{"email":{"type":"string"},"firstName":{"type":"string"},"id":{"type":"integer"},"lastName":{"type":"string"},"password":{"type":"string"},"phone":{"type":"string"},"username":{"type":"string"},"userStatus":{"type":"integer","description":"User Status"}},"additionalProperties":true};function validate10(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){let vErrors = null;let errors = 0;if(errors === 0){if(Array.isArray(data)){var valid0 = true;const len0 = data.length;for(let i0=0; i0<len0; i0++){let data0 = data[i0];const _errs1 = errors;const _errs2 = errors;if(errors === _errs2){if(data0 && typeof data0 == "object" && !Array.isArray(data0)){if(data0.email !== undefined){const _errs5 = errors;if(typeof data0.email !== "string"){validate10.errors = [{instancePath:instancePath+"/" + i0+"/email",schemaPath:"#/$defs/User/properties/email/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid2 = _errs5 === errors;}else {var valid2 = true;}if(valid2){if(data0.firstName !== undefined){const _errs7 = errors;if(typeof data0.firstName !== "string"){validate10.errors = [{instancePath:instancePath+"/" + i0+"/firstName",schemaPath:"#/$defs/User/properties/firstName/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid2 = _errs7 === errors;}else {var valid2 = true;}if(valid2){if(data0.id !== undefined){let data3 = data0.id;const _errs9 = errors;if(!(((typeof data3 == "number") && (!(data3 % 1) && !isNaN(data3))) && (isFinite(data3)))){validate10.errors = [{instancePath:instancePath+"/" + i0+"/id",schemaPath:"#/$defs/User/properties/id/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];return false;}var valid2 = _errs9 === errors;}else {var valid2 = true;}if(valid2){if(data0.lastName !== undefined){const _errs11 = errors;if(typeof data0.lastName !== "string"){validate10.errors = [{instancePath:instancePath+"/" + i0+"/lastName",schemaPath:"#/$defs/User/properties/lastName/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid2 = _errs11 === errors;}else {var valid2 = true;}if(valid2){if(data0.password !== undefined){const _errs13 = errors;if(typeof data0.password !== "string"){validate10.errors = [{instancePath:instancePath+"/" + i0+"/password",schemaPath:"#/$defs/User/properties/password/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid2 = _errs13 === errors;}else {var valid2 = true;}if(valid2){if(data0.phone !== undefined){const _errs15 = errors;if(typeof data0.phone !== "string"){validate10.errors = [{instancePath:instancePath+"/" + i0+"/phone",schemaPath:"#/$defs/User/properties/phone/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid2 = _errs15 === errors;}else {var valid2 = true;}if(valid2){if(data0.username !== undefined){const _errs17 = errors;if(typeof data0.username !== "string"){validate10.errors = [{instancePath:instancePath+"/" + i0+"/username",schemaPath:"#/$defs/User/properties/username/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid2 = _errs17 === errors;}else {var valid2 = true;}if(valid2){if(data0.userStatus !== undefined){let data8 = data0.userStatus;const _errs19 = errors;if(!(((typeof data8 == "number") && (!(data8 % 1) && !isNaN(data8))) && (isFinite(data8)))){validate10.errors = [{instancePath:instancePath+"/" + i0+"/userStatus",schemaPath:"#/$defs/User/properties/userStatus/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];return false;}var valid2 = _errs19 === errors;}else {var valid2 = true;}}}}}}}}}else {validate10.errors = [{instancePath:instancePath+"/" + i0,schemaPath:"#/$defs/User/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}var valid0 = _errs1 === errors;if(!valid0){break;}}}else {validate10.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "array"},message:"must be array"}];return false;}}validate10.errors = vErrors;return errors === 0;};validate.schema=schema11;",
    "examples/restclients/petstore/schemas/find-pets-by-status-response.schema.js": "/* eslint-disable */
// @ts-nocheck
/**
 * Generated by Ajv https://ajv.js.org/guide/managing-schemas.html#standalone-validation-code
 */
"use strict";
/** @type {unknown} */
export const validate = validate10;export default validate10;const schema11 = {"$schema":"http://json-schema.org/draft-07/schema#","title":"FindPetsByStatusResponse","type":"array","items":{"$ref":"#/$defs/Pet"},"$defs":{"Pet":{"type":"object","properties":{"category":{"$ref":"#/$defs/Category"},"id":{"type":"integer"},"name":{"type":"string"},"photoUrls":{"type":"array","items":{"type":"string"}},"status":{"description":"pet status in the store","enum":["available","pending","sold"]},"tags":{"type":"array","items":{"$ref":"#/$defs/Tag"}}},"required":["name","photoUrls"],"additionalProperties":true},"Category":{"type":"object","properties":{"id":{"type":"integer"},"name":{"type":"string"}},"additionalProperties":true},"Tag":{"type":"object","properties":{"id":{"type":"integer"},"name":{"type":"string"}},"additionalProperties":true}}};const schema12 = {"type":"object","properties":{"category":{"$ref":"#/$defs/Category"},"id":{"type":"integer"},"name":{"type":"string"},"photoUrls":{"type":"array","items":{"type":"string"}},"status":{"description":"pet status in the store","enum":["available","pending","sold"]},"tags":{"type":"array","items":{"$ref":"#/$defs/Tag"}}},"required":["name","photoUrls"],"additionalProperties":true};const schema13 = {"type":"object","properties":{"id":{"type":"integer"},"name":{"type":"string"}},"additionalProperties":true};const schema14 = {"type":"object","properties":{"id":{"type":"integer"},"name":{"type":"string"}},"additionalProperties":true};function validate11(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){let vErrors = null;let errors = 0;if(errors === 0){if(data && typeof data == "object" && !Array.isArray(data)){let missing0;if(((data.name === undefined) && (missing0 = "name")) || ((data.photoUrls === undefined) && (missing0 = "photoUrls"))){validate11.errors = [{instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];return false;}else {if(data.category !== undefined){let data0 = data.category;const _errs2 = errors;const _errs3 = errors;if(errors === _errs3){if(data0 && typeof data0 == "object" && !Array.isArray(data0)){if(data0.id !== undefined){let data1 = data0.id;const _errs6 = errors;if(!(((typeof data1 == "number") && (!(data1 % 1) && !isNaN(data1))) && (isFinite(data1)))){validate11.errors = [{instancePath:instancePath+"/category/id",schemaPath:"#/$defs/Category/properties/id/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];return false;}var valid2 = _errs6 === errors;}else {var valid2 = true;}if(valid2){if(data0.name !== undefined){const _errs8 = errors;if(typeof data0.name !== "string"){validate11.errors = [{instancePath:instancePath+"/category/name",schemaPath:"#/$defs/Category/properties/name/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid2 = _errs8 === errors;}else {var valid2 = true;}}}else {validate11.errors = [{instancePath:instancePath+"/category",schemaPath:"#/$defs/Category/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}var valid0 = _errs2 === errors;}else {var valid0 = true;}if(valid0){if(data.id !== undefined){let data3 = data.id;const _errs10 = errors;if(!(((typeof data3 == "number") && (!(data3 % 1) && !isNaN(data3))) && (isFinite(data3)))){validate11.errors = [{instancePath:instancePath+"/id",schemaPath:"#/properties/id/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];return false;}var valid0 = _errs10 === errors;}else {var valid0 = true;}if(valid0){if(data.name !== undefined){const _errs12 = errors;if(typeof data.name !== "string"){validate11.errors = [{instancePath:instancePath+"/name",schemaPath:"#/properties/name/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid0 = _errs12 === errors;}else {var valid0 = true;}if(valid0){if(data.photoUrls !== undefined){let data5 = data.photoUrls;const _errs14 = errors;if(errors === _errs14){if(Array.isArray(data5)){var valid3 = true;const len0 = data5.length;for(let i0=0; i0<len0; i0++){const _errs16 = errors;if(typeof data5[i0] !== "string"){validate11.errors = [{instancePath:instancePath+"/photoUrls/" + i0,schemaPath:"#/properties/photoUrls/items/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid3 = _errs16 === errors;if(!valid3){break;}}}else {validate11.errors = [{instancePath:instancePath+"/photoUrls",schemaPath:"#/properties/photoUrls/type",keyword:"type",params:{type: "array"},message:"must be array"}];return false;}}var valid0 = _errs14 === errors;}else {var valid0 = true;}if(valid0){if(data.status !== undefined){let data7 = data.status;const _errs18 = errors;if(!(((data7 === "available") || (data7 === "pending")) || (data7 === "sold"))){validate11.errors = [{instancePath:instancePath+"/status",schemaPath:"#/properties/status/enum",keyword:"enum",params:{allowedValues: schema12.properties.status.enum},message:"must be equal to one of the allowed values"}];return false;}var valid0 = _errs18 === errors;}else {var valid0 = true;}if(valid0){if(data.tags !== undefined){let data8 = data.tags;const _errs19 = errors;if(errors === _errs19){if(Array.isArray(data8)){var valid4 = true;const len1 = data8.length;for(let i1=0; i1<len1; i1++){let data9 = data8[i1];const _errs21 = errors;const _errs22 = errors;if(errors === _errs22){if(data9 && typeof data9 == "object" && !Array.isArray(data9)){if(data9.id !== undefined){let data10 = data9.id;const _errs25 = errors;if(!(((typeof data10 == "number") && (!(data10 % 1) && !isNaN(data10))) && (isFinite(data10)))){validate11.errors = [{instancePath:instancePath+"/tags/" + i1+"/id",schemaPath:"#/$defs/Tag/properties/id/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];return false;}var valid6 = _errs25 === errors;}else {var valid6 = true;}if(valid6){if(data9.name !== undefined){const _errs27 = errors;if(typeof data9.name !== "string"){validate11.errors = [{instancePath:instancePath+"/tags/" + i1+"/name",schemaPath:"#/$defs/Tag/properties/name/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid6 = _errs27 === errors;}else {var valid6 = true;}}}else {validate11.errors = [{instancePath:instancePath+"/tags/" + i1,schemaPath:"#/$defs/Tag/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}var valid4 = _errs21 === errors;if(!valid4){break;}}}else {validate11.errors = [{instancePath:instancePath+"/tags",schemaPath:"#/properties/tags/type",keyword:"type",params:{type: "array"},message:"must be array"}];return false;}}var valid0 = _errs19 === errors;}else {var valid0 = true;}}}}}}}}else {validate11.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}validate11.errors = vErrors;return errors === 0;}function validate10(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){let vErrors = null;let errors = 0;if(errors === 0){if(Array.isArray(data)){var valid0 = true;const len0 = data.length;for(let i0=0; i0<len0; i0++){const _errs1 = errors;if(!(validate11(data[i0], {instancePath:instancePath+"/" + i0,parentData:data,parentDataProperty:i0,rootData}))){vErrors = vErrors === null ? validate11.errors : vErrors.concat(validate11.errors);errors = vErrors.length;}var valid0 = _errs1 === errors;if(!valid0){break;}}}else {validate10.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "array"},message:"must be array"}];return false;}}validate10.errors = vErrors;return errors === 0;};validate.schema=schema11;",
    "examples/restclients/petstore/schemas/find-pets-by-tags-response.schema.js": "/* eslint-disable */
// @ts-nocheck
/**
 * Generated by Ajv https://ajv.js.org/guide/managing-schemas.html#standalone-validation-code
 */
"use strict";
/** @type {unknown} */
export const validate = validate10;export default validate10;const schema11 = {"$schema":"http://json-schema.org/draft-07/schema#","title":"FindPetsByTagsResponse","type":"array","items":{"$ref":"#/$defs/Pet"},"$defs":{"Pet":{"type":"object","properties":{"category":{"$ref":"#/$defs/Category"},"id":{"type":"integer"},"name":{"type":"string"},"photoUrls":{"type":"array","items":{"type":"string"}},"status":{"description":"pet status in the store","enum":["available","pending","sold"]},"tags":{"type":"array","items":{"$ref":"#/$defs/Tag"}}},"required":["name","photoUrls"],"additionalProperties":true},"Category":{"type":"object","properties":{"id":{"type":"integer"},"name":{"type":"string"}},"additionalProperties":true},"Tag":{"type":"object","properties":{"id":{"type":"integer"},"name":{"type":"string"}},"additionalProperties":true}}};const schema12 = {"type":"object","properties":{"category":{"$ref":"#/$defs/Category"},"id":{"type":"integer"},"name":{"type":"string"},"photoUrls":{"type":"array","items":{"type":"string"}},"status":{"description":"pet status in the store","enum":["available","pending","sold"]},"tags":{"type":"array","items":{"$ref":"#/$defs/Tag"}}},"required":["name","photoUrls"],"additionalProperties":true};const schema13 = {"type":"object","properties":{"id":{"type":"integer"},"name":{"type":"string"}},"additionalProperties":true};const schema14 = {"type":"object","properties":{"id":{"type":"integer"},"name":{"type":"string"}},"additionalProperties":true};function validate11(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){let vErrors = null;let errors = 0;if(errors === 0){if(data && typeof data == "object" && !Array.isArray(data)){let missing0;if(((data.name === undefined) && (missing0 = "name")) || ((data.photoUrls === undefined) && (missing0 = "photoUrls"))){validate11.errors = [{instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];return false;}else {if(data.category !== undefined){let data0 = data.category;const _errs2 = errors;const _errs3 = errors;if(errors === _errs3){if(data0 && typeof data0 == "object" && !Array.isArray(data0)){if(data0.id !== undefined){let data1 = data0.id;const _errs6 = errors;if(!(((typeof data1 == "number") && (!(data1 % 1) && !isNaN(data1))) && (isFinite(data1)))){validate11.errors = [{instancePath:instancePath+"/category/id",schemaPath:"#/$defs/Category/properties/id/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];return false;}var valid2 = _errs6 === errors;}else {var valid2 = true;}if(valid2){if(data0.name !== undefined){const _errs8 = errors;if(typeof data0.name !== "string"){validate11.errors = [{instancePath:instancePath+"/category/name",schemaPath:"#/$defs/Category/properties/name/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid2 = _errs8 === errors;}else {var valid2 = true;}}}else {validate11.errors = [{instancePath:instancePath+"/category",schemaPath:"#/$defs/Category/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}var valid0 = _errs2 === errors;}else {var valid0 = true;}if(valid0){if(data.id !== undefined){let data3 = data.id;const _errs10 = errors;if(!(((typeof data3 == "number") && (!(data3 % 1) && !isNaN(data3))) && (isFinite(data3)))){validate11.errors = [{instancePath:instancePath+"/id",schemaPath:"#/properties/id/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];return false;}var valid0 = _errs10 === errors;}else {var valid0 = true;}if(valid0){if(data.name !== undefined){const _errs12 = errors;if(typeof data.name !== "string"){validate11.errors = [{instancePath:instancePath+"/name",schemaPath:"#/properties/name/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid0 = _errs12 === errors;}else {var valid0 = true;}if(valid0){if(data.photoUrls !== undefined){let data5 = data.photoUrls;const _errs14 = errors;if(errors === _errs14){if(Array.isArray(data5)){var valid3 = true;const len0 = data5.length;for(let i0=0; i0<len0; i0++){const _errs16 = errors;if(typeof data5[i0] !== "string"){validate11.errors = [{instancePath:instancePath+"/photoUrls/" + i0,schemaPath:"#/properties/photoUrls/items/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid3 = _errs16 === errors;if(!valid3){break;}}}else {validate11.errors = [{instancePath:instancePath+"/photoUrls",schemaPath:"#/properties/photoUrls/type",keyword:"type",params:{type: "array"},message:"must be array"}];return false;}}var valid0 = _errs14 === errors;}else {var valid0 = true;}if(valid0){if(data.status !== undefined){let data7 = data.status;const _errs18 = errors;if(!(((data7 === "available") || (data7 === "pending")) || (data7 === "sold"))){validate11.errors = [{instancePath:instancePath+"/status",schemaPath:"#/properties/status/enum",keyword:"enum",params:{allowedValues: schema12.properties.status.enum},message:"must be equal to one of the allowed values"}];return false;}var valid0 = _errs18 === errors;}else {var valid0 = true;}if(valid0){if(data.tags !== undefined){let data8 = data.tags;const _errs19 = errors;if(errors === _errs19){if(Array.isArray(data8)){var valid4 = true;const len1 = data8.length;for(let i1=0; i1<len1; i1++){let data9 = data8[i1];const _errs21 = errors;const _errs22 = errors;if(errors === _errs22){if(data9 && typeof data9 == "object" && !Array.isArray(data9)){if(data9.id !== undefined){let data10 = data9.id;const _errs25 = errors;if(!(((typeof data10 == "number") && (!(data10 % 1) && !isNaN(data10))) && (isFinite(data10)))){validate11.errors = [{instancePath:instancePath+"/tags/" + i1+"/id",schemaPath:"#/$defs/Tag/properties/id/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];return false;}var valid6 = _errs25 === errors;}else {var valid6 = true;}if(valid6){if(data9.name !== undefined){const _errs27 = errors;if(typeof data9.name !== "string"){validate11.errors = [{instancePath:instancePath+"/tags/" + i1+"/name",schemaPath:"#/$defs/Tag/properties/name/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid6 = _errs27 === errors;}else {var valid6 = true;}}}else {validate11.errors = [{instancePath:instancePath+"/tags/" + i1,schemaPath:"#/$defs/Tag/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}var valid4 = _errs21 === errors;if(!valid4){break;}}}else {validate11.errors = [{instancePath:instancePath+"/tags",schemaPath:"#/properties/tags/type",keyword:"type",params:{type: "array"},message:"must be array"}];return false;}}var valid0 = _errs19 === errors;}else {var valid0 = true;}}}}}}}}else {validate11.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}validate11.errors = vErrors;return errors === 0;}function validate10(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){let vErrors = null;let errors = 0;if(errors === 0){if(Array.isArray(data)){var valid0 = true;const len0 = data.length;for(let i0=0; i0<len0; i0++){const _errs1 = errors;if(!(validate11(data[i0], {instancePath:instancePath+"/" + i0,parentData:data,parentDataProperty:i0,rootData}))){vErrors = vErrors === null ? validate11.errors : vErrors.concat(validate11.errors);errors = vErrors.length;}var valid0 = _errs1 === errors;if(!valid0){break;}}}else {validate10.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "array"},message:"must be array"}];return false;}}validate10.errors = vErrors;return errors === 0;};validate.schema=schema11;",
    "examples/restclients/petstore/schemas/get-inventory-response.schema.js": "/* eslint-disable */
// @ts-nocheck
/**
 * Generated by Ajv https://ajv.js.org/guide/managing-schemas.html#standalone-validation-code
 */
"use strict";
/** @type {unknown} */
export const validate = validate10;export default validate10;const schema11 = {"$schema":"http://json-schema.org/draft-07/schema#","title":"GetInventoryResponse","type":"object","additionalProperties":{"type":"integer"}};function validate10(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){let vErrors = null;let errors = 0;if(errors === 0){if(data && typeof data == "object" && !Array.isArray(data)){for(const key0 in data){let data0 = data[key0];const _errs2 = errors;if(!(((typeof data0 == "number") && (!(data0 % 1) && !isNaN(data0))) && (isFinite(data0)))){validate10.errors = [{instancePath:instancePath+"/" + key0.replace(/~/g, "~0").replace(/\\//g, "~1"),schemaPath:"#/additionalProperties/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];return false;}var valid0 = _errs2 === errors;if(!valid0){break;}}}else {validate10.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}validate10.errors = vErrors;return errors === 0;};validate.schema=schema11;",
    "examples/restclients/petstore/schemas/login-user-response.schema.js": "/* eslint-disable */
// @ts-nocheck
/**
 * Generated by Ajv https://ajv.js.org/guide/managing-schemas.html#standalone-validation-code
 */
"use strict";
/** @type {unknown} */
export const validate = validate10;export default validate10;const schema11 = {"$schema":"http://json-schema.org/draft-07/schema#","title":"LoginUserResponse","type":"string"};function validate10(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){let vErrors = null;let errors = 0;if(typeof data !== "string"){validate10.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}validate10.errors = vErrors;return errors === 0;};validate.schema=schema11;",
    "examples/restclients/petstore/schemas/order.schema.js": "/* eslint-disable */
// @ts-nocheck
/**
 * Generated by Ajv https://ajv.js.org/guide/managing-schemas.html#standalone-validation-code
 */
import { fullFormats as ajvFormatsDistFormatsFullFormats } from 'ajv-formats/dist/formats.js';
"use strict";
/** @type {unknown} */
export const validate = validate10;export default validate10;const schema11 = {"$schema":"http://json-schema.org/draft-07/schema#","title":"Order","type":"object","properties":{"complete":{"type":"boolean"},"id":{"type":"integer"},"petId":{"type":"integer"},"quantity":{"type":"integer"},"shipDate":{"type":"string","format":"date-time"},"status":{"description":"Order Status","enum":["placed","approved","delivered"]}},"additionalProperties":true};const formats0 = ajvFormatsDistFormatsFullFormats["date-time"];function validate10(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){let vErrors = null;let errors = 0;if(errors === 0){if(data && typeof data == "object" && !Array.isArray(data)){if(data.complete !== undefined){const _errs2 = errors;if(typeof data.complete !== "boolean"){validate10.errors = [{instancePath:instancePath+"/complete",schemaPath:"#/properties/complete/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"}];return false;}var valid0 = _errs2 === errors;}else {var valid0 = true;}if(valid0){if(data.id !== undefined){let data1 = data.id;const _errs4 = errors;if(!(((typeof data1 == "number") && (!(data1 % 1) && !isNaN(data1))) && (isFinite(data1)))){validate10.errors = [{instancePath:instancePath+"/id",schemaPath:"#/properties/id/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];return false;}var valid0 = _errs4 === errors;}else {var valid0 = true;}if(valid0){if(data.petId !== undefined){let data2 = data.petId;const _errs6 = errors;if(!(((typeof data2 == "number") && (!(data2 % 1) && !isNaN(data2))) && (isFinite(data2)))){validate10.errors = [{instancePath:instancePath+"/petId",schemaPath:"#/properties/petId/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];return false;}var valid0 = _errs6 === errors;}else {var valid0 = true;}if(valid0){if(data.quantity !== undefined){let data3 = data.quantity;const _errs8 = errors;if(!(((typeof data3 == "number") && (!(data3 % 1) && !isNaN(data3))) && (isFinite(data3)))){validate10.errors = [{instancePath:instancePath+"/quantity",schemaPath:"#/properties/quantity/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];return false;}var valid0 = _errs8 === errors;}else {var valid0 = true;}if(valid0){if(data.shipDate !== undefined){let data4 = data.shipDate;const _errs10 = errors;if(errors === _errs10){if(errors === _errs10){if(typeof data4 === "string"){if(!(formats0.validate(data4))){validate10.errors = [{instancePath:instancePath+"/shipDate",schemaPath:"#/properties/shipDate/format",keyword:"format",params:{format: "date-time"},message:"must match format \\""+"date-time"+"\\""}];return false;}}else {validate10.errors = [{instancePath:instancePath+"/shipDate",schemaPath:"#/properties/shipDate/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}}var valid0 = _errs10 === errors;}else {var valid0 = true;}if(valid0){if(data.status !== undefined){let data5 = data.status;const _errs12 = errors;if(!(((data5 === "placed") || (data5 === "approved")) || (data5 === "delivered"))){validate10.errors = [{instancePath:instancePath+"/status",schemaPath:"#/properties/status/enum",keyword:"enum",params:{allowedValues: schema11.properties.status.enum},message:"must be equal to one of the allowed values"}];return false;}var valid0 = _errs12 === errors;}else {var valid0 = true;}}}}}}}else {validate10.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}validate10.errors = vErrors;return errors === 0;};validate.schema=schema11;",
    "examples/restclients/petstore/schemas/pet.schema.js": "/* eslint-disable */
// @ts-nocheck
/**
 * Generated by Ajv https://ajv.js.org/guide/managing-schemas.html#standalone-validation-code
 */
"use strict";
/** @type {unknown} */
export const validate = validate10;export default validate10;const schema11 = {"$schema":"http://json-schema.org/draft-07/schema#","title":"Pet","type":"object","properties":{"category":{"$ref":"#/$defs/Category"},"id":{"type":"integer"},"name":{"type":"string"},"photoUrls":{"type":"array","items":{"type":"string"}},"status":{"description":"pet status in the store","enum":["available","pending","sold"]},"tags":{"type":"array","items":{"$ref":"#/$defs/Tag"}}},"required":["name","photoUrls"],"additionalProperties":true,"$defs":{"Category":{"type":"object","properties":{"id":{"type":"integer"},"name":{"type":"string"}},"additionalProperties":true},"Tag":{"type":"object","properties":{"id":{"type":"integer"},"name":{"type":"string"}},"additionalProperties":true}}};const schema12 = {"type":"object","properties":{"id":{"type":"integer"},"name":{"type":"string"}},"additionalProperties":true};const schema13 = {"type":"object","properties":{"id":{"type":"integer"},"name":{"type":"string"}},"additionalProperties":true};function validate10(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){let vErrors = null;let errors = 0;if(errors === 0){if(data && typeof data == "object" && !Array.isArray(data)){let missing0;if(((data.name === undefined) && (missing0 = "name")) || ((data.photoUrls === undefined) && (missing0 = "photoUrls"))){validate10.errors = [{instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];return false;}else {if(data.category !== undefined){let data0 = data.category;const _errs2 = errors;const _errs3 = errors;if(errors === _errs3){if(data0 && typeof data0 == "object" && !Array.isArray(data0)){if(data0.id !== undefined){let data1 = data0.id;const _errs6 = errors;if(!(((typeof data1 == "number") && (!(data1 % 1) && !isNaN(data1))) && (isFinite(data1)))){validate10.errors = [{instancePath:instancePath+"/category/id",schemaPath:"#/$defs/Category/properties/id/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];return false;}var valid2 = _errs6 === errors;}else {var valid2 = true;}if(valid2){if(data0.name !== undefined){const _errs8 = errors;if(typeof data0.name !== "string"){validate10.errors = [{instancePath:instancePath+"/category/name",schemaPath:"#/$defs/Category/properties/name/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid2 = _errs8 === errors;}else {var valid2 = true;}}}else {validate10.errors = [{instancePath:instancePath+"/category",schemaPath:"#/$defs/Category/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}var valid0 = _errs2 === errors;}else {var valid0 = true;}if(valid0){if(data.id !== undefined){let data3 = data.id;const _errs10 = errors;if(!(((typeof data3 == "number") && (!(data3 % 1) && !isNaN(data3))) && (isFinite(data3)))){validate10.errors = [{instancePath:instancePath+"/id",schemaPath:"#/properties/id/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];return false;}var valid0 = _errs10 === errors;}else {var valid0 = true;}if(valid0){if(data.name !== undefined){const _errs12 = errors;if(typeof data.name !== "string"){validate10.errors = [{instancePath:instancePath+"/name",schemaPath:"#/properties/name/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid0 = _errs12 === errors;}else {var valid0 = true;}if(valid0){if(data.photoUrls !== undefined){let data5 = data.photoUrls;const _errs14 = errors;if(errors === _errs14){if(Array.isArray(data5)){var valid3 = true;const len0 = data5.length;for(let i0=0; i0<len0; i0++){const _errs16 = errors;if(typeof data5[i0] !== "string"){validate10.errors = [{instancePath:instancePath+"/photoUrls/" + i0,schemaPath:"#/properties/photoUrls/items/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid3 = _errs16 === errors;if(!valid3){break;}}}else {validate10.errors = [{instancePath:instancePath+"/photoUrls",schemaPath:"#/properties/photoUrls/type",keyword:"type",params:{type: "array"},message:"must be array"}];return false;}}var valid0 = _errs14 === errors;}else {var valid0 = true;}if(valid0){if(data.status !== undefined){let data7 = data.status;const _errs18 = errors;if(!(((data7 === "available") || (data7 === "pending")) || (data7 === "sold"))){validate10.errors = [{instancePath:instancePath+"/status",schemaPath:"#/properties/status/enum",keyword:"enum",params:{allowedValues: schema11.properties.status.enum},message:"must be equal to one of the allowed values"}];return false;}var valid0 = _errs18 === errors;}else {var valid0 = true;}if(valid0){if(data.tags !== undefined){let data8 = data.tags;const _errs19 = errors;if(errors === _errs19){if(Array.isArray(data8)){var valid4 = true;const len1 = data8.length;for(let i1=0; i1<len1; i1++){let data9 = data8[i1];const _errs21 = errors;const _errs22 = errors;if(errors === _errs22){if(data9 && typeof data9 == "object" && !Array.isArray(data9)){if(data9.id !== undefined){let data10 = data9.id;const _errs25 = errors;if(!(((typeof data10 == "number") && (!(data10 % 1) && !isNaN(data10))) && (isFinite(data10)))){validate10.errors = [{instancePath:instancePath+"/tags/" + i1+"/id",schemaPath:"#/$defs/Tag/properties/id/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];return false;}var valid6 = _errs25 === errors;}else {var valid6 = true;}if(valid6){if(data9.name !== undefined){const _errs27 = errors;if(typeof data9.name !== "string"){validate10.errors = [{instancePath:instancePath+"/tags/" + i1+"/name",schemaPath:"#/$defs/Tag/properties/name/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid6 = _errs27 === errors;}else {var valid6 = true;}}}else {validate10.errors = [{instancePath:instancePath+"/tags/" + i1,schemaPath:"#/$defs/Tag/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}var valid4 = _errs21 === errors;if(!valid4){break;}}}else {validate10.errors = [{instancePath:instancePath+"/tags",schemaPath:"#/properties/tags/type",keyword:"type",params:{type: "array"},message:"must be array"}];return false;}}var valid0 = _errs19 === errors;}else {var valid0 = true;}}}}}}}}else {validate10.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}validate10.errors = vErrors;return errors === 0;};validate.schema=schema11;",
    "examples/restclients/petstore/schemas/user.schema.js": "/* eslint-disable */
// @ts-nocheck
/**
 * Generated by Ajv https://ajv.js.org/guide/managing-schemas.html#standalone-validation-code
 */
"use strict";
/** @type {unknown} */
export const validate = validate10;export default validate10;const schema11 = {"$schema":"http://json-schema.org/draft-07/schema#","title":"User","type":"object","properties":{"email":{"type":"string"},"firstName":{"type":"string"},"id":{"type":"integer"},"lastName":{"type":"string"},"password":{"type":"string"},"phone":{"type":"string"},"username":{"type":"string"},"userStatus":{"type":"integer","description":"User Status"}},"additionalProperties":true};function validate10(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){let vErrors = null;let errors = 0;if(errors === 0){if(data && typeof data == "object" && !Array.isArray(data)){if(data.email !== undefined){const _errs2 = errors;if(typeof data.email !== "string"){validate10.errors = [{instancePath:instancePath+"/email",schemaPath:"#/properties/email/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid0 = _errs2 === errors;}else {var valid0 = true;}if(valid0){if(data.firstName !== undefined){const _errs4 = errors;if(typeof data.firstName !== "string"){validate10.errors = [{instancePath:instancePath+"/firstName",schemaPath:"#/properties/firstName/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid0 = _errs4 === errors;}else {var valid0 = true;}if(valid0){if(data.id !== undefined){let data2 = data.id;const _errs6 = errors;if(!(((typeof data2 == "number") && (!(data2 % 1) && !isNaN(data2))) && (isFinite(data2)))){validate10.errors = [{instancePath:instancePath+"/id",schemaPath:"#/properties/id/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];return false;}var valid0 = _errs6 === errors;}else {var valid0 = true;}if(valid0){if(data.lastName !== undefined){const _errs8 = errors;if(typeof data.lastName !== "string"){validate10.errors = [{instancePath:instancePath+"/lastName",schemaPath:"#/properties/lastName/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid0 = _errs8 === errors;}else {var valid0 = true;}if(valid0){if(data.password !== undefined){const _errs10 = errors;if(typeof data.password !== "string"){validate10.errors = [{instancePath:instancePath+"/password",schemaPath:"#/properties/password/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid0 = _errs10 === errors;}else {var valid0 = true;}if(valid0){if(data.phone !== undefined){const _errs12 = errors;if(typeof data.phone !== "string"){validate10.errors = [{instancePath:instancePath+"/phone",schemaPath:"#/properties/phone/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid0 = _errs12 === errors;}else {var valid0 = true;}if(valid0){if(data.username !== undefined){const _errs14 = errors;if(typeof data.username !== "string"){validate10.errors = [{instancePath:instancePath+"/username",schemaPath:"#/properties/username/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid0 = _errs14 === errors;}else {var valid0 = true;}if(valid0){if(data.userStatus !== undefined){let data7 = data.userStatus;const _errs16 = errors;if(!(((typeof data7 == "number") && (!(data7 % 1) && !isNaN(data7))) && (isFinite(data7)))){validate10.errors = [{instancePath:instancePath+"/userStatus",schemaPath:"#/properties/userStatus/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];return false;}var valid0 = _errs16 === errors;}else {var valid0 = true;}}}}}}}}}else {validate10.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}validate10.errors = vErrors;return errors === 0;};validate.schema=schema11;",
  },
}
`;
