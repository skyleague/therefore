// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`output generation 1`] = `
{
  "cleanFn": [Function],
  "outputFiles": {
    "examples/restclients/nasa/apod/nasa.client.ts": "/**
* Generated by @skyleague/therefore@v1.0.0-local
* Do not manually touch this
*/
/* eslint-disable */

import type { IncomingHttpHeaders } from 'node:http'

import type { DefinedError } from 'ajv'
import { got } from 'got'
import type { CancelableRequest, Got, Options, OptionsInit, Response } from 'got'

import { GetApodResponse } from './nasa.type.js'

/**
 * APOD
 * 
 * This endpoint structures the APOD imagery and associated metadata so that it can be repurposed for other applications. In addition, if the concept_tags parameter is set to True, then keywords derived from the image explanation are returned. These keywords could be used as auto-generated hashtags for twitter or instagram feeds; but generally help with discoverability of relevant imagery
 */
export class Apod {
    public client: Got

    public auth: {
        apiKey?: string | (() => Promise<string>)
    }

    public availableAuth: Set<string>
    public defaultAuth: string[][] | string[] | undefined

    public constructor(
    {
        prefixUrl,
        options,
        auth = {},
        defaultAuth,
        client = got
    }: {
        prefixUrl: string | 'https://api.nasa.gov/planetary' | 'http://api.nasa.gov/planetary',
        options?: Options | OptionsInit,
        auth: {
            apiKey?: string | (() => Promise<string>)
        }
        defaultAuth?: string[][] | string[]
        client?: Got
    }) {
        this.client = client.extend(...[{ prefixUrl, throwHttpErrors: false }, options].filter((o): o is Options => o !== undefined))
        this.auth = auth
        this.availableAuth = new Set(Object.keys(auth))
        this.defaultAuth = defaultAuth
    }


    /**
     * Returns images
     * 
     * Returns the picture of the day
     */
    public getApod({query, auth = [['apiKey']]}: {query?: { date?: string, hd?: string }, auth?: string[][] | string[]} = {}): Promise<
    | SuccessResponse<'200', GetApodResponse>
    | FailureResponse<'400', unknown, 'response:statuscode'>
    | FailureResponse<StatusCode<2>, string, 'response:body', IncomingHttpHeaders>
    | FailureResponse<Exclude<StatusCode<1 | 3 | 4 | 5>, "400">, unknown, 'response:statuscode', IncomingHttpHeaders>
    >
    {
        return this.awaitResponse(this.buildClient(auth).get('apod', {
            searchParams: query ?? {},responseType: 'json',
        }), {
            200: GetApodResponse,400: { parse: (x: unknown) => ({ right: x }) },
        }) as ReturnType<this["getApod"]>
    }

    public async awaitResponse<I, S extends Record<PropertyKey, { parse: (o: I) => { left: DefinedError[] } | { right: unknown } } | undefined>>(response: 
    CancelableRequest<Response<I>>
    , schemas: S) {
        const result = await response
        const status = result.statusCode < 200 ? 'informational' : result.statusCode < 300 ? 'success' : result.statusCode < 400 ? 'redirection' : result.statusCode < 500 ? 'client-error' : 'server-error'
        const validator = schemas[result.statusCode] ?? schemas.default
        const body = validator?.parse?.(result.body)
        if (result.statusCode < 200 || result.statusCode >= 300)
        {
            return {statusCode: result.statusCode.toString(), status, headers: result.headers, left: body !== undefined && 'right' in body ? body.right : result.body, validationErrors: body !== undefined && 'left' in body ? body.left : undefined, where: 'response:statuscode' } 
        }
        if (body === undefined || 'left' in body)
        {
            return {statusCode: result.statusCode.toString(), status, headers: result.headers, left: result.body, validationErrors: body?.left, where: 'response:body' }
        }
        return {statusCode: result.statusCode.toString(), status, headers: result.headers, right: result.body }
    }

    protected buildApiKeyClient(client: Got)
    {
        return client.extend({
        hooks: {
        beforeRequest: [
        async (options) => 
        {
            const apiKey = this.auth.apiKey
            const key = typeof apiKey === 'function' ? await apiKey() : apiKey
            options.headers.api_key = key
        }
        ],},})
    }

    protected buildClient(auths: string[][] | string[] | undefined = this.defaultAuth, client?: Got): Got
    {
        const auth = (auths ?? [...this.availableAuth]).map(auth => Array.isArray(auth) ? auth : [auth]).filter((auth) => auth.every((a) => this.availableAuth.has(a)))
        let chosenClient = client ?? this.client
        for (const chosen of auth[0] ?? [])
        {
            if (chosen === 'apiKey')
            {
                chosenClient = this.buildApiKeyClient(chosenClient)
            }
        }
        return chosenClient
    }
}

export type Status<Major> = Major extends string ? Major extends \`1\${number}\`? 'informational': Major extends \`2\${number}\` ? 'success' : Major extends \`3\${number}\` ? 'redirection' : Major extends \`4\${number}\` ? 'client-error' : 'server-error' : undefined
export interface SuccessResponse<StatusCode extends string, T> { statusCode: StatusCode; status: Status<StatusCode>; headers: IncomingHttpHeaders; right: T }
export interface FailureResponse<StatusCode = string, T = unknown, Where = never, Headers = IncomingHttpHeaders> {
                    statusCode: StatusCode
                    status: Status<StatusCode>
                    headers: Headers
                    validationErrors: DefinedError[] | undefined
                    left: T
                    where: Where
                }
export type StatusCode<Major extends number = 1 | 2 | 3 | 4 | 5> = \`\${Major}\${number}\`



",
    "examples/restclients/nasa/apod/nasa.type.ts": "/**
* Generated by @skyleague/therefore@v1.0.0-local
* Do not manually touch this
*/
/* eslint-disable */

import type { DefinedError, ValidateFunction } from 'ajv'

import { validate as GetApodResponseValidator } from './schemas/get-apod-response.schema.js'

export type GetApodResponse = (unknown)[]

export const GetApodResponse = {
    validate: GetApodResponseValidator as ValidateFunction<GetApodResponse>,
    get schema() { return GetApodResponse.validate.schema},
    get errors() { return GetApodResponse.validate.errors ?? undefined },
    is: (o: unknown): o is GetApodResponse => GetApodResponse.validate(o) === true,
    parse: (o: unknown): { right: GetApodResponse } | { left: DefinedError[] } => 
    {
        if(GetApodResponse.is(o)) {
            return { right: o }
        }
        return { left: (GetApodResponse.errors ?? []) as DefinedError[] }
    },
} as const


",
    "examples/restclients/nasa/apod/schemas/get-apod-response.schema.js": "/* eslint-disable */
// @ts-nocheck
/**
 * Generated by Ajv https://ajv.js.org/guide/managing-schemas.html#standalone-validation-code
 */
"use strict";
/** @type {unknown} */
export const validate = validate10;export default validate10;const schema11 = {"$schema":"http://json-schema.org/draft-07/schema#","title":"GetApodResponse","type":"array","items":{}};function validate10(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){let vErrors = null;let errors = 0;if(errors === 0){if(!(Array.isArray(data))){validate10.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "array"},message:"must be array"}];return false;}}validate10.errors = vErrors;return errors === 0;};validate.schema=schema11;",
    "examples/restclients/nasa/astroids/nasa.client.ts": "/**
* Generated by @skyleague/therefore@v1.0.0-local
* Do not manually touch this
*/
/* eslint-disable */

import type { IncomingHttpHeaders } from 'node:http'

import type { DefinedError } from 'ajv'
import { got } from 'got'
import type { CancelableRequest, Got, Options, OptionsInit, Response } from 'got'

import { GetApiByResponse200, Project } from './nasa.type.js'

/**
 * TechPort
 * 
 * TechPort RESTful API
 */
export class Astroids {
    public client: Got

    public constructor(
    {
        prefixUrl,
        options,
        client = got
    }: {
        prefixUrl: string | 'http://techport.nasa.gov/api' | 'https://techport.nasa.gov/api',
        options?: Options | OptionsInit,
        client?: Got
    }) {
        this.client = client.extend(...[{ prefixUrl, throwHttpErrors: false }, options].filter((o): o is Options => o !== undefined))
    }


    /**
     * Returns the swagger specification for the API.
     */
    public getApi(): Promise<
    | SuccessResponse<'200', unknown>
    | FailureResponse<StatusCode<2>, string, 'response:body', IncomingHttpHeaders>
    | FailureResponse<StatusCode<1 | 3 | 4 | 5>, string, 'response:statuscode', IncomingHttpHeaders>
    >
    {
        return this.awaitResponse(this.client.get('api', {
            responseType: 'text',
        }), {
            200: { parse: (x: unknown) => ({ right: x }) },
        }) as ReturnType<this["getApi"]>
    }

    /**
     * Returns a list of available technology project IDs.
     */
    public getApiBy({path, query}: {path: { format: string }, query: { updatedSince: string, format: string }}): Promise<
    | SuccessResponse<'200', GetApiByResponse200>
    | FailureResponse<StatusCode<2>, string, 'response:body', IncomingHttpHeaders>
    | FailureResponse<StatusCode<1 | 3 | 4 | 5>, string, 'response:statuscode', IncomingHttpHeaders>
    >
    {
        return this.awaitResponse(this.client.get(\`api/projects\${path.format}\`, {
            searchParams: query,responseType: 'json',
        }), {
            200: GetApiByResponse200,
        }) as ReturnType<this["getApiBy"]>
    }

    /**
     * Returns information about a specific technology project.
     */
    public getApiProjectByFormat({path, query}: {path: { id: string, format: string }, query: { format: string }}): Promise<
    | SuccessResponse<'200', Project>
    | FailureResponse<StatusCode<2>, string, 'response:body', IncomingHttpHeaders>
    | FailureResponse<StatusCode<1 | 3 | 4 | 5>, string, 'response:statuscode', IncomingHttpHeaders>
    >
    {
        return this.awaitResponse(this.client.get(\`api/projects/\${path.id}\${path.format}\`, {
            searchParams: query,responseType: 'json',
        }), {
            200: Project,
        }) as ReturnType<this["getApiProjectByFormat"]>
    }

    public async awaitResponse<I, S extends Record<PropertyKey, { parse: (o: I) => { left: DefinedError[] } | { right: unknown } } | undefined>>(response: 
    CancelableRequest<Response<I>>
    , schemas: S) {
        const result = await response
        const status = result.statusCode < 200 ? 'informational' : result.statusCode < 300 ? 'success' : result.statusCode < 400 ? 'redirection' : result.statusCode < 500 ? 'client-error' : 'server-error'
        const validator = schemas[result.statusCode] ?? schemas.default
        const body = validator?.parse?.(result.body)
        if (result.statusCode < 200 || result.statusCode >= 300)
        {
            return {statusCode: result.statusCode.toString(), status, headers: result.headers, left: body !== undefined && 'right' in body ? body.right : result.body, validationErrors: body !== undefined && 'left' in body ? body.left : undefined, where: 'response:statuscode' } 
        }
        if (body === undefined || 'left' in body)
        {
            return {statusCode: result.statusCode.toString(), status, headers: result.headers, left: result.body, validationErrors: body?.left, where: 'response:body' }
        }
        return {statusCode: result.statusCode.toString(), status, headers: result.headers, right: result.body }
    }
}

export type Status<Major> = Major extends string ? Major extends \`1\${number}\`? 'informational': Major extends \`2\${number}\` ? 'success' : Major extends \`3\${number}\` ? 'redirection' : Major extends \`4\${number}\` ? 'client-error' : 'server-error' : undefined
export interface SuccessResponse<StatusCode extends string, T> { statusCode: StatusCode; status: Status<StatusCode>; headers: IncomingHttpHeaders; right: T }
export interface FailureResponse<StatusCode = string, T = unknown, Where = never, Headers = IncomingHttpHeaders> {
                    statusCode: StatusCode
                    status: Status<StatusCode>
                    headers: Headers
                    validationErrors: DefinedError[] | undefined
                    left: T
                    where: Where
                }
export type StatusCode<Major extends number = 1 | 2 | 3 | 4 | 5> = \`\${Major}\${number}\`



",
    "examples/restclients/nasa/astroids/nasa.type.ts": "/**
* Generated by @skyleague/therefore@v1.0.0-local
* Do not manually touch this
*/
/* eslint-disable */

import type { DefinedError, ValidateFunction } from 'ajv'

import { validate as GetApiByResponse200Validator } from './schemas/get-api-by-response200.schema.js'
import { validate as ProjectValidator } from './schemas/project.schema.js'

/**
 * Represents a file hyperlink or external hyperlink to a project closeout final report artifact.
 */
export type CloseoutDocument = string

/**
 * The name of an investigator who is a scientist or engineer for an project.
 */
export type CoInvestigator = string

/**
 * Represents a destination towards which the technology on this project helps advance the Agency goals.
 */
export type Destination = string

/**
 * Represents a file associated with a library item.
 */
export interface File {
    /**
     * Unique identifier for the file.
     */
    id?: (number | undefined)
    /**
     * The size of the file in bytes.
     */
    size?: (string | undefined)
    /**
     * The TechPort URL at which the file is accessible for download.
     */
    url?: (string | undefined)
}

export interface GetApiByResponse200 {
    id?: (number | undefined)
    lastUpdated?: (string | undefined)
}

export const GetApiByResponse200 = {
    validate: GetApiByResponse200Validator as ValidateFunction<GetApiByResponse200>,
    get schema() { return GetApiByResponse200.validate.schema},
    get errors() { return GetApiByResponse200.validate.errors ?? undefined },
    is: (o: unknown): o is GetApiByResponse200 => GetApiByResponse200.validate(o) === true,
    parse: (o: unknown): { right: GetApiByResponse200 } | { left: DefinedError[] } => 
    {
        if(GetApiByResponse200.is(o)) {
            return { right: o }
        }
        return { left: (GetApiByResponse200.errors ?? []) as DefinedError[] }
    },
} as const


/**
 * Represents a specific library item that is part of this project.
 */
export interface LibraryItem {
    /**
     * Date the library item was completed.
     */
    completionDate?: (string | undefined)
    /**
     * Description of the library item.
     */
    description?: (string | undefined)
    /**
     * External URL for the library item.
     */
    externalUrl?: (string | undefined)
    /**
     * List of files associated with the library item.
     */
    files?: ((File)[] | undefined)
    /**
     * Unique identifier for the library item.
     */
    id?: (number | undefined)
    /**
     * Publisher of the library item.
     */
    publishedBy?: (string | undefined)
    /**
     * Date the library item was published.
     */
    publishedDate?: (string | undefined)
    /**
     * Title of the library item
     */
    title?: (string | undefined)
    /**
     * Identifies the type of library item, e.g. Image
     */
    type?: (string | undefined)
}

/**
 * A NASA center/facility associated with an project.
 */
export interface Organization {
    /**
     * The acronym of the organization.
     */
    acronym?: (string | undefined)
    /**
     * The city in which the organization is located.
     */
    city?: (string | undefined)
    /**
     * The name of the organization.
     */
    name?: (string | undefined)
    /**
     * The state in which the organization is located.
     */
    state?: (string | undefined)
}

/**
 * The name of the Principal Investigator who is a lead scientist or engineer for an project.
 */
export type PrincipalInvestigator = string

/**
 * The name of a Program Director responsible for management of an project.
 */
export type ProgramDirector = string

/**
 * The name of a Program Manager responsible for management of an project.
 */
export type ProgramManager = string

/**
 * Top-level TechPort object representing a NASA technology project and its associated data.
 */
export interface Project {
    /**
     * Abbreviated name of the project.
     */
    acronym?: (string | undefined)
    /**
     * List of additional and cross-cutting technology areas associated with the project.
     */
    additionalTas?: ((TechnologyArea)[] | undefined)
    /**
     * Describes the benefits offered to NASA funded and planned missions, unfunded or planned missions, commercial space industry, and to the nation.
     */
    benefits?: (string | undefined)
    /**
     * List of document files or links to the project final report closeout documentation.
     */
    closeoutDocuments?: ((CloseoutDocument)[] | undefined)
    /**
     * The project closeout summary excerpt.
     */
    closeoutSummary?: (string | undefined)
    /**
     * Other government agencies, NASA Mission Directoratres, universities, or commercial entities performing contributing resources to this project.
     */
    coFundingPartners?: ((Organization)[] | undefined)
    /**
     * Names of the additional investigators who are scientists or engineers for this project.
     */
    coInvestigators?: ((CoInvestigator)[] | undefined)
    /**
     * A detailed description of the project.
     */
    description?: (string | undefined)
    /**
     * List of the NASA destinations the technology on this project helps achieve.
     */
    destinations?: ((Destination)[] | undefined)
    /**
     * The month and year the project is expected to complete its work.
     */
    endDate?: (string | undefined)
    /**
     * Unique identifier for the project.
     */
    id?: (number | undefined)
    /**
     * ISO 8601 full-date in the format YYYY-MM-DD describing the last time this project was updated.
     */
    lastUpdated?: (string | undefined)
    leadOrganization?: (Organization | undefined)
    /**
     * List of library items in the project library.
     */
    libraryItems?: ((LibraryItem)[] | undefined)
    /**
     * List of primary technolgy areas (from the NASA Technology Roadmap) associated with the project.
     */
    primaryTas?: ((TechnologyArea)[] | undefined)
    /**
     * Names of the Principal Investigators who are the lead scientists or engineers for this project.
     */
    principalInvestigators?: ((PrincipalInvestigator)[] | undefined)
    /**
     * Names of the Program Directors responsible for the management of this project.
     */
    programDirectors?: ((ProgramDirector)[] | undefined)
    /**
     * Names of the Program Managers responsible for the management of this project.
     */
    programManagers?: ((ProgramManager)[] | undefined)
    /**
     * Names of the Project Managers responsible for the management of this project.
     */
    projectManagers?: ((ProjectManager)[] | undefined)
    /**
     * The NASA Mission Directorate or Office that is the primary funding source for this project.
     */
    responsibleMissionDirectorateOrOffice?: (string | undefined)
    /**
     * The NASA program that is the primary funding source for this project.
     */
    responsibleProgram?: (string | undefined)
    /**
     * The month and year the project was authorized to proceed.
     */
    startDate?: (string | undefined)
    /**
     * Indicates whether the project is currently active, completed, or canceled.
     */
    status?: (string | undefined)
    /**
     * The supported mission type (Projected Mission, Planned Mission, or Pull).
     */
    supportedMissionType?: (string | undefined)
    /**
     * The supporting organizations for this project that are conducting work on the project.
     */
    supportingOrganizations?: ((Organization)[] | undefined)
    /**
     * The current technology maturity (technology readiness level) of the project.
     */
    technologyMaturityCurrent?: (string | undefined)
    /**
     * The estimated technology maturity (technology readiness level) of the project at its end.
     */
    technologyMaturityEnd?: (string | undefined)
    /**
     * The technology maturity (technology readiness level) of the project at its beginning.
     */
    technologyMaturityStart?: (string | undefined)
    /**
     * Title of the project.
     */
    title?: (string | undefined)
    /**
     * The URL for the associated website.
     */
    website?: (string | undefined)
    /**
     * States and territories with people performing work on this project.
     */
    workLocations?: ((WorkLocation)[] | undefined)
}

export const Project = {
    validate: ProjectValidator as ValidateFunction<Project>,
    get schema() { return Project.validate.schema},
    get errors() { return Project.validate.errors ?? undefined },
    is: (o: unknown): o is Project => Project.validate(o) === true,
    parse: (o: unknown): { right: Project } | { left: DefinedError[] } => 
    {
        if(Project.is(o)) {
            return { right: o }
        }
        return { left: (Project.errors ?? []) as DefinedError[] }
    },
} as const


/**
 * The name of a Project Manager responsible for management of an project.
 */
export type ProjectManager = string

/**
 * The Technology Area for a given technology that corresponds to the NASA Technology Roadmap.
 */
export interface TechnologyArea {
    /**
     * The code identifier for the Technology Area.
     */
    code?: (string | undefined)
    /**
     * Unique identifier for the Technology Area.
     */
    id?: (number | undefined)
    /**
     * The name of the Technology Area.
     */
    name?: (string | undefined)
}

/**
 * A state/territory where work on this project is performed.
 */
export type WorkLocation = string

",
    "examples/restclients/nasa/astroids/schemas/get-api-by-response200.schema.js": "/* eslint-disable */
// @ts-nocheck
/**
 * Generated by Ajv https://ajv.js.org/guide/managing-schemas.html#standalone-validation-code
 */
"use strict";
/** @type {unknown} */
export const validate = validate10;export default validate10;const schema11 = {"$schema":"http://json-schema.org/draft-07/schema#","title":"GetApiByResponse200","type":"object","properties":{"id":{"type":"integer"},"lastUpdated":{"type":"string"}},"additionalProperties":true};function validate10(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){let vErrors = null;let errors = 0;if(errors === 0){if(data && typeof data == "object" && !Array.isArray(data)){if(data.id !== undefined){let data0 = data.id;const _errs2 = errors;if(!(((typeof data0 == "number") && (!(data0 % 1) && !isNaN(data0))) && (isFinite(data0)))){validate10.errors = [{instancePath:instancePath+"/id",schemaPath:"#/properties/id/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];return false;}var valid0 = _errs2 === errors;}else {var valid0 = true;}if(valid0){if(data.lastUpdated !== undefined){const _errs4 = errors;if(typeof data.lastUpdated !== "string"){validate10.errors = [{instancePath:instancePath+"/lastUpdated",schemaPath:"#/properties/lastUpdated/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid0 = _errs4 === errors;}else {var valid0 = true;}}}else {validate10.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}validate10.errors = vErrors;return errors === 0;};validate.schema=schema11;",
    "examples/restclients/nasa/astroids/schemas/project.schema.js": "/* eslint-disable */
// @ts-nocheck
/**
 * Generated by Ajv https://ajv.js.org/guide/managing-schemas.html#standalone-validation-code
 */
"use strict";
/** @type {unknown} */
export const validate = validate10;export default validate10;const schema11 = {"$schema":"http://json-schema.org/draft-07/schema#","title":"Project","type":"object","description":"Top-level TechPort object representing a NASA technology project and its associated data.","properties":{"acronym":{"type":"string","description":"Abbreviated name of the project."},"additionalTas":{"type":"array","description":"List of additional and cross-cutting technology areas associated with the project.","items":{"$ref":"#/$defs/TechnologyArea"}},"benefits":{"type":"string","description":"Describes the benefits offered to NASA funded and planned missions, unfunded or planned missions, commercial space industry, and to the nation."},"closeoutDocuments":{"type":"array","description":"List of document files or links to the project final report closeout documentation.","items":{"$ref":"#/$defs/CloseoutDocument"}},"closeoutSummary":{"type":"string","description":"The project closeout summary excerpt."},"coFundingPartners":{"type":"array","description":"Other government agencies, NASA Mission Directoratres, universities, or commercial entities performing contributing resources to this project.","items":{"$ref":"#/$defs/Organization"}},"coInvestigators":{"type":"array","description":"Names of the additional investigators who are scientists or engineers for this project.","items":{"$ref":"#/$defs/CoInvestigator"}},"description":{"type":"string","description":"A detailed description of the project."},"destinations":{"type":"array","description":"List of the NASA destinations the technology on this project helps achieve.","items":{"$ref":"#/$defs/Destination"}},"endDate":{"type":"string","description":"The month and year the project is expected to complete its work."},"id":{"type":"integer","description":"Unique identifier for the project."},"lastUpdated":{"type":"string","description":"ISO 8601 full-date in the format YYYY-MM-DD describing the last time this project was updated.","format":"date"},"leadOrganization":{"$ref":"#/$defs/Organization"},"libraryItems":{"type":"array","description":"List of library items in the project library.","items":{"$ref":"#/$defs/LibraryItem"}},"primaryTas":{"type":"array","description":"List of primary technolgy areas (from the NASA Technology Roadmap) associated with the project.","items":{"$ref":"#/$defs/TechnologyArea"}},"principalInvestigators":{"type":"array","description":"Names of the Principal Investigators who are the lead scientists or engineers for this project.","items":{"$ref":"#/$defs/PrincipalInvestigator"}},"programDirectors":{"type":"array","description":"Names of the Program Directors responsible for the management of this project.","items":{"$ref":"#/$defs/ProgramDirector"}},"programManagers":{"type":"array","description":"Names of the Program Managers responsible for the management of this project.","items":{"$ref":"#/$defs/ProgramManager"}},"projectManagers":{"type":"array","description":"Names of the Project Managers responsible for the management of this project.","items":{"$ref":"#/$defs/ProjectManager"}},"responsibleMissionDirectorateOrOffice":{"type":"string","description":"The NASA Mission Directorate or Office that is the primary funding source for this project."},"responsibleProgram":{"type":"string","description":"The NASA program that is the primary funding source for this project."},"startDate":{"type":"string","description":"The month and year the project was authorized to proceed."},"status":{"type":"string","description":"Indicates whether the project is currently active, completed, or canceled."},"supportedMissionType":{"type":"string","description":"The supported mission type (Projected Mission, Planned Mission, or Pull)."},"supportingOrganizations":{"type":"array","description":"The supporting organizations for this project that are conducting work on the project.","items":{"$ref":"#/$defs/Organization"}},"technologyMaturityCurrent":{"type":"string","description":"The current technology maturity (technology readiness level) of the project."},"technologyMaturityEnd":{"type":"string","description":"The estimated technology maturity (technology readiness level) of the project at its end."},"technologyMaturityStart":{"type":"string","description":"The technology maturity (technology readiness level) of the project at its beginning."},"title":{"type":"string","description":"Title of the project."},"website":{"type":"string","description":"The URL for the associated website."},"workLocations":{"type":"array","description":"States and territories with people performing work on this project.","items":{"$ref":"#/$defs/WorkLocation"}}},"additionalProperties":true,"$defs":{"TechnologyArea":{"type":"object","description":"The Technology Area for a given technology that corresponds to the NASA Technology Roadmap.","properties":{"code":{"type":"string","description":"The code identifier for the Technology Area."},"id":{"type":"integer","description":"Unique identifier for the Technology Area."},"name":{"type":"string","description":"The name of the Technology Area."}},"additionalProperties":true},"CloseoutDocument":{"type":"string","description":"Represents a file hyperlink or external hyperlink to a project closeout final report artifact."},"Organization":{"type":"object","description":"A NASA center/facility associated with an project.","properties":{"acronym":{"type":"string","description":"The acronym of the organization."},"city":{"type":"string","description":"The city in which the organization is located."},"name":{"type":"string","description":"The name of the organization."},"state":{"type":"string","description":"The state in which the organization is located."}},"additionalProperties":true},"CoInvestigator":{"type":"string","description":"The name of an investigator who is a scientist or engineer for an project."},"Destination":{"type":"string","description":"Represents a destination towards which the technology on this project helps advance the Agency goals."},"LibraryItem":{"type":"object","description":"Represents a specific library item that is part of this project.","properties":{"completionDate":{"type":"string","description":"Date the library item was completed."},"description":{"type":"string","description":"Description of the library item."},"externalUrl":{"type":"string","description":"External URL for the library item."},"files":{"type":"array","description":"List of files associated with the library item.","items":{"$ref":"#/$defs/File"}},"id":{"type":"integer","description":"Unique identifier for the library item."},"publishedBy":{"type":"string","description":"Publisher of the library item."},"publishedDate":{"type":"string","description":"Date the library item was published."},"title":{"type":"string","description":"Title of the library item"},"type":{"type":"string","description":"Identifies the type of library item, e.g. Image"}},"additionalProperties":true},"File":{"type":"object","description":"Represents a file associated with a library item.","properties":{"id":{"type":"integer","description":"Unique identifier for the file."},"size":{"type":"string","description":"The size of the file in bytes."},"url":{"type":"string","description":"The TechPort URL at which the file is accessible for download."}},"additionalProperties":true},"PrincipalInvestigator":{"type":"string","description":"The name of the Principal Investigator who is a lead scientist or engineer for an project."},"ProgramDirector":{"type":"string","description":"The name of a Program Director responsible for management of an project."},"ProgramManager":{"type":"string","description":"The name of a Program Manager responsible for management of an project."},"ProjectManager":{"type":"string","description":"The name of a Project Manager responsible for management of an project."},"WorkLocation":{"type":"string","description":"A state/territory where work on this project is performed."}}};const schema12 = {"type":"object","description":"The Technology Area for a given technology that corresponds to the NASA Technology Roadmap.","properties":{"code":{"type":"string","description":"The code identifier for the Technology Area."},"id":{"type":"integer","description":"Unique identifier for the Technology Area."},"name":{"type":"string","description":"The name of the Technology Area."}},"additionalProperties":true};const schema13 = {"type":"string","description":"Represents a file hyperlink or external hyperlink to a project closeout final report artifact."};const schema14 = {"type":"object","description":"A NASA center/facility associated with an project.","properties":{"acronym":{"type":"string","description":"The acronym of the organization."},"city":{"type":"string","description":"The city in which the organization is located."},"name":{"type":"string","description":"The name of the organization."},"state":{"type":"string","description":"The state in which the organization is located."}},"additionalProperties":true};const schema15 = {"type":"string","description":"The name of an investigator who is a scientist or engineer for an project."};const schema16 = {"type":"string","description":"Represents a destination towards which the technology on this project helps advance the Agency goals."};const schema21 = {"type":"string","description":"The name of the Principal Investigator who is a lead scientist or engineer for an project."};const schema22 = {"type":"string","description":"The name of a Program Director responsible for management of an project."};const schema23 = {"type":"string","description":"The name of a Program Manager responsible for management of an project."};const schema24 = {"type":"string","description":"The name of a Project Manager responsible for management of an project."};const schema26 = {"type":"string","description":"A state/territory where work on this project is performed."};const schema18 = {"type":"object","description":"Represents a specific library item that is part of this project.","properties":{"completionDate":{"type":"string","description":"Date the library item was completed."},"description":{"type":"string","description":"Description of the library item."},"externalUrl":{"type":"string","description":"External URL for the library item."},"files":{"type":"array","description":"List of files associated with the library item.","items":{"$ref":"#/$defs/File"}},"id":{"type":"integer","description":"Unique identifier for the library item."},"publishedBy":{"type":"string","description":"Publisher of the library item."},"publishedDate":{"type":"string","description":"Date the library item was published."},"title":{"type":"string","description":"Title of the library item"},"type":{"type":"string","description":"Identifies the type of library item, e.g. Image"}},"additionalProperties":true};const schema19 = {"type":"object","description":"Represents a file associated with a library item.","properties":{"id":{"type":"integer","description":"Unique identifier for the file."},"size":{"type":"string","description":"The size of the file in bytes."},"url":{"type":"string","description":"The TechPort URL at which the file is accessible for download."}},"additionalProperties":true};function validate11(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){let vErrors = null;let errors = 0;if(errors === 0){if(data && typeof data == "object" && !Array.isArray(data)){if(data.completionDate !== undefined){const _errs2 = errors;if(typeof data.completionDate !== "string"){validate11.errors = [{instancePath:instancePath+"/completionDate",schemaPath:"#/properties/completionDate/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid0 = _errs2 === errors;}else {var valid0 = true;}if(valid0){if(data.description !== undefined){const _errs4 = errors;if(typeof data.description !== "string"){validate11.errors = [{instancePath:instancePath+"/description",schemaPath:"#/properties/description/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid0 = _errs4 === errors;}else {var valid0 = true;}if(valid0){if(data.externalUrl !== undefined){const _errs6 = errors;if(typeof data.externalUrl !== "string"){validate11.errors = [{instancePath:instancePath+"/externalUrl",schemaPath:"#/properties/externalUrl/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid0 = _errs6 === errors;}else {var valid0 = true;}if(valid0){if(data.files !== undefined){let data3 = data.files;const _errs8 = errors;if(errors === _errs8){if(Array.isArray(data3)){var valid1 = true;const len0 = data3.length;for(let i0=0; i0<len0; i0++){let data4 = data3[i0];const _errs10 = errors;const _errs11 = errors;if(errors === _errs11){if(data4 && typeof data4 == "object" && !Array.isArray(data4)){if(data4.id !== undefined){let data5 = data4.id;const _errs14 = errors;if(!(((typeof data5 == "number") && (!(data5 % 1) && !isNaN(data5))) && (isFinite(data5)))){validate11.errors = [{instancePath:instancePath+"/files/" + i0+"/id",schemaPath:"#/$defs/File/properties/id/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];return false;}var valid3 = _errs14 === errors;}else {var valid3 = true;}if(valid3){if(data4.size !== undefined){const _errs16 = errors;if(typeof data4.size !== "string"){validate11.errors = [{instancePath:instancePath+"/files/" + i0+"/size",schemaPath:"#/$defs/File/properties/size/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid3 = _errs16 === errors;}else {var valid3 = true;}if(valid3){if(data4.url !== undefined){const _errs18 = errors;if(typeof data4.url !== "string"){validate11.errors = [{instancePath:instancePath+"/files/" + i0+"/url",schemaPath:"#/$defs/File/properties/url/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid3 = _errs18 === errors;}else {var valid3 = true;}}}}else {validate11.errors = [{instancePath:instancePath+"/files/" + i0,schemaPath:"#/$defs/File/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}var valid1 = _errs10 === errors;if(!valid1){break;}}}else {validate11.errors = [{instancePath:instancePath+"/files",schemaPath:"#/properties/files/type",keyword:"type",params:{type: "array"},message:"must be array"}];return false;}}var valid0 = _errs8 === errors;}else {var valid0 = true;}if(valid0){if(data.id !== undefined){let data8 = data.id;const _errs20 = errors;if(!(((typeof data8 == "number") && (!(data8 % 1) && !isNaN(data8))) && (isFinite(data8)))){validate11.errors = [{instancePath:instancePath+"/id",schemaPath:"#/properties/id/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];return false;}var valid0 = _errs20 === errors;}else {var valid0 = true;}if(valid0){if(data.publishedBy !== undefined){const _errs22 = errors;if(typeof data.publishedBy !== "string"){validate11.errors = [{instancePath:instancePath+"/publishedBy",schemaPath:"#/properties/publishedBy/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid0 = _errs22 === errors;}else {var valid0 = true;}if(valid0){if(data.publishedDate !== undefined){const _errs24 = errors;if(typeof data.publishedDate !== "string"){validate11.errors = [{instancePath:instancePath+"/publishedDate",schemaPath:"#/properties/publishedDate/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid0 = _errs24 === errors;}else {var valid0 = true;}if(valid0){if(data.title !== undefined){const _errs26 = errors;if(typeof data.title !== "string"){validate11.errors = [{instancePath:instancePath+"/title",schemaPath:"#/properties/title/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid0 = _errs26 === errors;}else {var valid0 = true;}if(valid0){if(data.type !== undefined){const _errs28 = errors;if(typeof data.type !== "string"){validate11.errors = [{instancePath:instancePath+"/type",schemaPath:"#/properties/type/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid0 = _errs28 === errors;}else {var valid0 = true;}}}}}}}}}}else {validate11.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}validate11.errors = vErrors;return errors === 0;}function validate10(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){let vErrors = null;let errors = 0;if(errors === 0){if(data && typeof data == "object" && !Array.isArray(data)){if(data.acronym !== undefined){const _errs2 = errors;if(typeof data.acronym !== "string"){validate10.errors = [{instancePath:instancePath+"/acronym",schemaPath:"#/properties/acronym/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid0 = _errs2 === errors;}else {var valid0 = true;}if(valid0){if(data.additionalTas !== undefined){let data1 = data.additionalTas;const _errs4 = errors;if(errors === _errs4){if(Array.isArray(data1)){var valid1 = true;const len0 = data1.length;for(let i0=0; i0<len0; i0++){let data2 = data1[i0];const _errs6 = errors;const _errs7 = errors;if(errors === _errs7){if(data2 && typeof data2 == "object" && !Array.isArray(data2)){if(data2.code !== undefined){const _errs10 = errors;if(typeof data2.code !== "string"){validate10.errors = [{instancePath:instancePath+"/additionalTas/" + i0+"/code",schemaPath:"#/$defs/TechnologyArea/properties/code/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid3 = _errs10 === errors;}else {var valid3 = true;}if(valid3){if(data2.id !== undefined){let data4 = data2.id;const _errs12 = errors;if(!(((typeof data4 == "number") && (!(data4 % 1) && !isNaN(data4))) && (isFinite(data4)))){validate10.errors = [{instancePath:instancePath+"/additionalTas/" + i0+"/id",schemaPath:"#/$defs/TechnologyArea/properties/id/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];return false;}var valid3 = _errs12 === errors;}else {var valid3 = true;}if(valid3){if(data2.name !== undefined){const _errs14 = errors;if(typeof data2.name !== "string"){validate10.errors = [{instancePath:instancePath+"/additionalTas/" + i0+"/name",schemaPath:"#/$defs/TechnologyArea/properties/name/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid3 = _errs14 === errors;}else {var valid3 = true;}}}}else {validate10.errors = [{instancePath:instancePath+"/additionalTas/" + i0,schemaPath:"#/$defs/TechnologyArea/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}var valid1 = _errs6 === errors;if(!valid1){break;}}}else {validate10.errors = [{instancePath:instancePath+"/additionalTas",schemaPath:"#/properties/additionalTas/type",keyword:"type",params:{type: "array"},message:"must be array"}];return false;}}var valid0 = _errs4 === errors;}else {var valid0 = true;}if(valid0){if(data.benefits !== undefined){const _errs16 = errors;if(typeof data.benefits !== "string"){validate10.errors = [{instancePath:instancePath+"/benefits",schemaPath:"#/properties/benefits/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid0 = _errs16 === errors;}else {var valid0 = true;}if(valid0){if(data.closeoutDocuments !== undefined){let data7 = data.closeoutDocuments;const _errs18 = errors;if(errors === _errs18){if(Array.isArray(data7)){var valid4 = true;const len1 = data7.length;for(let i1=0; i1<len1; i1++){const _errs20 = errors;if(typeof data7[i1] !== "string"){validate10.errors = [{instancePath:instancePath+"/closeoutDocuments/" + i1,schemaPath:"#/$defs/CloseoutDocument/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid4 = _errs20 === errors;if(!valid4){break;}}}else {validate10.errors = [{instancePath:instancePath+"/closeoutDocuments",schemaPath:"#/properties/closeoutDocuments/type",keyword:"type",params:{type: "array"},message:"must be array"}];return false;}}var valid0 = _errs18 === errors;}else {var valid0 = true;}if(valid0){if(data.closeoutSummary !== undefined){const _errs23 = errors;if(typeof data.closeoutSummary !== "string"){validate10.errors = [{instancePath:instancePath+"/closeoutSummary",schemaPath:"#/properties/closeoutSummary/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid0 = _errs23 === errors;}else {var valid0 = true;}if(valid0){if(data.coFundingPartners !== undefined){let data10 = data.coFundingPartners;const _errs25 = errors;if(errors === _errs25){if(Array.isArray(data10)){var valid6 = true;const len2 = data10.length;for(let i2=0; i2<len2; i2++){let data11 = data10[i2];const _errs27 = errors;const _errs28 = errors;if(errors === _errs28){if(data11 && typeof data11 == "object" && !Array.isArray(data11)){if(data11.acronym !== undefined){const _errs31 = errors;if(typeof data11.acronym !== "string"){validate10.errors = [{instancePath:instancePath+"/coFundingPartners/" + i2+"/acronym",schemaPath:"#/$defs/Organization/properties/acronym/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid8 = _errs31 === errors;}else {var valid8 = true;}if(valid8){if(data11.city !== undefined){const _errs33 = errors;if(typeof data11.city !== "string"){validate10.errors = [{instancePath:instancePath+"/coFundingPartners/" + i2+"/city",schemaPath:"#/$defs/Organization/properties/city/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid8 = _errs33 === errors;}else {var valid8 = true;}if(valid8){if(data11.name !== undefined){const _errs35 = errors;if(typeof data11.name !== "string"){validate10.errors = [{instancePath:instancePath+"/coFundingPartners/" + i2+"/name",schemaPath:"#/$defs/Organization/properties/name/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid8 = _errs35 === errors;}else {var valid8 = true;}if(valid8){if(data11.state !== undefined){const _errs37 = errors;if(typeof data11.state !== "string"){validate10.errors = [{instancePath:instancePath+"/coFundingPartners/" + i2+"/state",schemaPath:"#/$defs/Organization/properties/state/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid8 = _errs37 === errors;}else {var valid8 = true;}}}}}else {validate10.errors = [{instancePath:instancePath+"/coFundingPartners/" + i2,schemaPath:"#/$defs/Organization/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}var valid6 = _errs27 === errors;if(!valid6){break;}}}else {validate10.errors = [{instancePath:instancePath+"/coFundingPartners",schemaPath:"#/properties/coFundingPartners/type",keyword:"type",params:{type: "array"},message:"must be array"}];return false;}}var valid0 = _errs25 === errors;}else {var valid0 = true;}if(valid0){if(data.coInvestigators !== undefined){let data16 = data.coInvestigators;const _errs39 = errors;if(errors === _errs39){if(Array.isArray(data16)){var valid9 = true;const len3 = data16.length;for(let i3=0; i3<len3; i3++){const _errs41 = errors;if(typeof data16[i3] !== "string"){validate10.errors = [{instancePath:instancePath+"/coInvestigators/" + i3,schemaPath:"#/$defs/CoInvestigator/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid9 = _errs41 === errors;if(!valid9){break;}}}else {validate10.errors = [{instancePath:instancePath+"/coInvestigators",schemaPath:"#/properties/coInvestigators/type",keyword:"type",params:{type: "array"},message:"must be array"}];return false;}}var valid0 = _errs39 === errors;}else {var valid0 = true;}if(valid0){if(data.description !== undefined){const _errs44 = errors;if(typeof data.description !== "string"){validate10.errors = [{instancePath:instancePath+"/description",schemaPath:"#/properties/description/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid0 = _errs44 === errors;}else {var valid0 = true;}if(valid0){if(data.destinations !== undefined){let data19 = data.destinations;const _errs46 = errors;if(errors === _errs46){if(Array.isArray(data19)){var valid11 = true;const len4 = data19.length;for(let i4=0; i4<len4; i4++){const _errs48 = errors;if(typeof data19[i4] !== "string"){validate10.errors = [{instancePath:instancePath+"/destinations/" + i4,schemaPath:"#/$defs/Destination/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid11 = _errs48 === errors;if(!valid11){break;}}}else {validate10.errors = [{instancePath:instancePath+"/destinations",schemaPath:"#/properties/destinations/type",keyword:"type",params:{type: "array"},message:"must be array"}];return false;}}var valid0 = _errs46 === errors;}else {var valid0 = true;}if(valid0){if(data.endDate !== undefined){const _errs51 = errors;if(typeof data.endDate !== "string"){validate10.errors = [{instancePath:instancePath+"/endDate",schemaPath:"#/properties/endDate/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid0 = _errs51 === errors;}else {var valid0 = true;}if(valid0){if(data.id !== undefined){let data22 = data.id;const _errs53 = errors;if(!(((typeof data22 == "number") && (!(data22 % 1) && !isNaN(data22))) && (isFinite(data22)))){validate10.errors = [{instancePath:instancePath+"/id",schemaPath:"#/properties/id/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];return false;}var valid0 = _errs53 === errors;}else {var valid0 = true;}if(valid0){if(data.lastUpdated !== undefined){const _errs55 = errors;if(errors === _errs55){if(errors === _errs55){if(!(typeof data.lastUpdated === "string")){validate10.errors = [{instancePath:instancePath+"/lastUpdated",schemaPath:"#/properties/lastUpdated/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}}var valid0 = _errs55 === errors;}else {var valid0 = true;}if(valid0){if(data.leadOrganization !== undefined){let data24 = data.leadOrganization;const _errs57 = errors;const _errs58 = errors;if(errors === _errs58){if(data24 && typeof data24 == "object" && !Array.isArray(data24)){if(data24.acronym !== undefined){const _errs61 = errors;if(typeof data24.acronym !== "string"){validate10.errors = [{instancePath:instancePath+"/leadOrganization/acronym",schemaPath:"#/$defs/Organization/properties/acronym/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid14 = _errs61 === errors;}else {var valid14 = true;}if(valid14){if(data24.city !== undefined){const _errs63 = errors;if(typeof data24.city !== "string"){validate10.errors = [{instancePath:instancePath+"/leadOrganization/city",schemaPath:"#/$defs/Organization/properties/city/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid14 = _errs63 === errors;}else {var valid14 = true;}if(valid14){if(data24.name !== undefined){const _errs65 = errors;if(typeof data24.name !== "string"){validate10.errors = [{instancePath:instancePath+"/leadOrganization/name",schemaPath:"#/$defs/Organization/properties/name/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid14 = _errs65 === errors;}else {var valid14 = true;}if(valid14){if(data24.state !== undefined){const _errs67 = errors;if(typeof data24.state !== "string"){validate10.errors = [{instancePath:instancePath+"/leadOrganization/state",schemaPath:"#/$defs/Organization/properties/state/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid14 = _errs67 === errors;}else {var valid14 = true;}}}}}else {validate10.errors = [{instancePath:instancePath+"/leadOrganization",schemaPath:"#/$defs/Organization/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}var valid0 = _errs57 === errors;}else {var valid0 = true;}if(valid0){if(data.libraryItems !== undefined){let data29 = data.libraryItems;const _errs69 = errors;if(errors === _errs69){if(Array.isArray(data29)){var valid15 = true;const len5 = data29.length;for(let i5=0; i5<len5; i5++){const _errs71 = errors;if(!(validate11(data29[i5], {instancePath:instancePath+"/libraryItems/" + i5,parentData:data29,parentDataProperty:i5,rootData}))){vErrors = vErrors === null ? validate11.errors : vErrors.concat(validate11.errors);errors = vErrors.length;}var valid15 = _errs71 === errors;if(!valid15){break;}}}else {validate10.errors = [{instancePath:instancePath+"/libraryItems",schemaPath:"#/properties/libraryItems/type",keyword:"type",params:{type: "array"},message:"must be array"}];return false;}}var valid0 = _errs69 === errors;}else {var valid0 = true;}if(valid0){if(data.primaryTas !== undefined){let data31 = data.primaryTas;const _errs72 = errors;if(errors === _errs72){if(Array.isArray(data31)){var valid16 = true;const len6 = data31.length;for(let i6=0; i6<len6; i6++){let data32 = data31[i6];const _errs74 = errors;const _errs75 = errors;if(errors === _errs75){if(data32 && typeof data32 == "object" && !Array.isArray(data32)){if(data32.code !== undefined){const _errs78 = errors;if(typeof data32.code !== "string"){validate10.errors = [{instancePath:instancePath+"/primaryTas/" + i6+"/code",schemaPath:"#/$defs/TechnologyArea/properties/code/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid18 = _errs78 === errors;}else {var valid18 = true;}if(valid18){if(data32.id !== undefined){let data34 = data32.id;const _errs80 = errors;if(!(((typeof data34 == "number") && (!(data34 % 1) && !isNaN(data34))) && (isFinite(data34)))){validate10.errors = [{instancePath:instancePath+"/primaryTas/" + i6+"/id",schemaPath:"#/$defs/TechnologyArea/properties/id/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];return false;}var valid18 = _errs80 === errors;}else {var valid18 = true;}if(valid18){if(data32.name !== undefined){const _errs82 = errors;if(typeof data32.name !== "string"){validate10.errors = [{instancePath:instancePath+"/primaryTas/" + i6+"/name",schemaPath:"#/$defs/TechnologyArea/properties/name/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid18 = _errs82 === errors;}else {var valid18 = true;}}}}else {validate10.errors = [{instancePath:instancePath+"/primaryTas/" + i6,schemaPath:"#/$defs/TechnologyArea/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}var valid16 = _errs74 === errors;if(!valid16){break;}}}else {validate10.errors = [{instancePath:instancePath+"/primaryTas",schemaPath:"#/properties/primaryTas/type",keyword:"type",params:{type: "array"},message:"must be array"}];return false;}}var valid0 = _errs72 === errors;}else {var valid0 = true;}if(valid0){if(data.principalInvestigators !== undefined){let data36 = data.principalInvestigators;const _errs84 = errors;if(errors === _errs84){if(Array.isArray(data36)){var valid19 = true;const len7 = data36.length;for(let i7=0; i7<len7; i7++){const _errs86 = errors;if(typeof data36[i7] !== "string"){validate10.errors = [{instancePath:instancePath+"/principalInvestigators/" + i7,schemaPath:"#/$defs/PrincipalInvestigator/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid19 = _errs86 === errors;if(!valid19){break;}}}else {validate10.errors = [{instancePath:instancePath+"/principalInvestigators",schemaPath:"#/properties/principalInvestigators/type",keyword:"type",params:{type: "array"},message:"must be array"}];return false;}}var valid0 = _errs84 === errors;}else {var valid0 = true;}if(valid0){if(data.programDirectors !== undefined){let data38 = data.programDirectors;const _errs89 = errors;if(errors === _errs89){if(Array.isArray(data38)){var valid21 = true;const len8 = data38.length;for(let i8=0; i8<len8; i8++){const _errs91 = errors;if(typeof data38[i8] !== "string"){validate10.errors = [{instancePath:instancePath+"/programDirectors/" + i8,schemaPath:"#/$defs/ProgramDirector/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid21 = _errs91 === errors;if(!valid21){break;}}}else {validate10.errors = [{instancePath:instancePath+"/programDirectors",schemaPath:"#/properties/programDirectors/type",keyword:"type",params:{type: "array"},message:"must be array"}];return false;}}var valid0 = _errs89 === errors;}else {var valid0 = true;}if(valid0){if(data.programManagers !== undefined){let data40 = data.programManagers;const _errs94 = errors;if(errors === _errs94){if(Array.isArray(data40)){var valid23 = true;const len9 = data40.length;for(let i9=0; i9<len9; i9++){const _errs96 = errors;if(typeof data40[i9] !== "string"){validate10.errors = [{instancePath:instancePath+"/programManagers/" + i9,schemaPath:"#/$defs/ProgramManager/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid23 = _errs96 === errors;if(!valid23){break;}}}else {validate10.errors = [{instancePath:instancePath+"/programManagers",schemaPath:"#/properties/programManagers/type",keyword:"type",params:{type: "array"},message:"must be array"}];return false;}}var valid0 = _errs94 === errors;}else {var valid0 = true;}if(valid0){if(data.projectManagers !== undefined){let data42 = data.projectManagers;const _errs99 = errors;if(errors === _errs99){if(Array.isArray(data42)){var valid25 = true;const len10 = data42.length;for(let i10=0; i10<len10; i10++){const _errs101 = errors;if(typeof data42[i10] !== "string"){validate10.errors = [{instancePath:instancePath+"/projectManagers/" + i10,schemaPath:"#/$defs/ProjectManager/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid25 = _errs101 === errors;if(!valid25){break;}}}else {validate10.errors = [{instancePath:instancePath+"/projectManagers",schemaPath:"#/properties/projectManagers/type",keyword:"type",params:{type: "array"},message:"must be array"}];return false;}}var valid0 = _errs99 === errors;}else {var valid0 = true;}if(valid0){if(data.responsibleMissionDirectorateOrOffice !== undefined){const _errs104 = errors;if(typeof data.responsibleMissionDirectorateOrOffice !== "string"){validate10.errors = [{instancePath:instancePath+"/responsibleMissionDirectorateOrOffice",schemaPath:"#/properties/responsibleMissionDirectorateOrOffice/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid0 = _errs104 === errors;}else {var valid0 = true;}if(valid0){if(data.responsibleProgram !== undefined){const _errs106 = errors;if(typeof data.responsibleProgram !== "string"){validate10.errors = [{instancePath:instancePath+"/responsibleProgram",schemaPath:"#/properties/responsibleProgram/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid0 = _errs106 === errors;}else {var valid0 = true;}if(valid0){if(data.startDate !== undefined){const _errs108 = errors;if(typeof data.startDate !== "string"){validate10.errors = [{instancePath:instancePath+"/startDate",schemaPath:"#/properties/startDate/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid0 = _errs108 === errors;}else {var valid0 = true;}if(valid0){if(data.status !== undefined){const _errs110 = errors;if(typeof data.status !== "string"){validate10.errors = [{instancePath:instancePath+"/status",schemaPath:"#/properties/status/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid0 = _errs110 === errors;}else {var valid0 = true;}if(valid0){if(data.supportedMissionType !== undefined){const _errs112 = errors;if(typeof data.supportedMissionType !== "string"){validate10.errors = [{instancePath:instancePath+"/supportedMissionType",schemaPath:"#/properties/supportedMissionType/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid0 = _errs112 === errors;}else {var valid0 = true;}if(valid0){if(data.supportingOrganizations !== undefined){let data49 = data.supportingOrganizations;const _errs114 = errors;if(errors === _errs114){if(Array.isArray(data49)){var valid27 = true;const len11 = data49.length;for(let i11=0; i11<len11; i11++){let data50 = data49[i11];const _errs116 = errors;const _errs117 = errors;if(errors === _errs117){if(data50 && typeof data50 == "object" && !Array.isArray(data50)){if(data50.acronym !== undefined){const _errs120 = errors;if(typeof data50.acronym !== "string"){validate10.errors = [{instancePath:instancePath+"/supportingOrganizations/" + i11+"/acronym",schemaPath:"#/$defs/Organization/properties/acronym/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid29 = _errs120 === errors;}else {var valid29 = true;}if(valid29){if(data50.city !== undefined){const _errs122 = errors;if(typeof data50.city !== "string"){validate10.errors = [{instancePath:instancePath+"/supportingOrganizations/" + i11+"/city",schemaPath:"#/$defs/Organization/properties/city/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid29 = _errs122 === errors;}else {var valid29 = true;}if(valid29){if(data50.name !== undefined){const _errs124 = errors;if(typeof data50.name !== "string"){validate10.errors = [{instancePath:instancePath+"/supportingOrganizations/" + i11+"/name",schemaPath:"#/$defs/Organization/properties/name/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid29 = _errs124 === errors;}else {var valid29 = true;}if(valid29){if(data50.state !== undefined){const _errs126 = errors;if(typeof data50.state !== "string"){validate10.errors = [{instancePath:instancePath+"/supportingOrganizations/" + i11+"/state",schemaPath:"#/$defs/Organization/properties/state/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid29 = _errs126 === errors;}else {var valid29 = true;}}}}}else {validate10.errors = [{instancePath:instancePath+"/supportingOrganizations/" + i11,schemaPath:"#/$defs/Organization/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}var valid27 = _errs116 === errors;if(!valid27){break;}}}else {validate10.errors = [{instancePath:instancePath+"/supportingOrganizations",schemaPath:"#/properties/supportingOrganizations/type",keyword:"type",params:{type: "array"},message:"must be array"}];return false;}}var valid0 = _errs114 === errors;}else {var valid0 = true;}if(valid0){if(data.technologyMaturityCurrent !== undefined){const _errs128 = errors;if(typeof data.technologyMaturityCurrent !== "string"){validate10.errors = [{instancePath:instancePath+"/technologyMaturityCurrent",schemaPath:"#/properties/technologyMaturityCurrent/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid0 = _errs128 === errors;}else {var valid0 = true;}if(valid0){if(data.technologyMaturityEnd !== undefined){const _errs130 = errors;if(typeof data.technologyMaturityEnd !== "string"){validate10.errors = [{instancePath:instancePath+"/technologyMaturityEnd",schemaPath:"#/properties/technologyMaturityEnd/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid0 = _errs130 === errors;}else {var valid0 = true;}if(valid0){if(data.technologyMaturityStart !== undefined){const _errs132 = errors;if(typeof data.technologyMaturityStart !== "string"){validate10.errors = [{instancePath:instancePath+"/technologyMaturityStart",schemaPath:"#/properties/technologyMaturityStart/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid0 = _errs132 === errors;}else {var valid0 = true;}if(valid0){if(data.title !== undefined){const _errs134 = errors;if(typeof data.title !== "string"){validate10.errors = [{instancePath:instancePath+"/title",schemaPath:"#/properties/title/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid0 = _errs134 === errors;}else {var valid0 = true;}if(valid0){if(data.website !== undefined){const _errs136 = errors;if(typeof data.website !== "string"){validate10.errors = [{instancePath:instancePath+"/website",schemaPath:"#/properties/website/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid0 = _errs136 === errors;}else {var valid0 = true;}if(valid0){if(data.workLocations !== undefined){let data60 = data.workLocations;const _errs138 = errors;if(errors === _errs138){if(Array.isArray(data60)){var valid30 = true;const len12 = data60.length;for(let i12=0; i12<len12; i12++){const _errs140 = errors;if(typeof data60[i12] !== "string"){validate10.errors = [{instancePath:instancePath+"/workLocations/" + i12,schemaPath:"#/$defs/WorkLocation/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid30 = _errs140 === errors;if(!valid30){break;}}}else {validate10.errors = [{instancePath:instancePath+"/workLocations",schemaPath:"#/properties/workLocations/type",keyword:"type",params:{type: "array"},message:"must be array"}];return false;}}var valid0 = _errs138 === errors;}else {var valid0 = true;}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}else {validate10.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}validate10.errors = vErrors;return errors === 0;};validate.schema=schema11;",
  },
}
`;
