// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[` output generation 1`] = `
{
  "cleanFn": [Function],
  "outputFiles": {
    "examples/restclients/xkcd/nullable/nullable.client.ts": "/**
 * Generated by @skyleague/therefore@v1.0.0-local
 * Do not manually touch this
 */
/* eslint-disable */

import { got } from 'got'
import type { CancelableRequest, Got, Options, OptionsInit, Response } from 'got'

import { Comic } from './nullable.type.js'

/**
 * XKCD
 *
 * Webcomic of romance, sarcasm, math, and language.
 */
export class XKCDNullable {
    public client: Got

    public constructor({
        prefixUrl = 'http://xkcd.com/',
        options,
    }: {
        prefixUrl?: string | 'http://xkcd.com/'
        options?: Options | OptionsInit
    } = {}) {
        this.client = got.extend(...[{ prefixUrl }, options].filter((o): o is Options => o !== undefined))
    }

    /**
     * Fetch current comic and metadata.
     */
    public getInfo0Json() {
        return this.awaitResponse(
            this.client.get('info.0.json', {
                responseType: 'json',
            }),
            {
                200: Comic,
            },
        )
    }

    /**
     * Fetch comics and metadata  by comic id.
     */
    public getInfo0JsonByComicId({ path }: { path: { comicId: string } }) {
        return this.awaitResponse(
            this.client.get(\`\${path.comicId}/info.0.json\`, {
                responseType: 'json',
            }),
            {
                200: Comic,
            },
        )
    }

    public async awaitResponse<
        T,
        S extends Record<PropertyKey, undefined | { is: (o: unknown) => o is T; assert?: (o: unknown) => void }>,
    >(response: CancelableRequest<Response>, schemas: S) {
        type FilterStartingWith<S extends PropertyKey, T extends string> = S extends number | string
            ? \`\${S}\` extends \`\${T}\${infer _X}\`
                ? S
                : never
            : never
        type InferSchemaType<T> = T extends { is: (o: unknown) => o is infer S } ? S : never
        const result = await response
        const schema = schemas[result.statusCode] ?? schemas.default
        schema?.assert?.(result.body)
        return {
            statusCode: result.statusCode,
            headers: result.headers,
            body: result.body as InferSchemaType<S[keyof Pick<S, FilterStartingWith<keyof S, '2' | 'default'>>]>,
        }
    }
}
",
    "examples/restclients/xkcd/nullable/nullable.type.ts": "/**
 * Generated by @skyleague/therefore@v1.0.0-local
 * Do not manually touch this
 */
/* eslint-disable */

import { ValidationError, default as AjvValidator } from 'ajv'
import type { DefinedError } from 'ajv'

import ComicSchema from './schemas/comic.schema.json' with { type: 'json' }

export interface Comic {
    alt?: string | null | undefined
    day?: string | null | undefined
    img?: string | null | undefined
    link?: string | null | undefined
    month?: string | null | undefined
    news?: string | null | undefined
    num?: number | null | undefined
    safe_title?: string | null | undefined
    title?: string | null | undefined
    transcript?: string | null | undefined
    year?: string | null | undefined
}

export const Comic = {
    validate: new AjvValidator.default({
        strict: true,
        strictSchema: false,
        strictTypes: true,
        strictTuples: false,
        useDefaults: true,
        logger: false,
        loopRequired: 5,
        loopEnum: 5,
        multipleOfPrecision: 4,
        code: { esm: true },
    }).compile<Comic>(ComicSchema),
    schema: ComicSchema,
    get errors() {
        return Comic.validate.errors ?? undefined
    },
    is: (o: unknown): o is Comic => Comic.validate(o) === true,
    assert: (o: unknown) => {
        if (!Comic.validate(o)) {
            throw new ValidationError(Comic.errors ?? [])
        }
    },
    parse: (o: unknown): { right: Comic } | { left: DefinedError[] } => {
        if (Comic.is(o)) {
            return { right: o }
        }
        return { left: (Comic.errors ?? []) as DefinedError[] }
    },
} as const
",
    "examples/restclients/xkcd/nullable/schemas/comic.schema.json": "{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "Comic",
  "type": "object",
  "properties": {
    "alt": {
      "type": "string",
      "nullable": true
    },
    "day": {
      "type": "string",
      "nullable": true
    },
    "img": {
      "type": "string",
      "nullable": true
    },
    "link": {
      "type": "string",
      "nullable": true
    },
    "month": {
      "type": "string",
      "nullable": true
    },
    "news": {
      "type": "string",
      "nullable": true
    },
    "num": {
      "type": "number",
      "nullable": true
    },
    "safe_title": {
      "type": "string",
      "nullable": true
    },
    "title": {
      "type": "string",
      "nullable": true
    },
    "transcript": {
      "type": "string",
      "nullable": true
    },
    "year": {
      "type": "string",
      "nullable": true
    }
  },
  "additionalProperties": true
}
",
    "examples/restclients/xkcd/schemas/comic.schema.js": "/* eslint-disable */
// @ts-nocheck
/**
 * Generated by Ajv https://ajv.js.org/guide/managing-schemas.html#standalone-validation-code
 */
"use strict";
/** @type {unknown} */
export const validate = validate10;export default validate10;const schema11 = {"$schema":"http://json-schema.org/draft-07/schema#","title":"Comic","type":"object","properties":{"alt":{"type":"string"},"day":{"type":"string"},"img":{"type":"string"},"link":{"type":"string"},"month":{"type":"string"},"news":{"type":"string"},"num":{"type":"number"},"safe_title":{"type":"string"},"title":{"type":"string"},"transcript":{"type":"string"},"year":{"type":"string"}},"additionalProperties":true};function validate10(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){let vErrors = null;let errors = 0;if(errors === 0){if(data && typeof data == "object" && !Array.isArray(data)){if(data.alt !== undefined){const _errs2 = errors;if(typeof data.alt !== "string"){validate10.errors = [{instancePath:instancePath+"/alt",schemaPath:"#/properties/alt/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid0 = _errs2 === errors;}else {var valid0 = true;}if(valid0){if(data.day !== undefined){const _errs4 = errors;if(typeof data.day !== "string"){validate10.errors = [{instancePath:instancePath+"/day",schemaPath:"#/properties/day/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid0 = _errs4 === errors;}else {var valid0 = true;}if(valid0){if(data.img !== undefined){const _errs6 = errors;if(typeof data.img !== "string"){validate10.errors = [{instancePath:instancePath+"/img",schemaPath:"#/properties/img/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid0 = _errs6 === errors;}else {var valid0 = true;}if(valid0){if(data.link !== undefined){const _errs8 = errors;if(typeof data.link !== "string"){validate10.errors = [{instancePath:instancePath+"/link",schemaPath:"#/properties/link/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid0 = _errs8 === errors;}else {var valid0 = true;}if(valid0){if(data.month !== undefined){const _errs10 = errors;if(typeof data.month !== "string"){validate10.errors = [{instancePath:instancePath+"/month",schemaPath:"#/properties/month/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid0 = _errs10 === errors;}else {var valid0 = true;}if(valid0){if(data.news !== undefined){const _errs12 = errors;if(typeof data.news !== "string"){validate10.errors = [{instancePath:instancePath+"/news",schemaPath:"#/properties/news/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid0 = _errs12 === errors;}else {var valid0 = true;}if(valid0){if(data.num !== undefined){let data6 = data.num;const _errs14 = errors;if(!((typeof data6 == "number") && (isFinite(data6)))){validate10.errors = [{instancePath:instancePath+"/num",schemaPath:"#/properties/num/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid0 = _errs14 === errors;}else {var valid0 = true;}if(valid0){if(data.safe_title !== undefined){const _errs16 = errors;if(typeof data.safe_title !== "string"){validate10.errors = [{instancePath:instancePath+"/safe_title",schemaPath:"#/properties/safe_title/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid0 = _errs16 === errors;}else {var valid0 = true;}if(valid0){if(data.title !== undefined){const _errs18 = errors;if(typeof data.title !== "string"){validate10.errors = [{instancePath:instancePath+"/title",schemaPath:"#/properties/title/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid0 = _errs18 === errors;}else {var valid0 = true;}if(valid0){if(data.transcript !== undefined){const _errs20 = errors;if(typeof data.transcript !== "string"){validate10.errors = [{instancePath:instancePath+"/transcript",schemaPath:"#/properties/transcript/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid0 = _errs20 === errors;}else {var valid0 = true;}if(valid0){if(data.year !== undefined){const _errs22 = errors;if(typeof data.year !== "string"){validate10.errors = [{instancePath:instancePath+"/year",schemaPath:"#/properties/year/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid0 = _errs22 === errors;}else {var valid0 = true;}}}}}}}}}}}}else {validate10.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}validate10.errors = vErrors;return errors === 0;};validate.schema=schema11;",
    "examples/restclients/xkcd/xkcd.client.ts": "/**
 * Generated by @skyleague/therefore@v1.0.0-local
 * Do not manually touch this
 */
/* eslint-disable */

import { got } from 'got'
import type { CancelableRequest, Got, Options, OptionsInit, Response } from 'got'

import { Comic } from './xkcd.type.js'

/**
 * XKCD
 *
 * Webcomic of romance, sarcasm, math, and language.
 */
export class XKCD {
    public client: Got

    public constructor({
        prefixUrl = 'http://xkcd.com/',
        options,
    }: {
        prefixUrl?: string | 'http://xkcd.com/'
        options?: Options | OptionsInit
    } = {}) {
        this.client = got.extend(...[{ prefixUrl }, options].filter((o): o is Options => o !== undefined))
    }

    /**
     * Fetch current comic and metadata.
     */
    public getInfo0Json() {
        return this.awaitResponse(
            this.client.get('info.0.json', {
                responseType: 'json',
            }),
            {
                200: Comic,
            },
        )
    }

    /**
     * Fetch comics and metadata  by comic id.
     */
    public getInfo0JsonByComicId({ path }: { path: { comicId: string } }) {
        return this.awaitResponse(
            this.client.get(\`\${path.comicId}/info.0.json\`, {
                responseType: 'json',
            }),
            {
                200: Comic,
            },
        )
    }

    public async awaitResponse<
        T,
        S extends Record<PropertyKey, undefined | { is: (o: unknown) => o is T; assert?: (o: unknown) => void }>,
    >(response: CancelableRequest<Response>, schemas: S) {
        type FilterStartingWith<S extends PropertyKey, T extends string> = S extends number | string
            ? \`\${S}\` extends \`\${T}\${infer _X}\`
                ? S
                : never
            : never
        type InferSchemaType<T> = T extends { is: (o: unknown) => o is infer S } ? S : never
        const result = await response
        const schema = schemas[result.statusCode] ?? schemas.default
        schema?.assert?.(result.body)
        return {
            statusCode: result.statusCode,
            headers: result.headers,
            body: result.body as InferSchemaType<S[keyof Pick<S, FilterStartingWith<keyof S, '2' | 'default'>>]>,
        }
    }
}
",
    "examples/restclients/xkcd/xkcd.type.ts": "/**
 * Generated by @skyleague/therefore@v1.0.0-local
 * Do not manually touch this
 */
/* eslint-disable */

import { ValidationError } from 'ajv'
import type { DefinedError, ValidateFunction } from 'ajv'

import { validate as ComicValidator } from './schemas/comic.schema.js'

export interface Comic {
    alt?: string | undefined
    day?: string | undefined
    img?: string | undefined
    link?: string | undefined
    month?: string | undefined
    news?: string | undefined
    num?: number | undefined
    safe_title?: string | undefined
    title?: string | undefined
    transcript?: string | undefined
    year?: string | undefined
}

export const Comic = {
    validate: ComicValidator as ValidateFunction<Comic>,
    get schema() {
        return Comic.validate.schema
    },
    get errors() {
        return Comic.validate.errors ?? undefined
    },
    is: (o: unknown): o is Comic => Comic.validate(o) === true,
    assert: (o: unknown) => {
        if (!Comic.validate(o)) {
            throw new ValidationError(Comic.errors ?? [])
        }
    },
    parse: (o: unknown): { right: Comic } | { left: DefinedError[] } => {
        if (Comic.is(o)) {
            return { right: o }
        }
        return { left: (Comic.errors ?? []) as DefinedError[] }
    },
} as const
",
  },
}
`;
