// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`client > client 1`] = `
{
  "cleanFn": [Function],
  "outputFiles": {
    "examples/edges/client.client.ts": "/**
* Generated by @skyleague/therefore@v1.0.0-local
* Do not manually touch this
*/
/* eslint-disable */

import type { IncomingHttpHeaders } from 'node:http'

import type { DefinedError } from 'ajv'
import { got } from 'got'
import type { CancelableRequest, Got, Options, OptionsInit, Response } from 'got'

import { GetEmployeesResponse200, GetEmployeesResponseDefault } from './client.type.js'

/**
 * openapi
 */
export class DefaultTestClient {
    public client: Got

    public constructor(
    {
        prefixUrl,
        options,
        client = got
    }: {
        prefixUrl: string,
        options?: Options | OptionsInit,
        client?: Got
    }) {
        this.client = client.extend(...[{ prefixUrl, throwHttpErrors: false }, options].filter((o): o is Options => o !== undefined))
    }


    /**
     * GET /employees
     */
    public getEmployees(): Promise<
    | SuccessResponse<"201" | "202" | "203" | "204" | "205" | "206" | "207" | "208" | "226", GetEmployeesResponseDefault>
    | SuccessResponse<'200', GetEmployeesResponse200>
    | FailureResponse<StatusCode<2>, string, 'response:body', IncomingHttpHeaders>
    | FailureResponse<StatusCode<1 | 3 | 4 | 5>, string, 'response:statuscode', IncomingHttpHeaders>
    >
    {
        return this.awaitResponse(this.client.get('employees', {
            responseType: 'json',
        }), {
            200: GetEmployeesResponse200,default: GetEmployeesResponseDefault,
        }) as ReturnType<this["getEmployees"]>
    }

    public async awaitResponse<I, S extends Record<PropertyKey, { parse: (o: I) => { left: DefinedError[] } | { right: unknown } }>>(response: 
    CancelableRequest<NoInfer<Response<I>>>
    , schemas: S) {
        const result = await response
        const status = result.statusCode < 200 ? 'informational' : result.statusCode < 300 ? 'success' : result.statusCode < 400 ? 'redirection' : result.statusCode < 500 ? 'client-error' : 'server-error'
        const validator = schemas[result.statusCode] ?? schemas.default
        const body = validator?.parse?.(result.body)
        if (result.statusCode < 200 || result.statusCode >= 300)
        {
            return {success: false as const, statusCode: result.statusCode.toString(), status, headers: result.headers, left: body !== undefined && 'right' in body ? body.right : result.body, validationErrors: body !== undefined && 'left' in body ? body.left : undefined, where: 'response:statuscode' } 
        }
        if (body === undefined || 'left' in body)
        {
            return {success: body === undefined, statusCode: result.statusCode.toString(), status, headers: result.headers, left: result.body, validationErrors: body?.left, where: 'response:body' }
        }
        return {success: true as const, statusCode: result.statusCode.toString(), status, headers: result.headers, right: result.body }
    }
}

/**
 * openapi
 */
export class DoubleSuccessClient {
    public client: Got

    public constructor(
    {
        prefixUrl,
        options,
        client = got
    }: {
        prefixUrl: string,
        options?: Options | OptionsInit,
        client?: Got
    }) {
        this.client = client.extend(...[{ prefixUrl, throwHttpErrors: false }, options].filter((o): o is Options => o !== undefined))
    }


    /**
     * GET /employees
     */
    public getEmployees(): Promise<
    | SuccessResponse<'200', unknown>
    | FailureResponse<StatusCode<2>, string, 'response:body', IncomingHttpHeaders>
    | FailureResponse<StatusCode<1 | 3 | 4 | 5>, string, 'response:statuscode', IncomingHttpHeaders>
    >
    {
        return this.awaitResponse(this.client.get('employees', {
            responseType: 'text',
        }), {
            200: { parse: (x: unknown) => ({ right: x }) },
        }) as ReturnType<this["getEmployees"]>
    }

    /**
     * GET /image
     */
    public getImage(): Promise<
    | SuccessResponse<'200', unknown>
    | SuccessResponse<'202', unknown>
    | FailureResponse<StatusCode<2>, string, 'response:body', IncomingHttpHeaders>
    | FailureResponse<StatusCode<1 | 3 | 4 | 5>, string, 'response:statuscode', IncomingHttpHeaders>
    >
    {
        return this.awaitResponse(this.client.get('image', {
            responseType: 'text',
        }), {
            200: { parse: (x: unknown) => ({ right: x }) },202: { parse: (x: unknown) => ({ right: x }) },
        }) as ReturnType<this["getImage"]>
    }

    public async awaitResponse<I, S extends Record<PropertyKey, { parse: (o: I) => { left: DefinedError[] } | { right: unknown } }>>(response: 
    CancelableRequest<NoInfer<Response<I>>>
    , schemas: S) {
        const result = await response
        const status = result.statusCode < 200 ? 'informational' : result.statusCode < 300 ? 'success' : result.statusCode < 400 ? 'redirection' : result.statusCode < 500 ? 'client-error' : 'server-error'
        const validator = schemas[result.statusCode] ?? schemas.default
        const body = validator?.parse?.(result.body)
        if (result.statusCode < 200 || result.statusCode >= 300)
        {
            return {success: false as const, statusCode: result.statusCode.toString(), status, headers: result.headers, left: body !== undefined && 'right' in body ? body.right : result.body, validationErrors: body !== undefined && 'left' in body ? body.left : undefined, where: 'response:statuscode' } 
        }
        if (body === undefined || 'left' in body)
        {
            return {success: body === undefined, statusCode: result.statusCode.toString(), status, headers: result.headers, left: result.body, validationErrors: body?.left, where: 'response:body' }
        }
        return {success: true as const, statusCode: result.statusCode.toString(), status, headers: result.headers, right: result.body }
    }
}

/**
 * openapi
 */
export class Edges {
    public client: Got

    public constructor(
    {
        prefixUrl,
        options,
        client = got
    }: {
        prefixUrl: string,
        options?: Options | OptionsInit,
        client?: Got
    }) {
        this.client = client.extend(...[{ prefixUrl, throwHttpErrors: false }, options].filter((o): o is Options => o !== undefined))
    }


    /**
     * GET /employees
     */
    public getEmployees(): Promise<
    | SuccessResponse<'200', unknown>
    | FailureResponse<StatusCode<2>, string, 'response:body', IncomingHttpHeaders>
    | FailureResponse<StatusCode<1 | 3 | 4 | 5>, string, 'response:statuscode', IncomingHttpHeaders>
    >
    {
        return this.awaitResponse(this.client.get('employees', {
            responseType: 'text',
        }), {
            200: { parse: (x: unknown) => ({ right: x }) },
        }) as ReturnType<this["getEmployees"]>
    }

    /**
     * GET /image
     */
    public getImage(): Promise<
    | SuccessResponse<'200', unknown>
    | FailureResponse<StatusCode<2>, string, 'response:body', IncomingHttpHeaders>
    | FailureResponse<StatusCode<1 | 3 | 4 | 5>, string, 'response:statuscode', IncomingHttpHeaders>
    >
    {
        return this.awaitResponse(this.client.get('image', {
            responseType: 'text',
        }), {
            200: { parse: (x: unknown) => ({ right: x }) },
        }) as ReturnType<this["getImage"]>
    }

    public async awaitResponse<I, S extends Record<PropertyKey, { parse: (o: I) => { left: DefinedError[] } | { right: unknown } }>>(response: 
    CancelableRequest<NoInfer<Response<I>>>
    , schemas: S) {
        const result = await response
        const status = result.statusCode < 200 ? 'informational' : result.statusCode < 300 ? 'success' : result.statusCode < 400 ? 'redirection' : result.statusCode < 500 ? 'client-error' : 'server-error'
        const validator = schemas[result.statusCode] ?? schemas.default
        const body = validator?.parse?.(result.body)
        if (result.statusCode < 200 || result.statusCode >= 300)
        {
            return {success: false as const, statusCode: result.statusCode.toString(), status, headers: result.headers, left: body !== undefined && 'right' in body ? body.right : result.body, validationErrors: body !== undefined && 'left' in body ? body.left : undefined, where: 'response:statuscode' } 
        }
        if (body === undefined || 'left' in body)
        {
            return {success: body === undefined, statusCode: result.statusCode.toString(), status, headers: result.headers, left: result.body, validationErrors: body?.left, where: 'response:body' }
        }
        return {success: true as const, statusCode: result.statusCode.toString(), status, headers: result.headers, right: result.body }
    }
}

export type Status<Major> = Major extends string ? Major extends \`1\${number}\`? 'informational': Major extends \`2\${number}\` ? 'success' : Major extends \`3\${number}\` ? 'redirection' : Major extends \`4\${number}\` ? 'client-error' : 'server-error' : undefined
export interface SuccessResponse<StatusCode extends string, T> { success: true; statusCode: StatusCode; status: Status<StatusCode>; headers: IncomingHttpHeaders; right: T }
export interface FailureResponse<StatusCode = string, T = unknown, Where = never, Headers = IncomingHttpHeaders> {
success: false
statusCode: StatusCode
status: Status<StatusCode>
headers: Headers
validationErrors: DefinedError[] | undefined
left: T
where: Where
}
export type StatusCode<Major extends number = 1 | 2 | 3 | 4 | 5> = \`\${Major}\${number}\`



/**
 * swagger
 */
export class SwaggerEdges {
    public client: Got

    public constructor(
    {
        prefixUrl,
        options,
        client = got
    }: {
        prefixUrl: string,
        options?: Options | OptionsInit,
        client?: Got
    }) {
        this.client = client.extend(...[{ prefixUrl, throwHttpErrors: false }, options].filter((o): o is Options => o !== undefined))
    }


    /**
     * GET /json-response
     */
    public getJsonResponse(): Promise<
    | SuccessResponse<'200', unknown>
    | FailureResponse<StatusCode<2>, string, 'response:body', IncomingHttpHeaders>
    | FailureResponse<StatusCode<1 | 3 | 4 | 5>, string, 'response:statuscode', IncomingHttpHeaders>
    >
    {
        return this.awaitResponse(this.client.get('json-response', {
            responseType: 'text',
        }), {
            200: { parse: (x: unknown) => ({ right: x }) },
        }) as ReturnType<this["getJsonResponse"]>
    }

    public async awaitResponse<I, S extends Record<PropertyKey, { parse: (o: I) => { left: DefinedError[] } | { right: unknown } }>>(response: 
    CancelableRequest<NoInfer<Response<I>>>
    , schemas: S) {
        const result = await response
        const status = result.statusCode < 200 ? 'informational' : result.statusCode < 300 ? 'success' : result.statusCode < 400 ? 'redirection' : result.statusCode < 500 ? 'client-error' : 'server-error'
        const validator = schemas[result.statusCode] ?? schemas.default
        const body = validator?.parse?.(result.body)
        if (result.statusCode < 200 || result.statusCode >= 300)
        {
            return {success: false as const, statusCode: result.statusCode.toString(), status, headers: result.headers, left: body !== undefined && 'right' in body ? body.right : result.body, validationErrors: body !== undefined && 'left' in body ? body.left : undefined, where: 'response:statuscode' } 
        }
        if (body === undefined || 'left' in body)
        {
            return {success: body === undefined, statusCode: result.statusCode.toString(), status, headers: result.headers, left: result.body, validationErrors: body?.left, where: 'response:body' }
        }
        return {success: true as const, statusCode: result.statusCode.toString(), status, headers: result.headers, right: result.body }
    }
}

",
    "examples/edges/client.type.ts": "/**
* Generated by @skyleague/therefore@v1.0.0-local
* Do not manually touch this
*/
/* eslint-disable */

import type { DefinedError, ValidateFunction } from 'ajv'

import { validate as GetEmployeesResponseDefaultValidator } from './schemas/get-employees-response-default.schema.js'
import { validate as GetEmployeesResponse200Validator } from './schemas/get-employees-response200.schema.js'

export interface GetEmployeesResponse200 {
    fullTime?: (boolean | undefined)
    id?: (number | undefined)
    name?: (string | undefined)
}

export const GetEmployeesResponse200 = {
    validate: GetEmployeesResponse200Validator as ValidateFunction<GetEmployeesResponse200>,
    get schema() { return GetEmployeesResponse200.validate.schema},
    get errors() { return GetEmployeesResponse200.validate.errors ?? undefined },
    is: (o: unknown): o is GetEmployeesResponse200 => GetEmployeesResponse200.validate(o) === true,
    parse: (o: unknown): { right: GetEmployeesResponse200 } | { left: DefinedError[] } => 
    {
        if(GetEmployeesResponse200.is(o)) {
            return { right: o }
        }
        return { left: (GetEmployeesResponse200.errors ?? []) as DefinedError[] }
    },
} as const


export interface GetEmployeesResponseDefault {
    fullTime?: (boolean | undefined)
    id?: (number | undefined)
    name?: (string | undefined)
}

export const GetEmployeesResponseDefault = {
    validate: GetEmployeesResponseDefaultValidator as ValidateFunction<GetEmployeesResponseDefault>,
    get schema() { return GetEmployeesResponseDefault.validate.schema},
    get errors() { return GetEmployeesResponseDefault.validate.errors ?? undefined },
    is: (o: unknown): o is GetEmployeesResponseDefault => GetEmployeesResponseDefault.validate(o) === true,
    parse: (o: unknown): { right: GetEmployeesResponseDefault } | { left: DefinedError[] } => 
    {
        if(GetEmployeesResponseDefault.is(o)) {
            return { right: o }
        }
        return { left: (GetEmployeesResponseDefault.errors ?? []) as DefinedError[] }
    },
} as const


",
    "examples/edges/schemas/get-employees-response-default.schema.js": "/* eslint-disable */
// @ts-nocheck
/**
 * Generated by Ajv https://ajv.js.org/guide/managing-schemas.html#standalone-validation-code
 */
"use strict";
/** @type {unknown} */
export const validate = validate10;export default validate10;const schema11 = {"$schema":"http://json-schema.org/draft-07/schema#","title":"GetEmployeesResponseDefault","type":"object","properties":{"fullTime":{"type":"boolean"},"id":{"type":"integer"},"name":{"type":"string"}},"additionalProperties":true};function validate10(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){let vErrors = null;let errors = 0;if(errors === 0){if(data && typeof data == "object" && !Array.isArray(data)){if(data.fullTime !== undefined){const _errs2 = errors;if(typeof data.fullTime !== "boolean"){validate10.errors = [{instancePath:instancePath+"/fullTime",schemaPath:"#/properties/fullTime/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"}];return false;}var valid0 = _errs2 === errors;}else {var valid0 = true;}if(valid0){if(data.id !== undefined){let data1 = data.id;const _errs4 = errors;if(!(((typeof data1 == "number") && (!(data1 % 1) && !isNaN(data1))) && (isFinite(data1)))){validate10.errors = [{instancePath:instancePath+"/id",schemaPath:"#/properties/id/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];return false;}var valid0 = _errs4 === errors;}else {var valid0 = true;}if(valid0){if(data.name !== undefined){const _errs6 = errors;if(typeof data.name !== "string"){validate10.errors = [{instancePath:instancePath+"/name",schemaPath:"#/properties/name/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid0 = _errs6 === errors;}else {var valid0 = true;}}}}else {validate10.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}validate10.errors = vErrors;return errors === 0;};validate.schema=schema11;",
    "examples/edges/schemas/get-employees-response200.schema.js": "/* eslint-disable */
// @ts-nocheck
/**
 * Generated by Ajv https://ajv.js.org/guide/managing-schemas.html#standalone-validation-code
 */
"use strict";
/** @type {unknown} */
export const validate = validate10;export default validate10;const schema11 = {"$schema":"http://json-schema.org/draft-07/schema#","title":"GetEmployeesResponse200","type":"object","properties":{"fullTime":{"type":"boolean"},"id":{"type":"integer"},"name":{"type":"string"}},"additionalProperties":true};function validate10(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){let vErrors = null;let errors = 0;if(errors === 0){if(data && typeof data == "object" && !Array.isArray(data)){if(data.fullTime !== undefined){const _errs2 = errors;if(typeof data.fullTime !== "boolean"){validate10.errors = [{instancePath:instancePath+"/fullTime",schemaPath:"#/properties/fullTime/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"}];return false;}var valid0 = _errs2 === errors;}else {var valid0 = true;}if(valid0){if(data.id !== undefined){let data1 = data.id;const _errs4 = errors;if(!(((typeof data1 == "number") && (!(data1 % 1) && !isNaN(data1))) && (isFinite(data1)))){validate10.errors = [{instancePath:instancePath+"/id",schemaPath:"#/properties/id/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];return false;}var valid0 = _errs4 === errors;}else {var valid0 = true;}if(valid0){if(data.name !== undefined){const _errs6 = errors;if(typeof data.name !== "string"){validate10.errors = [{instancePath:instancePath+"/name",schemaPath:"#/properties/name/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid0 = _errs6 === errors;}else {var valid0 = true;}}}}else {validate10.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}validate10.errors = vErrors;return errors === 0;};validate.schema=schema11;",
  },
}
`;

exports[`locals 1`] = `
{
  "cleanFn": [Function],
  "outputFiles": {
    "examples/edges/locals.type.ts": "/**
* Generated by @skyleague/therefore@v1.0.0-local
* Do not manually touch this
*/
/* eslint-disable */

type Days2 = 'monday' | 'tuesday' | 'wednesday' | 'thursday' | 'friday' | 'saturday' | 'sunday'

export interface Days {
    days: (Days2)[]
}

type Local2 = string

type Local = string

export type Ref1 = Local2

export type Ref2 = Local

export type Unevaluated = string

",
  },
}
`;

exports[`optional 1`] = `
{
  "cleanFn": [Function],
  "outputFiles": {
    "examples/edges/optional.type.ts": "/**
* Generated by @skyleague/therefore@v1.0.0-local
* Do not manually touch this
*/
/* eslint-disable */

export type MadeOptionalRef = (Original | undefined)

export type OptionalString = (string | undefined)

export type OptionalUnknown = unknown

export type Original = string

",
  },
}
`;

exports[`validator 1`] = `
{
  "cleanFn": [Function],
  "outputFiles": {
    "examples/edges/schemas/validator.schema.js": "/* eslint-disable */
// @ts-nocheck
/**
 * Generated by Ajv https://ajv.js.org/guide/managing-schemas.html#standalone-validation-code
 */
"use strict";
/** @type {unknown} */
export const validate = validate10;export default validate10;const schema11 = {"$schema":"http://json-schema.org/draft-07/schema#","title":"Validator","type":"object","properties":{"foo":{"type":"string"}},"required":["foo"],"additionalProperties":true};function validate10(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){let vErrors = null;let errors = 0;if(errors === 0){if(data && typeof data == "object" && !Array.isArray(data)){let missing0;if((data.foo === undefined) && (missing0 = "foo")){validate10.errors = [{instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];return false;}else {if(data.foo !== undefined){if(typeof data.foo !== "string"){validate10.errors = [{instancePath:instancePath+"/foo",schemaPath:"#/properties/foo/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}}}else {validate10.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}validate10.errors = vErrors;return errors === 0;};validate.schema=schema11;",
    "examples/edges/validator.type.ts": "/**
* Generated by @skyleague/therefore@v1.0.0-local
* Do not manually touch this
*/
/* eslint-disable */

import type { DefinedError, ValidateFunction } from 'ajv'

import { validate as ValidatorValidator } from './schemas/validator.schema.js'

export interface Validator {
    foo: string
}

export const Validator = {
    validate: ValidatorValidator as ValidateFunction<Validator>,
    get schema() { return Validator.validate.schema},
    get errors() { return Validator.validate.errors ?? undefined },
    is: (o: unknown): o is Validator => Validator.validate(o) === true,
    parse: (o: unknown): { right: Validator } | { left: DefinedError[] } => 
    {
        if(Validator.is(o)) {
            return { right: o }
        }
        return { left: (Validator.errors ?? []) as DefinedError[] }
    },
} as const


",
  },
}
`;
