// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`output generation 1`] = `
[
  {
    "data": {
      "00014-000": {
        "referenceName": "{{00014-000:symbolName}}",
        "srcPath": "examples/jsonschema/example.schema.type.ts",
        "symbolName": "SelfReference",
        "uniqueSymbolName": "{{00014-000:symbolName}}",
      },
      "00019-000": {
        "referenceName": "{{00019-000:symbolName}}",
        "srcPath": "examples/jsonschema/example.schema.type.ts",
        "symbolName": "Defaults",
        "uniqueSymbolName": "{{00019-000:symbolName}}",
      },
      "00023-000": {
        "referenceName": "{{00023-000:symbolName}}",
        "srcPath": "examples/jsonschema/example.schema.type.ts",
        "symbolName": "Keyword",
        "uniqueSymbolName": "{{00023-000:symbolName}}",
      },
      "0005-000": {
        "referenceName": "{{0005-000:symbolName}}",
        "srcPath": "examples/jsonschema/example.schema.type.ts",
        "symbolName": "Person",
        "uniqueSymbolName": "{{0005-000:symbolName}}",
      },
      "0009-000": {
        "referenceName": "{{0009-000:symbolName}}",
        "srcPath": "examples/jsonschema/example.schema.type.ts",
        "symbolName": "SalesPerson",
        "uniqueSymbolName": "{{0009-000:symbolName}}",
      },
    },
    "prettify": true,
    "relativeSource": "./example.schema",
    "targetPath": "examples/jsonschema/example.schema.type.ts",
    "template": "/**
* Generated by @skyleague/therefore@v1.0.0-local
* Do not manually touch this
*/
/* eslint-disable */
import type { ValidateFunction } from 'ajv'
import { ValidationError } from 'ajv'


export interface {{0005-000:symbolName}} {
    /**
     * The person's first name.
     */
    firstName: string
    lastName: string
    age: number
}

export const {{0005-000:symbolName}} = {
    validate: (await import('./schemas/person.schema.js')).validate as ValidateFunction<{{0005-000:symbolName}}>,
    get schema() { return {{0005-000:symbolName}}.validate.schema},
    get errors() { return {{0005-000:symbolName}}.validate.errors ?? undefined },
    is: (o: unknown): o is {{0005-000:symbolName}} => {{0005-000:symbolName}}.validate(o) === true,
    assert: (o: unknown) => {
        if (!{{0005-000:symbolName}}.validate(o)) {
            throw new ValidationError({{0005-000:symbolName}}.errors ?? [])
        }
    },
} as const

export type {{0009-000:symbolName}} = {
    sales: number
} & {
    /**
     * The person's first name.
     */
    firstName: string
    lastName: string
    age: number
}

export const {{0009-000:symbolName}} = {
    validate: (await import('./schemas/sales-person.schema.js')).validate as ValidateFunction<{{0009-000:symbolName}}>,
    get schema() { return {{0009-000:symbolName}}.validate.schema},
    get errors() { return {{0009-000:symbolName}}.validate.errors ?? undefined },
    is: (o: unknown): o is {{0009-000:symbolName}} => {{0009-000:symbolName}}.validate(o) === true,
    assert: (o: unknown) => {
        if (!{{0009-000:symbolName}}.validate(o)) {
            throw new ValidationError({{0009-000:symbolName}}.errors ?? [])
        }
    },
} as const

export interface {{00014-000:symbolName}} {
    foo?: string
    bar?: {{00014-000:referenceName}}
}

export const {{00014-000:symbolName}} = {
    validate: (await import('./schemas/self-reference.schema.js')).validate as ValidateFunction<{{00014-000:symbolName}}>,
    get schema() { return {{00014-000:symbolName}}.validate.schema},
    get errors() { return {{00014-000:symbolName}}.validate.errors ?? undefined },
    is: (o: unknown): o is {{00014-000:symbolName}} => {{00014-000:symbolName}}.validate(o) === true,
    assert: (o: unknown) => {
        if (!{{00014-000:symbolName}}.validate(o)) {
            throw new ValidationError({{00014-000:symbolName}}.errors ?? [])
        }
    },
} as const

export interface {{00019-000:symbolName}} {
    /**
     * @default 'foobar'
     */
    str?: string
    /**
     * @default 42
     */
    int?: number
}

export const {{00019-000:symbolName}} = {
    validate: (await import('./schemas/defaults.schema.js')).validate as ValidateFunction<{{00019-000:symbolName}}>,
    get schema() { return {{00019-000:symbolName}}.validate.schema},
    get errors() { return {{00019-000:symbolName}}.validate.errors ?? undefined },
    is: (o: unknown): o is {{00019-000:symbolName}} => {{00019-000:symbolName}}.validate(o) === true,
    assert: (o: unknown) => {
        if (!{{00019-000:symbolName}}.validate(o)) {
            throw new ValidationError({{00019-000:symbolName}}.errors ?? [])
        }
    },
} as const

export interface {{00023-000:symbolName}} {
    foo?: [string, string, string, string,  ...(string)[]]
}

export const {{00023-000:symbolName}} = {
    validate: (await import('./schemas/keyword.schema.js')).validate as ValidateFunction<{{00023-000:symbolName}}>,
    get schema() { return {{00023-000:symbolName}}.validate.schema},
    get errors() { return {{00023-000:symbolName}}.validate.errors ?? undefined },
    is: (o: unknown): o is {{00023-000:symbolName}} => {{00023-000:symbolName}}.validate(o) === true,
    assert: (o: unknown) => {
        if (!{{00023-000:symbolName}}.validate(o)) {
            throw new ValidationError({{00023-000:symbolName}}.errors ?? [])
        }
    },
} as const

",
    "type": "typescript",
  },
  {
    "clean": [Function],
    "data": {
      "00014-000": {
        "referenceName": "{{00014-000:symbolName}}",
        "srcPath": "examples/jsonschema/example.schema.type.ts",
        "symbolName": "SelfReference",
        "uniqueSymbolName": "{{00014-000:symbolName}}",
      },
      "00019-000": {
        "referenceName": "{{00019-000:symbolName}}",
        "srcPath": "examples/jsonschema/example.schema.type.ts",
        "symbolName": "Defaults",
        "uniqueSymbolName": "{{00019-000:symbolName}}",
      },
      "00023-000": {
        "referenceName": "{{00023-000:symbolName}}",
        "srcPath": "examples/jsonschema/example.schema.type.ts",
        "symbolName": "Keyword",
        "uniqueSymbolName": "{{00023-000:symbolName}}",
      },
      "0005-000": {
        "referenceName": "{{0005-000:symbolName}}",
        "srcPath": "examples/jsonschema/example.schema.type.ts",
        "symbolName": "Person",
        "uniqueSymbolName": "{{0005-000:symbolName}}",
      },
      "0009-000": {
        "referenceName": "{{0009-000:symbolName}}",
        "srcPath": "examples/jsonschema/example.schema.type.ts",
        "symbolName": "SalesPerson",
        "uniqueSymbolName": "{{0009-000:symbolName}}",
      },
    },
    "prettify": false,
    "relativeSource": "./example.schema",
    "targetPath": "examples/jsonschema/schemas/person.schema.js",
    "template": "/**
 * Generated by Ajv https://ajv.js.org/guide/managing-schemas.html#standalone-validation-code 
 * eslint-disable
 */
\\"use strict\\";export const validate = validate10;export default validate10;const schema11 = {\\"$schema\\":\\"http://json-schema.org/draft-07/schema#\\",\\"title\\":\\"{{0005-000:uniqueSymbolName}}\\",\\"type\\":\\"object\\",\\"properties\\":{\\"firstName\\":{\\"type\\":\\"string\\",\\"description\\":\\"The person's first name.\\"},\\"lastName\\":{\\"type\\":\\"string\\"},\\"age\\":{\\"type\\":\\"number\\"}},\\"required\\":[\\"firstName\\",\\"lastName\\",\\"age\\"],\\"additionalProperties\\":true};function validate10(data, {instancePath=\\"\\", parentData, parentDataProperty, rootData=data}={}){let vErrors = null;let errors = 0;if(errors === 0){if(data && typeof data == \\"object\\" && !Array.isArray(data)){let missing0;if((((data.firstName === undefined) && (missing0 = \\"firstName\\")) || ((data.lastName === undefined) && (missing0 = \\"lastName\\"))) || ((data.age === undefined) && (missing0 = \\"age\\"))){validate10.errors = [{instancePath,schemaPath:\\"#/required\\",keyword:\\"required\\",params:{missingProperty: missing0},message:\\"must have required property '\\"+missing0+\\"'\\"}];return false;}else {if(data.firstName !== undefined){const _errs2 = errors;if(typeof data.firstName !== \\"string\\"){validate10.errors = [{instancePath:instancePath+\\"/firstName\\",schemaPath:\\"#/properties/firstName/type\\",keyword:\\"type\\",params:{type: \\"string\\"},message:\\"must be string\\"}];return false;}var valid0 = _errs2 === errors;}else {var valid0 = true;}if(valid0){if(data.lastName !== undefined){const _errs4 = errors;if(typeof data.lastName !== \\"string\\"){validate10.errors = [{instancePath:instancePath+\\"/lastName\\",schemaPath:\\"#/properties/lastName/type\\",keyword:\\"type\\",params:{type: \\"string\\"},message:\\"must be string\\"}];return false;}var valid0 = _errs4 === errors;}else {var valid0 = true;}if(valid0){if(data.age !== undefined){let data2 = data.age;const _errs6 = errors;if(!((typeof data2 == \\"number\\") && (isFinite(data2)))){validate10.errors = [{instancePath:instancePath+\\"/age\\",schemaPath:\\"#/properties/age/type\\",keyword:\\"type\\",params:{type: \\"number\\"},message:\\"must be number\\"}];return false;}var valid0 = _errs6 === errors;}else {var valid0 = true;}}}}}else {validate10.errors = [{instancePath,schemaPath:\\"#/type\\",keyword:\\"type\\",params:{type: \\"object\\"},message:\\"must be object\\"}];return false;}}validate10.errors = vErrors;return errors === 0;};validate.schema=schema11;",
    "type": "validator",
  },
  {
    "clean": [Function],
    "data": {
      "00014-000": {
        "referenceName": "{{00014-000:symbolName}}",
        "srcPath": "examples/jsonschema/example.schema.type.ts",
        "symbolName": "SelfReference",
        "uniqueSymbolName": "{{00014-000:symbolName}}",
      },
      "00019-000": {
        "referenceName": "{{00019-000:symbolName}}",
        "srcPath": "examples/jsonschema/example.schema.type.ts",
        "symbolName": "Defaults",
        "uniqueSymbolName": "{{00019-000:symbolName}}",
      },
      "00023-000": {
        "referenceName": "{{00023-000:symbolName}}",
        "srcPath": "examples/jsonschema/example.schema.type.ts",
        "symbolName": "Keyword",
        "uniqueSymbolName": "{{00023-000:symbolName}}",
      },
      "0005-000": {
        "referenceName": "{{0005-000:symbolName}}",
        "srcPath": "examples/jsonschema/example.schema.type.ts",
        "symbolName": "Person",
        "uniqueSymbolName": "{{0005-000:symbolName}}",
      },
      "0009-000": {
        "referenceName": "{{0009-000:symbolName}}",
        "srcPath": "examples/jsonschema/example.schema.type.ts",
        "symbolName": "SalesPerson",
        "uniqueSymbolName": "{{0009-000:symbolName}}",
      },
    },
    "prettify": false,
    "relativeSource": "./example.schema",
    "targetPath": "examples/jsonschema/schemas/sales-person.schema.js",
    "template": "/**
 * Generated by Ajv https://ajv.js.org/guide/managing-schemas.html#standalone-validation-code 
 * eslint-disable
 */
\\"use strict\\";export const validate = validate10;export default validate10;const schema11 = {\\"$schema\\":\\"http://json-schema.org/draft-07/schema#\\",\\"title\\":\\"{{0009-000:uniqueSymbolName}}\\",\\"allOf\\":[{\\"type\\":\\"object\\",\\"properties\\":{\\"sales\\":{\\"type\\":\\"integer\\"}},\\"required\\":[\\"sales\\"],\\"additionalProperties\\":true},{\\"type\\":\\"object\\",\\"properties\\":{\\"firstName\\":{\\"type\\":\\"string\\",\\"description\\":\\"The person's first name.\\"},\\"lastName\\":{\\"type\\":\\"string\\"},\\"age\\":{\\"type\\":\\"number\\"}},\\"required\\":[\\"firstName\\",\\"lastName\\",\\"age\\"],\\"additionalProperties\\":true}]};function validate10(data, {instancePath=\\"\\", parentData, parentDataProperty, rootData=data}={}){let vErrors = null;let errors = 0;const _errs0 = errors;if(errors === _errs0){if(data && typeof data == \\"object\\" && !Array.isArray(data)){let missing0;if((data.sales === undefined) && (missing0 = \\"sales\\")){validate10.errors = [{instancePath,schemaPath:\\"#/allOf/0/required\\",keyword:\\"required\\",params:{missingProperty: missing0},message:\\"must have required property '\\"+missing0+\\"'\\"}];return false;}else {if(data.sales !== undefined){let data0 = data.sales;if(!(((typeof data0 == \\"number\\") && (!(data0 % 1) && !isNaN(data0))) && (isFinite(data0)))){validate10.errors = [{instancePath:instancePath+\\"/sales\\",schemaPath:\\"#/allOf/0/properties/sales/type\\",keyword:\\"type\\",params:{type: \\"integer\\"},message:\\"must be integer\\"}];return false;}}}}else {validate10.errors = [{instancePath,schemaPath:\\"#/allOf/0/type\\",keyword:\\"type\\",params:{type: \\"object\\"},message:\\"must be object\\"}];return false;}}var valid0 = _errs0 === errors;if(valid0){const _errs5 = errors;if(errors === _errs5){if(data && typeof data == \\"object\\" && !Array.isArray(data)){let missing1;if((((data.firstName === undefined) && (missing1 = \\"firstName\\")) || ((data.lastName === undefined) && (missing1 = \\"lastName\\"))) || ((data.age === undefined) && (missing1 = \\"age\\"))){validate10.errors = [{instancePath,schemaPath:\\"#/allOf/1/required\\",keyword:\\"required\\",params:{missingProperty: missing1},message:\\"must have required property '\\"+missing1+\\"'\\"}];return false;}else {if(data.firstName !== undefined){const _errs8 = errors;if(typeof data.firstName !== \\"string\\"){validate10.errors = [{instancePath:instancePath+\\"/firstName\\",schemaPath:\\"#/allOf/1/properties/firstName/type\\",keyword:\\"type\\",params:{type: \\"string\\"},message:\\"must be string\\"}];return false;}var valid2 = _errs8 === errors;}else {var valid2 = true;}if(valid2){if(data.lastName !== undefined){const _errs10 = errors;if(typeof data.lastName !== \\"string\\"){validate10.errors = [{instancePath:instancePath+\\"/lastName\\",schemaPath:\\"#/allOf/1/properties/lastName/type\\",keyword:\\"type\\",params:{type: \\"string\\"},message:\\"must be string\\"}];return false;}var valid2 = _errs10 === errors;}else {var valid2 = true;}if(valid2){if(data.age !== undefined){let data3 = data.age;const _errs12 = errors;if(!((typeof data3 == \\"number\\") && (isFinite(data3)))){validate10.errors = [{instancePath:instancePath+\\"/age\\",schemaPath:\\"#/allOf/1/properties/age/type\\",keyword:\\"type\\",params:{type: \\"number\\"},message:\\"must be number\\"}];return false;}var valid2 = _errs12 === errors;}else {var valid2 = true;}}}}}else {validate10.errors = [{instancePath,schemaPath:\\"#/allOf/1/type\\",keyword:\\"type\\",params:{type: \\"object\\"},message:\\"must be object\\"}];return false;}}var valid0 = _errs5 === errors;}validate10.errors = vErrors;return errors === 0;};validate.schema=schema11;",
    "type": "validator",
  },
  {
    "clean": [Function],
    "data": {
      "00014-000": {
        "referenceName": "{{00014-000:symbolName}}",
        "srcPath": "examples/jsonschema/example.schema.type.ts",
        "symbolName": "SelfReference",
        "uniqueSymbolName": "{{00014-000:symbolName}}",
      },
      "00019-000": {
        "referenceName": "{{00019-000:symbolName}}",
        "srcPath": "examples/jsonschema/example.schema.type.ts",
        "symbolName": "Defaults",
        "uniqueSymbolName": "{{00019-000:symbolName}}",
      },
      "00023-000": {
        "referenceName": "{{00023-000:symbolName}}",
        "srcPath": "examples/jsonschema/example.schema.type.ts",
        "symbolName": "Keyword",
        "uniqueSymbolName": "{{00023-000:symbolName}}",
      },
      "0005-000": {
        "referenceName": "{{0005-000:symbolName}}",
        "srcPath": "examples/jsonschema/example.schema.type.ts",
        "symbolName": "Person",
        "uniqueSymbolName": "{{0005-000:symbolName}}",
      },
      "0009-000": {
        "referenceName": "{{0009-000:symbolName}}",
        "srcPath": "examples/jsonschema/example.schema.type.ts",
        "symbolName": "SalesPerson",
        "uniqueSymbolName": "{{0009-000:symbolName}}",
      },
    },
    "prettify": false,
    "relativeSource": "./example.schema",
    "targetPath": "examples/jsonschema/schemas/self-reference.schema.js",
    "template": "/**
 * Generated by Ajv https://ajv.js.org/guide/managing-schemas.html#standalone-validation-code 
 * eslint-disable
 */
\\"use strict\\";export const validate = validate10;export default validate10;const schema11 = {\\"$schema\\":\\"http://json-schema.org/draft-07/schema#\\",\\"title\\":\\"{{00014-000:uniqueSymbolName}}\\",\\"type\\":\\"object\\",\\"properties\\":{\\"foo\\":{\\"type\\":\\"string\\",\\"title\\":\\"foo\\"},\\"bar\\":{\\"title\\":\\"bar\\",\\"$ref\\":\\"#\\"}},\\"additionalProperties\\":true};const wrapper0 = {validate: validate10};function validate10(data, {instancePath=\\"\\", parentData, parentDataProperty, rootData=data}={}){let vErrors = null;let errors = 0;if(errors === 0){if(data && typeof data == \\"object\\" && !Array.isArray(data)){if(data.foo !== undefined){const _errs2 = errors;if(typeof data.foo !== \\"string\\"){validate10.errors = [{instancePath:instancePath+\\"/foo\\",schemaPath:\\"#/properties/foo/type\\",keyword:\\"type\\",params:{type: \\"string\\"},message:\\"must be string\\"}];return false;}var valid0 = _errs2 === errors;}else {var valid0 = true;}if(valid0){if(data.bar !== undefined){const _errs4 = errors;if(!(wrapper0.validate(data.bar, {instancePath:instancePath+\\"/bar\\",parentData:data,parentDataProperty:\\"bar\\",rootData}))){vErrors = vErrors === null ? wrapper0.validate.errors : vErrors.concat(wrapper0.validate.errors);errors = vErrors.length;}var valid0 = _errs4 === errors;}else {var valid0 = true;}}}else {validate10.errors = [{instancePath,schemaPath:\\"#/type\\",keyword:\\"type\\",params:{type: \\"object\\"},message:\\"must be object\\"}];return false;}}validate10.errors = vErrors;return errors === 0;};validate.schema=schema11;",
    "type": "validator",
  },
  {
    "clean": [Function],
    "data": {
      "00014-000": {
        "referenceName": "{{00014-000:symbolName}}",
        "srcPath": "examples/jsonschema/example.schema.type.ts",
        "symbolName": "SelfReference",
        "uniqueSymbolName": "{{00014-000:symbolName}}",
      },
      "00019-000": {
        "referenceName": "{{00019-000:symbolName}}",
        "srcPath": "examples/jsonschema/example.schema.type.ts",
        "symbolName": "Defaults",
        "uniqueSymbolName": "{{00019-000:symbolName}}",
      },
      "00023-000": {
        "referenceName": "{{00023-000:symbolName}}",
        "srcPath": "examples/jsonschema/example.schema.type.ts",
        "symbolName": "Keyword",
        "uniqueSymbolName": "{{00023-000:symbolName}}",
      },
      "0005-000": {
        "referenceName": "{{0005-000:symbolName}}",
        "srcPath": "examples/jsonschema/example.schema.type.ts",
        "symbolName": "Person",
        "uniqueSymbolName": "{{0005-000:symbolName}}",
      },
      "0009-000": {
        "referenceName": "{{0009-000:symbolName}}",
        "srcPath": "examples/jsonschema/example.schema.type.ts",
        "symbolName": "SalesPerson",
        "uniqueSymbolName": "{{0009-000:symbolName}}",
      },
    },
    "prettify": false,
    "relativeSource": "./example.schema",
    "targetPath": "examples/jsonschema/schemas/defaults.schema.js",
    "template": "/**
 * Generated by Ajv https://ajv.js.org/guide/managing-schemas.html#standalone-validation-code 
 * eslint-disable
 */
\\"use strict\\";export const validate = validate10;export default validate10;const schema11 = {\\"$schema\\":\\"http://json-schema.org/draft-07/schema#\\",\\"title\\":\\"{{00019-000:uniqueSymbolName}}\\",\\"type\\":\\"object\\",\\"properties\\":{\\"str\\":{\\"type\\":\\"string\\",\\"title\\":\\"str\\",\\"default\\":\\"foobar\\"},\\"int\\":{\\"type\\":\\"integer\\",\\"title\\":\\"int\\",\\"default\\":42}},\\"additionalProperties\\":true};function validate10(data, {instancePath=\\"\\", parentData, parentDataProperty, rootData=data}={}){let vErrors = null;let errors = 0;if(errors === 0){if(data && typeof data == \\"object\\" && !Array.isArray(data)){if(data.str === undefined){data.str = \\"foobar\\";}if(data.int === undefined){data.int = 42;}const _errs2 = errors;if(typeof data.str !== \\"string\\"){validate10.errors = [{instancePath:instancePath+\\"/str\\",schemaPath:\\"#/properties/str/type\\",keyword:\\"type\\",params:{type: \\"string\\"},message:\\"must be string\\"}];return false;}var valid0 = _errs2 === errors;if(valid0){let data1 = data.int;const _errs4 = errors;if(!(((typeof data1 == \\"number\\") && (!(data1 % 1) && !isNaN(data1))) && (isFinite(data1)))){validate10.errors = [{instancePath:instancePath+\\"/int\\",schemaPath:\\"#/properties/int/type\\",keyword:\\"type\\",params:{type: \\"integer\\"},message:\\"must be integer\\"}];return false;}var valid0 = _errs4 === errors;}}else {validate10.errors = [{instancePath,schemaPath:\\"#/type\\",keyword:\\"type\\",params:{type: \\"object\\"},message:\\"must be object\\"}];return false;}}validate10.errors = vErrors;return errors === 0;};validate.schema=schema11;",
    "type": "validator",
  },
  {
    "clean": [Function],
    "data": {
      "00014-000": {
        "referenceName": "{{00014-000:symbolName}}",
        "srcPath": "examples/jsonschema/example.schema.type.ts",
        "symbolName": "SelfReference",
        "uniqueSymbolName": "{{00014-000:symbolName}}",
      },
      "00019-000": {
        "referenceName": "{{00019-000:symbolName}}",
        "srcPath": "examples/jsonschema/example.schema.type.ts",
        "symbolName": "Defaults",
        "uniqueSymbolName": "{{00019-000:symbolName}}",
      },
      "00023-000": {
        "referenceName": "{{00023-000:symbolName}}",
        "srcPath": "examples/jsonschema/example.schema.type.ts",
        "symbolName": "Keyword",
        "uniqueSymbolName": "{{00023-000:symbolName}}",
      },
      "0005-000": {
        "referenceName": "{{0005-000:symbolName}}",
        "srcPath": "examples/jsonschema/example.schema.type.ts",
        "symbolName": "Person",
        "uniqueSymbolName": "{{0005-000:symbolName}}",
      },
      "0009-000": {
        "referenceName": "{{0009-000:symbolName}}",
        "srcPath": "examples/jsonschema/example.schema.type.ts",
        "symbolName": "SalesPerson",
        "uniqueSymbolName": "{{0009-000:symbolName}}",
      },
    },
    "prettify": false,
    "relativeSource": "./example.schema",
    "targetPath": "examples/jsonschema/schemas/keyword.schema.js",
    "template": "/**
 * Generated by Ajv https://ajv.js.org/guide/managing-schemas.html#standalone-validation-code 
 * eslint-disable
 */
import {createRequire} from 'module';const require = createRequire(import.meta.url);\\"use strict\\";export const validate = validate10;export default validate10;const schema11 = {\\"$schema\\":\\"http://json-schema.org/draft-07/schema#\\",\\"title\\":\\"{{00023-000:uniqueSymbolName}}\\",\\"type\\":\\"object\\",\\"properties\\":{\\"foo\\":{\\"type\\":\\"array\\",\\"title\\":\\"foo\\",\\"items\\":{\\"type\\":\\"string\\",\\"minLength\\":1},\\"minItems\\":4}},\\"additionalProperties\\":true};const func4 = require(\\"ajv/dist/runtime/ucs2length\\").default;function validate10(data, {instancePath=\\"\\", parentData, parentDataProperty, rootData=data}={}){let vErrors = null;let errors = 0;if(errors === 0){if(data && typeof data == \\"object\\" && !Array.isArray(data)){if(data.foo !== undefined){let data0 = data.foo;const _errs2 = errors;if(errors === _errs2){if(Array.isArray(data0)){if(data0.length < 4){validate10.errors = [{instancePath:instancePath+\\"/foo\\",schemaPath:\\"#/properties/foo/minItems\\",keyword:\\"minItems\\",params:{limit: 4},message:\\"must NOT have fewer than 4 items\\"}];return false;}else {var valid1 = true;const len0 = data0.length;for(let i0=0; i0<len0; i0++){let data1 = data0[i0];const _errs4 = errors;if(errors === _errs4){if(typeof data1 === \\"string\\"){if(func4(data1) < 1){validate10.errors = [{instancePath:instancePath+\\"/foo/\\" + i0,schemaPath:\\"#/properties/foo/items/minLength\\",keyword:\\"minLength\\",params:{limit: 1},message:\\"must NOT have fewer than 1 characters\\"}];return false;}}else {validate10.errors = [{instancePath:instancePath+\\"/foo/\\" + i0,schemaPath:\\"#/properties/foo/items/type\\",keyword:\\"type\\",params:{type: \\"string\\"},message:\\"must be string\\"}];return false;}}var valid1 = _errs4 === errors;if(!valid1){break;}}}}else {validate10.errors = [{instancePath:instancePath+\\"/foo\\",schemaPath:\\"#/properties/foo/type\\",keyword:\\"type\\",params:{type: \\"array\\"},message:\\"must be array\\"}];return false;}}}}else {validate10.errors = [{instancePath,schemaPath:\\"#/type\\",keyword:\\"type\\",params:{type: \\"object\\"},message:\\"must be object\\"}];return false;}}validate10.errors = vErrors;return errors === 0;};validate.schema=schema11;",
    "type": "validator",
  },
]
`;
