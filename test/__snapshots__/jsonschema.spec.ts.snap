// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`output generation 1`] = `
{
  "cleanFn": [Function],
  "outputFiles": {
    "examples/jsonschema/example.type.ts": "/**
* Generated by @skyleague/therefore@v1.0.0-local
* Do not manually touch this
*/
/* eslint-disable */

import { ValidationError } from 'ajv'
import type { ValidateFunction } from 'ajv'

export interface Defaults {
    /**
     * @default 42
     */
    int?: (number | undefined)
    /**
     * @default 'foobar'
     */
    str?: (string | undefined)
}

export const Defaults = {
    validate: (await import('./schemas/defaults.schema.js')).validate as ValidateFunction<Defaults>,
    get schema() { return Defaults.validate.schema},
    get errors() { return Defaults.validate.errors ?? undefined },
    is: (o: unknown): o is Defaults => Defaults.validate(o) === true,
    assert: (o: unknown) => {
        if (!Defaults.validate(o)) {
            throw new ValidationError(Defaults.errors ?? [])
        }
    },
} as const


export interface Keyword {
    foo?: ([string, string, string, string,  ...(string)[]] | undefined)
}

export const Keyword = {
    validate: (await import('./schemas/keyword.schema.js')).validate as ValidateFunction<Keyword>,
    get schema() { return Keyword.validate.schema},
    get errors() { return Keyword.validate.errors ?? undefined },
    is: (o: unknown): o is Keyword => Keyword.validate(o) === true,
    assert: (o: unknown) => {
        if (!Keyword.validate(o)) {
            throw new ValidationError(Keyword.errors ?? [])
        }
    },
} as const


export interface Person {
    /**
     * The person's first name.
     */
    firstName: string
    lastName: string
    age: number
}

export const Person = {
    validate: (await import('./schemas/person.schema.js')).validate as ValidateFunction<Person>,
    get schema() { return Person.validate.schema},
    get errors() { return Person.validate.errors ?? undefined },
    is: (o: unknown): o is Person => Person.validate(o) === true,
} as const


export type SalesPerson = ({
    sales: number
} & {
    /**
     * The person's first name.
     */
    firstName: string
    lastName: string
    age: number
})

export const SalesPerson = {
    validate: (await import('./schemas/sales-person.schema.js')).validate as ValidateFunction<SalesPerson>,
    get schema() { return SalesPerson.validate.schema},
    get errors() { return SalesPerson.validate.errors ?? undefined },
    is: (o: unknown): o is SalesPerson => SalesPerson.validate(o) === true,
} as const


export interface SelfReference {
    bar?: (SelfReference | undefined)
    foo?: (string | undefined)
}

export const SelfReference = {
    validate: (await import('./schemas/self-reference.schema.js')).validate as ValidateFunction<SelfReference>,
    get schema() { return SelfReference.validate.schema},
    get errors() { return SelfReference.validate.errors ?? undefined },
    is: (o: unknown): o is SelfReference => SelfReference.validate(o) === true,
    assert: (o: unknown) => {
        if (!SelfReference.validate(o)) {
            throw new ValidationError(SelfReference.errors ?? [])
        }
    },
} as const


",
    "examples/jsonschema/schemas/defaults.schema.js": "/* eslint-disable */
// @ts-nocheck
/**
 * Generated by Ajv https://ajv.js.org/guide/managing-schemas.html#standalone-validation-code
 */
"use strict";
/** @type {unknown} */
export const validate = validate10;export default validate10;const schema11 = {"$schema":"http://json-schema.org/draft-07/schema#","type":"object","properties":{"int":{"type":"integer","default":42},"str":{"type":"string","default":"foobar"}},"additionalProperties":true};function validate10(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){let vErrors = null;let errors = 0;if(errors === 0){if(data && typeof data == "object" && !Array.isArray(data)){if(data.int === undefined){data.int = 42;}if(data.str === undefined){data.str = "foobar";}let data0 = data.int;const _errs2 = errors;if(!(((typeof data0 == "number") && (!(data0 % 1) && !isNaN(data0))) && (isFinite(data0)))){validate10.errors = [{instancePath:instancePath+"/int",schemaPath:"#/properties/int/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];return false;}var valid0 = _errs2 === errors;if(valid0){const _errs4 = errors;if(typeof data.str !== "string"){validate10.errors = [{instancePath:instancePath+"/str",schemaPath:"#/properties/str/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid0 = _errs4 === errors;}}else {validate10.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}validate10.errors = vErrors;return errors === 0;};validate.schema=schema11;",
    "examples/jsonschema/schemas/keyword.schema.js": "/* eslint-disable */
// @ts-nocheck
/**
 * Generated by Ajv https://ajv.js.org/guide/managing-schemas.html#standalone-validation-code
 */
import {createRequire} from 'module';const require = createRequire(import.meta.url);"use strict";
/** @type {unknown} */
export const validate = validate10;export default validate10;const schema11 = {"$schema":"http://json-schema.org/draft-07/schema#","type":"object","properties":{"foo":{"type":"array","items":{"type":"string","minLength":1},"minItems":4}},"additionalProperties":true};const func4 = require("ajv/dist/runtime/ucs2length").default;function validate10(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){let vErrors = null;let errors = 0;if(errors === 0){if(data && typeof data == "object" && !Array.isArray(data)){if(data.foo !== undefined){let data0 = data.foo;const _errs2 = errors;if(errors === _errs2){if(Array.isArray(data0)){if(data0.length < 4){validate10.errors = [{instancePath:instancePath+"/foo",schemaPath:"#/properties/foo/minItems",keyword:"minItems",params:{limit: 4},message:"must NOT have fewer than 4 items"}];return false;}else {var valid1 = true;const len0 = data0.length;for(let i0=0; i0<len0; i0++){let data1 = data0[i0];const _errs4 = errors;if(errors === _errs4){if(typeof data1 === "string"){if(func4(data1) < 1){validate10.errors = [{instancePath:instancePath+"/foo/" + i0,schemaPath:"#/properties/foo/items/minLength",keyword:"minLength",params:{limit: 1},message:"must NOT have fewer than 1 characters"}];return false;}}else {validate10.errors = [{instancePath:instancePath+"/foo/" + i0,schemaPath:"#/properties/foo/items/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}var valid1 = _errs4 === errors;if(!valid1){break;}}}}else {validate10.errors = [{instancePath:instancePath+"/foo",schemaPath:"#/properties/foo/type",keyword:"type",params:{type: "array"},message:"must be array"}];return false;}}}}else {validate10.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}validate10.errors = vErrors;return errors === 0;};validate.schema=schema11;",
    "examples/jsonschema/schemas/person.schema.js": "/* eslint-disable */
// @ts-nocheck
/**
 * Generated by Ajv https://ajv.js.org/guide/managing-schemas.html#standalone-validation-code
 */
"use strict";
/** @type {unknown} */
export const validate = validate10;export default validate10;const schema11 = {"$schema":"http://json-schema.org/draft-07/schema#","type":"object","properties":{"firstName":{"type":"string","description":"The person's first name."},"lastName":{"type":"string"},"age":{"type":"number"}},"required":["age","firstName","lastName"],"additionalProperties":true};function validate10(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){let vErrors = null;let errors = 0;if(errors === 0){if(data && typeof data == "object" && !Array.isArray(data)){let missing0;if((((data.age === undefined) && (missing0 = "age")) || ((data.firstName === undefined) && (missing0 = "firstName"))) || ((data.lastName === undefined) && (missing0 = "lastName"))){validate10.errors = [{instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];return false;}else {if(data.firstName !== undefined){const _errs2 = errors;if(typeof data.firstName !== "string"){validate10.errors = [{instancePath:instancePath+"/firstName",schemaPath:"#/properties/firstName/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid0 = _errs2 === errors;}else {var valid0 = true;}if(valid0){if(data.lastName !== undefined){const _errs4 = errors;if(typeof data.lastName !== "string"){validate10.errors = [{instancePath:instancePath+"/lastName",schemaPath:"#/properties/lastName/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid0 = _errs4 === errors;}else {var valid0 = true;}if(valid0){if(data.age !== undefined){let data2 = data.age;const _errs6 = errors;if(!((typeof data2 == "number") && (isFinite(data2)))){validate10.errors = [{instancePath:instancePath+"/age",schemaPath:"#/properties/age/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid0 = _errs6 === errors;}else {var valid0 = true;}}}}}else {validate10.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}validate10.errors = vErrors;return errors === 0;};validate.schema=schema11;",
    "examples/jsonschema/schemas/sales-person.schema.js": "/* eslint-disable */
// @ts-nocheck
/**
 * Generated by Ajv https://ajv.js.org/guide/managing-schemas.html#standalone-validation-code
 */
"use strict";
/** @type {unknown} */
export const validate = validate10;export default validate10;const schema11 = {"$schema":"http://json-schema.org/draft-07/schema#","allOf":[{"type":"object","properties":{"sales":{"type":"integer"}},"required":["sales"],"additionalProperties":true},{"type":"object","properties":{"firstName":{"type":"string","description":"The person's first name."},"lastName":{"type":"string"},"age":{"type":"number"}},"required":["age","firstName","lastName"],"additionalProperties":true}]};function validate10(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){let vErrors = null;let errors = 0;const _errs0 = errors;if(errors === _errs0){if(data && typeof data == "object" && !Array.isArray(data)){let missing0;if((data.sales === undefined) && (missing0 = "sales")){validate10.errors = [{instancePath,schemaPath:"#/allOf/0/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];return false;}else {if(data.sales !== undefined){let data0 = data.sales;if(!(((typeof data0 == "number") && (!(data0 % 1) && !isNaN(data0))) && (isFinite(data0)))){validate10.errors = [{instancePath:instancePath+"/sales",schemaPath:"#/allOf/0/properties/sales/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];return false;}}}}else {validate10.errors = [{instancePath,schemaPath:"#/allOf/0/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}var valid0 = _errs0 === errors;if(valid0){const _errs5 = errors;if(errors === _errs5){if(data && typeof data == "object" && !Array.isArray(data)){let missing1;if((((data.age === undefined) && (missing1 = "age")) || ((data.firstName === undefined) && (missing1 = "firstName"))) || ((data.lastName === undefined) && (missing1 = "lastName"))){validate10.errors = [{instancePath,schemaPath:"#/allOf/1/required",keyword:"required",params:{missingProperty: missing1},message:"must have required property '"+missing1+"'"}];return false;}else {if(data.firstName !== undefined){const _errs8 = errors;if(typeof data.firstName !== "string"){validate10.errors = [{instancePath:instancePath+"/firstName",schemaPath:"#/allOf/1/properties/firstName/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid2 = _errs8 === errors;}else {var valid2 = true;}if(valid2){if(data.lastName !== undefined){const _errs10 = errors;if(typeof data.lastName !== "string"){validate10.errors = [{instancePath:instancePath+"/lastName",schemaPath:"#/allOf/1/properties/lastName/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid2 = _errs10 === errors;}else {var valid2 = true;}if(valid2){if(data.age !== undefined){let data3 = data.age;const _errs12 = errors;if(!((typeof data3 == "number") && (isFinite(data3)))){validate10.errors = [{instancePath:instancePath+"/age",schemaPath:"#/allOf/1/properties/age/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid2 = _errs12 === errors;}else {var valid2 = true;}}}}}else {validate10.errors = [{instancePath,schemaPath:"#/allOf/1/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}var valid0 = _errs5 === errors;}validate10.errors = vErrors;return errors === 0;};validate.schema=schema11;",
    "examples/jsonschema/schemas/self-reference.schema.js": "/* eslint-disable */
// @ts-nocheck
/**
 * Generated by Ajv https://ajv.js.org/guide/managing-schemas.html#standalone-validation-code
 */
"use strict";
/** @type {unknown} */
export const validate = validate10;export default validate10;const schema11 = {"$schema":"http://json-schema.org/draft-07/schema#","type":"object","properties":{"bar":{"$ref":"#"},"foo":{"type":"string"}},"additionalProperties":true};const wrapper0 = {validate: validate10};function validate10(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){let vErrors = null;let errors = 0;if(errors === 0){if(data && typeof data == "object" && !Array.isArray(data)){if(data.bar !== undefined){const _errs2 = errors;if(!(wrapper0.validate(data.bar, {instancePath:instancePath+"/bar",parentData:data,parentDataProperty:"bar",rootData}))){vErrors = vErrors === null ? wrapper0.validate.errors : vErrors.concat(wrapper0.validate.errors);errors = vErrors.length;}var valid0 = _errs2 === errors;}else {var valid0 = true;}if(valid0){if(data.foo !== undefined){const _errs3 = errors;if(typeof data.foo !== "string"){validate10.errors = [{instancePath:instancePath+"/foo",schemaPath:"#/properties/foo/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid0 = _errs3 === errors;}else {var valid0 = true;}}}else {validate10.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}validate10.errors = vErrors;return errors === 0;};validate.schema=schema11;",
  },
}
`;
