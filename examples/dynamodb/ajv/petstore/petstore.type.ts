/**
 * Generated by @skyleague/therefore
 * Do not manually touch this
 */
/* eslint-disable */

import type { DefinedError, ValidateFunction } from 'ajv'

import { validate as GetPetResultValidator } from './schemas/get-pet.schema.js'
import { validate as ListCategoriesByOwnerResultValidator } from './schemas/list-categories-by-owner.schema.js'
import { validate as ListPetsBySkResultValidator } from './schemas/list-pets-by-sk.schema.js'
import { validate as ListPetsResultValidator } from './schemas/list-pets.schema.js'
import { validate as PetEntityValidator } from './schemas/pet.schema.js'

export type PetEntity = ({
    pk: string
    sk: string
    entityType: string
    createdAt: string
    updatedAt: string
} & ({
    category?: Category | undefined
    id?: number | undefined
    name: string
    photoUrls: string[]
    /**
     * pet status in the store
     */
    status?: 'available' | 'pending' | 'sold' | undefined
    tags?: Tag[] | undefined
} & {
    ownerId: string
})) & {
    entityType: 'pet'
}

export const PetEntity = {
    validate: PetEntityValidator as ValidateFunction<PetEntity>,
    get schema() {
        return PetEntity.validate.schema
    },
    get errors() {
        return PetEntity.validate.errors ?? undefined
    },
    is: (o: unknown): o is PetEntity => PetEntity.validate(o) === true,
    parse: (o: unknown): { right: PetEntity } | { left: DefinedError[] } => {
        if (PetEntity.is(o)) {
            return { right: o }
        }
        return { left: (PetEntity.errors ?? []) as DefinedError[] }
    },
} as const

interface Category {
    id?: number | undefined
    name?: string | undefined
}

export interface CreatePetInput {
    ownerId: string
    id: number
    category?: Category | undefined
    name: string
    photoUrls: string[]
    /**
     * pet status in the store
     */
    status?: 'available' | 'pending' | 'sold' | undefined
    tags?: Tag[] | undefined
    createdAt?: string | undefined
    updatedAt?: string | undefined
}

export interface GetPetInput {
    ownerId: string
    id: number
}

export interface GetPetResult {
    name: string
    category?: Category | undefined
}

export const GetPetResult = {
    validate: GetPetResultValidator as ValidateFunction<GetPetResult>,
    get schema() {
        return GetPetResult.validate.schema
    },
    get errors() {
        return GetPetResult.validate.errors ?? undefined
    },
    is: (o: unknown): o is GetPetResult => GetPetResult.validate(o) === true,
    parse: (o: unknown): { right: GetPetResult } | { left: DefinedError[] } => {
        if (GetPetResult.is(o)) {
            return { right: o }
        }
        return { left: (GetPetResult.errors ?? []) as DefinedError[] }
    },
} as const

export interface ListCategoriesByOwnerInput {
    ownerId: string
}

export interface ListCategoriesByOwnerResult {
    category?: Category | undefined
}

export const ListCategoriesByOwnerResult = {
    validate: ListCategoriesByOwnerResultValidator as ValidateFunction<ListCategoriesByOwnerResult>,
    get schema() {
        return ListCategoriesByOwnerResult.validate.schema
    },
    get errors() {
        return ListCategoriesByOwnerResult.validate.errors ?? undefined
    },
    is: (o: unknown): o is ListCategoriesByOwnerResult => ListCategoriesByOwnerResult.validate(o) === true,
    parse: (o: unknown): { right: ListCategoriesByOwnerResult } | { left: DefinedError[] } => {
        if (ListCategoriesByOwnerResult.is(o)) {
            return { right: o }
        }
        return { left: (ListCategoriesByOwnerResult.errors ?? []) as DefinedError[] }
    },
} as const

export interface ListPetEntityCollectionInput {
    ownerId: string
}

export interface ListPetsInput {}

export interface ListPetsResult {
    category?: Category | undefined
}

export const ListPetsResult = {
    validate: ListPetsResultValidator as ValidateFunction<ListPetsResult>,
    get schema() {
        return ListPetsResult.validate.schema
    },
    get errors() {
        return ListPetsResult.validate.errors ?? undefined
    },
    is: (o: unknown): o is ListPetsResult => ListPetsResult.validate(o) === true,
    parse: (o: unknown): { right: ListPetsResult } | { left: DefinedError[] } => {
        if (ListPetsResult.is(o)) {
            return { right: o }
        }
        return { left: (ListPetsResult.errors ?? []) as DefinedError[] }
    },
} as const

export interface ListPetsByOwnerInput {
    ownerId: string
}

export interface ListPetsBySkInput {
    id: number
}

export interface ListPetsBySkResult {
    category?: Category | undefined
    pk: string
    sk: string
}

export const ListPetsBySkResult = {
    validate: ListPetsBySkResultValidator as ValidateFunction<ListPetsBySkResult>,
    get schema() {
        return ListPetsBySkResult.validate.schema
    },
    get errors() {
        return ListPetsBySkResult.validate.errors ?? undefined
    },
    is: (o: unknown): o is ListPetsBySkResult => ListPetsBySkResult.validate(o) === true,
    parse: (o: unknown): { right: ListPetsBySkResult } | { left: DefinedError[] } => {
        if (ListPetsBySkResult.is(o)) {
            return { right: o }
        }
        return { left: (ListPetsBySkResult.errors ?? []) as DefinedError[] }
    },
} as const

interface Tag {
    id?: number | undefined
    name?: string | undefined
}

export interface UpdatePetNameInput {
    ownerId: string
    id: number
    name: string
}

export interface UpdatePetName1Input {
    ownerId: string
    id: number
    name: string
    category: Category
}

export interface UpsertPetNameInput {
    ownerId: string
    id: number
    name: string
}
