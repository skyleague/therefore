/**
 * Generated by @skyleague/therefore
 * Do not manually touch this
 */
/* eslint-disable */

import type {
    DeleteCommandInput,
    GetCommandInput,
    PutCommandInput,
    QueryCommandInput,
    ScanCommandInput,
    UpdateCommandInput,
} from '@aws-sdk/lib-dynamodb'

import type {
    CreatePetInput,
    DeletePetInput,
    GetPetInput,
    ListPetEntityCollectionInput,
    UpdatePetName1Input,
    UpdatePetNameInput,
    UpsertPetNameInput,
} from './petstore.type.js'

export const upsertPetNameCommand = ({
    tableName,
    args: { id, ownerId, name },
}: {
    tableName: string
    args: UpsertPetNameInput
}): UpdateCommandInput => {
    return {
        TableName: tableName,
        Key: {
            pk: `owner#${ownerId}`,
            sk: `pet#${id}`,
        },
        UpdateExpression: 'SET #name = if_not_exists(#name, :name), entityType = if_not_exists(entityType, :entityType0)',
        ExpressionAttributeNames: {
            '#name': 'name',
        },
        ExpressionAttributeValues: {
            ':name': name,
            ':entityType0': 'pet',
        },
    }
}

export const createPetCommand = ({
    tableName,
    args: { createdAt, updatedAt, category, id, name, photoUrls, status, tags, ownerId },
}: {
    tableName: string
    args: CreatePetInput
}): PutCommandInput => {
    return {
        TableName: tableName,
        ConditionExpression: 'attribute_not_exists(sk)',
        Item: Object.fromEntries(
            Object.entries({
                // Key elements
                pk: `owner#${ownerId}`,
                sk: `pet#${id}`,
                entityType: 'pet',

                // Other properties
                category,
                createdAt,
                id,
                name,
                ownerId,
                photoUrls,
                status,
                tags,
                updatedAt,
            }).filter(([, v]) => v !== undefined),
        ),
    }
}

export const deletePetCommand = ({
    tableName,
    args: { id, ownerId },
}: {
    tableName: string
    args: DeletePetInput
}): DeleteCommandInput => {
    return {
        TableName: tableName,
        Key: {
            pk: `owner#${ownerId}`,
            sk: `pet#${id}`,
        },
        ConditionExpression: 'attribute_exists(sk)',
    }
}

export const getPetCommand = ({
    tableName,
    args: { id, ownerId },
}: {
    tableName: string
    args: GetPetInput
}): GetCommandInput => {
    return {
        TableName: tableName,
        Key: {
            pk: `owner#${ownerId}`,
            sk: `pet#${id}`,
        },
        ProjectionExpression: '#name, category',
        ExpressionAttributeNames: {
            '#name': 'name',
        },
    }
}

export const listCategoriesByOwnerCommand = ({
    tableName,
}: {
    tableName: string
}): QueryCommandInput => {
    return {
        TableName: tableName,
        KeyConditionExpression: 'pk = :pk0 AND begins_with(sk, :sk0)',
        ProjectionExpression: 'category',
        ExpressionAttributeValues: {
            ':sk0': 'pet#',
            ':pk0': `owner#${ownerId}`,
        },
    }
}

export const listPetEntityCollectionCommand = ({
    tableName,
    args: { pk },
}: {
    tableName: string
    args: ListPetEntityCollectionInput
}): QueryCommandInput => {
    return {
        TableName: tableName,
        KeyConditionExpression: 'pk = :pk',
        ExpressionAttributeValues: {
            ':pk': pk,
        },
    }
}

export const listPetsCommand = ({
    tableName,
}: {
    tableName: string
}): ScanCommandInput => {
    return {
        TableName: tableName,
        FilterExpression: 'entityType = :entityType0',
        ProjectionExpression: 'category',
        ExpressionAttributeValues: {
            ':entityType0': 'pet',
        },
    }
}

export const listPetsByOwnerCommand = ({
    tableName,
}: {
    tableName: string
}): QueryCommandInput => {
    return {
        TableName: tableName,
        KeyConditionExpression: 'pk = :pk0 AND begins_with(sk, :sk0)',
        ExpressionAttributeValues: {
            ':sk0': 'pet#',
            ':pk0': `owner#${ownerId}`,
        },
    }
}

export const listPetsBySkCommand = ({
    tableName,
}: {
    tableName: string
}): QueryCommandInput => {
    return {
        TableName: tableName,
        IndexName: 'sk-pk-index',
        KeyConditionExpression: 'sk = :sk0',
        ExpressionAttributeValues: {
            ':sk0': `pet#${id}`,
        },
    }
}

export const updatePetNameCommand = ({
    tableName,
    args: { id, ownerId, name },
}: {
    tableName: string
    args: UpdatePetNameInput
}): UpdateCommandInput => {
    return {
        TableName: tableName,
        Key: {
            pk: `owner#${ownerId}`,
            sk: `pet#${id}`,
        },
        UpdateExpression: 'SET #name = if_not_exists(#name, :name), entityType = if_not_exists(entityType, :entityType0)',
        ConditionExpression: 'attribute_exists(sk)',
        ExpressionAttributeNames: {
            '#name': 'name',
        },
        ExpressionAttributeValues: {
            ':name': name,
            ':entityType0': 'pet',
        },
    }
}

export const updatePetName1Command = ({
    tableName,
    args: { id, ownerId, name, category },
}: {
    tableName: string
    args: UpdatePetName1Input
}): UpdateCommandInput => {
    return {
        TableName: tableName,
        Key: {
            pk: `owner#${ownerId}`,
            sk: `pet#${id}`,
        },
        UpdateExpression:
            'SET category = :category, #name = if_not_exists(#name, :name), entityType = if_not_exists(entityType, :entityType0)',
        ConditionExpression: 'category = :category0',
        ExpressionAttributeNames: {
            '#name': 'name',
        },
        ExpressionAttributeValues: {
            ':category': category,
            ':name': name,
            ':category0': 'foo',
            ':entityType0': 'pet',
        },
        // Extra options
        ReturnValues: 'ALL_NEW',
    }
}
