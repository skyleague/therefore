/**
 * Generated by @skyleague/therefore
 * Do not manually touch this
 */
/* eslint-disable */

import type {
    GetCommandInput,
    PutCommandInput,
    QueryCommandInput,
    ScanCommandInput,
    UpdateCommandInput,
} from '@aws-sdk/lib-dynamodb'

import type {
    CreatePetInput,
    GetPetInput,
    ListCategoriesByOwnerInput,
    ListPetEntityCollectionInput,
    ListPetsByOwnerInput,
    ListPetsBySkInput,
    UpdatePetName1Input,
    UpdatePetNameInput,
    UpsertPetNameInput,
} from './petstore.type.js'

export const upsertPetNameCommand = ({
    tableName,
    input: { ownerId, id, name },
}: {
    tableName: string
    input: UpsertPetNameInput
}): UpdateCommandInput => {
    return {
        TableName: tableName,
        Key: {
            pk: `owner#${ownerId}`,
            sk: `pet#${id}`,
        },
        UpdateExpression:
            'SET #name = if_not_exists(#name, :name), createdAt = if_not_exists(createdAt, :createdAt0), updatedAt = :createdAt0, entityType = if_not_exists(entityType, :entityType0)',
        ExpressionAttributeNames: {
            '#name': 'name',
        },
        ExpressionAttributeValues: {
            ':name': name,
            ':createdAt0': (() => new Date().toISOString())(),
            ':entityType0': 'pet',
        },
    }
}

export const createPetCommand = ({
    tableName,
    input: { ownerId, id, category, name, photoUrls, status, tags, createdAt, updatedAt },
}: {
    tableName: string
    input: CreatePetInput
}): PutCommandInput => {
    const _now = new Date().toISOString()

    return {
        TableName: tableName,
        ConditionExpression: 'attribute_not_exists(sk)',
        Item: Object.fromEntries(
            Object.entries({
                // Key elements
                pk: `owner#${ownerId}`,
                sk: `pet#${id}`,
                entityType: 'pet',
                createdAt: createdAt ?? _now,
                updatedAt: updatedAt ?? _now,

                // Other properties
                category,
                id,
                name,
                ownerId,
                photoUrls,
                status,
                tags,
            }).filter(([, v]) => v !== undefined),
        ),
    }
}

export const getPetCommand = ({
    tableName,
    input: { ownerId, id },
}: {
    tableName: string
    input: GetPetInput
}): GetCommandInput => {
    return {
        TableName: tableName,
        Key: {
            pk: `owner#${ownerId}`,
            sk: `pet#${id}`,
        },
        ProjectionExpression: '#name, category',
        ExpressionAttributeNames: {
            '#name': 'name',
        },
    }
}

export const listCategoriesByOwnerCommand = ({
    tableName,
    input: { ownerId },
}: {
    tableName: string
    input: ListCategoriesByOwnerInput
}): QueryCommandInput => {
    return {
        TableName: tableName,
        KeyConditionExpression: 'pk = :pk0 AND begins_with(sk, :sk0)',
        ProjectionExpression: 'category',
        ExpressionAttributeValues: {
            ':sk0': 'pet#',
            ':pk0': `owner#${ownerId}`,
        },
    }
}

export const listPetEntityCollectionCommand = ({
    tableName,
    input: { ownerId },
}: {
    tableName: string
    input: ListPetEntityCollectionInput
}): QueryCommandInput => {
    return {
        TableName: tableName,
        KeyConditionExpression: 'pk = :pk0',
        ExpressionAttributeValues: {
            ':pk0': `owner#${ownerId}`,
        },
    }
}

export const listPetsCommand = ({
    tableName,
}: {
    tableName: string
}): ScanCommandInput => {
    return {
        TableName: tableName,
        FilterExpression: 'entityType = :entityType0',
        ProjectionExpression: 'category',
        ExpressionAttributeValues: {
            ':entityType0': 'pet',
        },
    }
}

export const listPetsByOwnerCommand = ({
    tableName,
    input: { ownerId },
}: {
    tableName: string
    input: ListPetsByOwnerInput
}): QueryCommandInput => {
    return {
        TableName: tableName,
        KeyConditionExpression: 'pk = :pk0 AND begins_with(sk, :sk0)',
        ExpressionAttributeValues: {
            ':sk0': 'pet#',
            ':pk0': `owner#${ownerId}`,
        },
    }
}

export const listPetsBySkCommand = ({
    tableName,
    input: { id },
}: {
    tableName: string
    input: ListPetsBySkInput
}): QueryCommandInput => {
    return {
        TableName: tableName,
        IndexName: 'sk-pk-index',
        KeyConditionExpression: 'sk = :sk0',
        ExpressionAttributeValues: {
            ':sk0': `pet#${id}`,
        },
    }
}

export const updatePetNameCommand = ({
    tableName,
    input: { ownerId, id, name },
}: {
    tableName: string
    input: UpdatePetNameInput
}): UpdateCommandInput => {
    return {
        TableName: tableName,
        Key: {
            pk: `owner#${ownerId}`,
            sk: `pet#${id}`,
        },
        UpdateExpression:
            'SET #name = if_not_exists(#name, :name), createdAt = if_not_exists(createdAt, :createdAt0), updatedAt = :createdAt0, entityType = if_not_exists(entityType, :entityType0)',
        ConditionExpression: 'attribute_exists(sk)',
        ExpressionAttributeNames: {
            '#name': 'name',
        },
        ExpressionAttributeValues: {
            ':name': name,
            ':createdAt0': (() => new Date().toISOString())(),
            ':entityType0': 'pet',
        },
    }
}

export const updatePetName1Command = ({
    tableName,
    input: { ownerId, id, name, category },
}: {
    tableName: string
    input: UpdatePetName1Input
}): UpdateCommandInput => {
    return {
        TableName: tableName,
        Key: {
            pk: `owner#${ownerId}`,
            sk: `pet#${id}`,
        },
        UpdateExpression:
            'SET category = :category, #name = if_not_exists(#name, :name), createdAt = if_not_exists(createdAt, :createdAt0), updatedAt = :createdAt0, entityType = if_not_exists(entityType, :entityType0)',
        ConditionExpression: 'category = :category0',
        ExpressionAttributeNames: {
            '#name': 'name',
        },
        ExpressionAttributeValues: {
            ':category': category,
            ':name': name,
            ':category0': (() => 'foo')(),
            ':createdAt0': (() => new Date().toISOString())(),
            ':entityType0': 'pet',
        },

        // Extra options
        ReturnValues: 'ALL_NEW',
    }
}
