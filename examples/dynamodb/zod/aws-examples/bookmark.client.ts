/**
 * Generated by @skyleague/therefore
 * Do not manually touch this
 */
/* eslint-disable */

import type { DynamoDBServiceException } from '@aws-sdk/client-dynamodb'
import { GetCommand, PutCommand } from '@aws-sdk/lib-dynamodb'
import type { DynamoDBDocument } from '@aws-sdk/lib-dynamodb'

import { createCustomerCommand, getCustomerCommand } from './bookmark.command.js'
import type { CreateCustomerInput, GetCustomerInput } from './bookmark.type.js'
import { CustomersEntity } from './bookmark.zod.js'

export class CustomersEntityClient {
    public entityType = 'customer' as const
    public table: CustomerBookmarkTable

    public constructor({ table }: { table: CustomerBookmarkTable }) {
        this.table = table
    }

    public async createCustomerCommand(args: CreateCustomerInput) {
        const command = createCustomerCommand({ tableName: this.table.tableName, args })

        try {
            const result = await this.table.client.send(new PutCommand(command))
            return { right: null, $response: result }
        } catch (error) {
            return {
                success: false,
                left: error as DynamoDBServiceException,
                $response: error,
            }
        }
    }

    public async getCustomerCommand(args: GetCustomerInput) {
        const command = getCustomerCommand({ tableName: this.table.tableName, args })

        try {
            const result = await this.table.client.send(new GetCommand(command))
            if (result.Item === undefined) {
                return { right: undefined, $response: result }
            }
            const parsed = CustomersEntity.safeParse(result.Item)
            if (parsed.success) {
                return { success: true, right: parsed.data, $response: result }
            }
            return { success: false, left: parsed.error, $response: result }
        } catch (error) {
            return {
                success: false,
                left: error as DynamoDBServiceException,
                $response: error,
            }
        }
    }
}

export class BookmarksEntityClient {
    public entityType = 'undefined' as const
    public table: CustomerBookmarkTable

    public constructor({ table }: { table: CustomerBookmarkTable }) {
        this.table = table
    }
}

export class CustomerBookmarkTable {
    public tableName: string
    public client: DynamoDBDocument

    public constructor({ client, tableName }: { client: DynamoDBDocument; tableName: string }) {
        this.client = client
        this.tableName = tableName
    }
}
