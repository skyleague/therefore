/**
 * Generated by @skyleague/therefore
 * Do not manually touch this
 */
/* eslint-disable */

import { z } from 'zod'

export const StaticDataEntity = z
    .object({
        Lift: z.string(),
        Metadata: z.string(),
        entityType: z.string(),
    })
    .merge(
        z.object({
            ExperiencedRidersOnly: z.boolean(),
            VerticalFeet: z.number(),
            LiftTime: z.string(),
        }),
    )
    .merge(
        z.object({
            entityType: z.literal('StaticData'),
        }),
    )

export type StaticDataEntity = z.infer<typeof StaticDataEntity>

export const ResortsEntity = z
    .object({
        Lift: z.string(),
        Metadata: z.string(),
        entityType: z.string(),
    })
    .merge(
        z.object({
            TotalUniqueLiftRiders: z.number(),
            AverageSnowCoverageInches: z.number(),
            AvalancheDanger: z.enum(['Low', 'Considerable', 'High', 'Extreme', 'Moderate']),
            OpenLifts: z.set(z.number()),
        }),
    )
    .merge(
        z.object({
            entityType: z.literal('Resort'),
        }),
    )

export type ResortsEntity = z.infer<typeof ResortsEntity>

export const SkiLiftsEntity = z
    .object({
        Lift: z.string(),
        Metadata: z.string(),
        entityType: z.string(),
    })
    .merge(
        z.object({
            TotalUniqueLiftRiders: z.number(),
            AverageSnowCoverageInches: z.number(),
            LiftStatus: z.enum(['Open', 'Pending', 'Closed']),
            AvalancheDanger: z.enum(['Low', 'Considerable', 'High', 'Extreme', 'Moderate']),
        }),
    )
    .merge(
        z.object({
            entityType: z.literal('SkiLift'),
        }),
    )

export type SkiLiftsEntity = z.infer<typeof SkiLiftsEntity>
