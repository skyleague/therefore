/**
 * Generated by @skyleague/therefore
 * Do not manually touch this
 */
/* eslint-disable */

import type { DynamoDBServiceException } from '@aws-sdk/client-dynamodb'
import { PutCommand, paginateQuery } from '@aws-sdk/lib-dynamodb'
import type { DynamoDBDocument } from '@aws-sdk/lib-dynamodb'

import { createEmployeeCommand, createOfficeCommand, createTaskCommand, getJuniorDevelopersCommand } from './task.command.js'
import type { CreateEmployeeInput, CreateOfficeInput, CreateTaskInput } from './task.type.js'
import { EmployeeEntity } from './task.zod.js'

export class TaskEntityClient {
    public table: TaskManagerTable

    public constructor({ table }: { table: TaskManagerTable }) {
        this.table = table
    }

    public async createTaskCommand(args: CreateTaskInput) {
        const command = createTaskCommand({ tableName: this.table.tableName, args })

        try {
            const result = await this.table.client.send(new PutCommand(command))
            return { right: undefined, $response: result }
        } catch (error) {
            return {
                success: false,
                left: error as DynamoDBServiceException,
                $response: error,
            }
        }
    }
}

export class EmployeeEntityClient {
    public table: TaskManagerTable

    public constructor({ table }: { table: TaskManagerTable }) {
        this.table = table
    }

    public async createEmployeeCommand(args: CreateEmployeeInput) {
        const command = createEmployeeCommand({ tableName: this.table.tableName, args })

        try {
            const result = await this.table.client.send(new PutCommand(command))
            return { right: undefined, $response: result }
        } catch (error) {
            return {
                success: false,
                left: error as DynamoDBServiceException,
                $response: error,
            }
        }
    }

    public async *getJuniorDevelopersCommand() {
        const command = getJuniorDevelopersCommand({ tableName: this.table.tableName })

        try {
            for await (const page of paginateQuery({ client: this.table.client }, command)) {
                for (const item of page.Items ?? []) {
                    yield { ...EmployeeEntity.parse(item), status: 'success' as const, $response: page }
                }
            }
        } catch (error) {
            yield {
                success: false,
                left: error as DynamoDBServiceException,
                status: 'error' as const,
                $response: error,
            }
        }
    }
}

export class OfficeEntityClient {
    public table: TaskManagerTable

    public constructor({ table }: { table: TaskManagerTable }) {
        this.table = table
    }

    public async createOfficeCommand(args: CreateOfficeInput) {
        const command = createOfficeCommand({ tableName: this.table.tableName, args })

        try {
            const result = await this.table.client.send(new PutCommand(command))
            return { right: undefined, $response: result }
        } catch (error) {
            return {
                success: false,
                left: error as DynamoDBServiceException,
                $response: error,
            }
        }
    }
}

export class TaskManagerTable {
    public tableName: string
    public client: DynamoDBDocument

    public constructor({ client, tableName }: { client: DynamoDBDocument; tableName: string }) {
        this.client = client
        this.tableName = tableName
    }
}
