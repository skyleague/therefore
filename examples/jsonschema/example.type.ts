/**
 * Generated by @skyleague/therefore@v1.0.0-local
 * Do not manually touch this
 */
/* eslint-disable */

import { ValidationError } from 'ajv'
import type { DefinedError, ValidateFunction } from 'ajv'

import { validate as DefaultsValidator } from './schemas/defaults.schema.js'
import { validate as KeywordValidator } from './schemas/keyword.schema.js'
import { validate as PersonValidator } from './schemas/person.schema.js'
import { validate as SalesPersonValidator } from './schemas/sales-person.schema.js'
import { validate as SelfReferenceValidator } from './schemas/self-reference.schema.js'

export interface Defaults {
    /**
     * @default 42
     */
    int?: number | undefined
    /**
     * @default 'foobar'
     */
    str?: string | undefined
}

export const Defaults = {
    validate: DefaultsValidator as ValidateFunction<Defaults>,
    get schema() {
        return Defaults.validate.schema
    },
    get errors() {
        return Defaults.validate.errors ?? undefined
    },
    is: (o: unknown): o is Defaults => Defaults.validate(o) === true,
    assert: (o: unknown) => {
        if (!Defaults.validate(o)) {
            throw new ValidationError(Defaults.errors ?? [])
        }
    },
    parse: (o: unknown): { right: Defaults } | { left: DefinedError[] } => {
        if (Defaults.is(o)) {
            return { right: o }
        }
        return { left: (Defaults.errors ?? []) as DefinedError[] }
    },
} as const

export interface Keyword {
    foo?: [string, string, string, string, ...string[]] | undefined
}

export const Keyword = {
    validate: KeywordValidator as ValidateFunction<Keyword>,
    get schema() {
        return Keyword.validate.schema
    },
    get errors() {
        return Keyword.validate.errors ?? undefined
    },
    is: (o: unknown): o is Keyword => Keyword.validate(o) === true,
    assert: (o: unknown) => {
        if (!Keyword.validate(o)) {
            throw new ValidationError(Keyword.errors ?? [])
        }
    },
    parse: (o: unknown): { right: Keyword } | { left: DefinedError[] } => {
        if (Keyword.is(o)) {
            return { right: o }
        }
        return { left: (Keyword.errors ?? []) as DefinedError[] }
    },
} as const

export interface Person {
    /**
     * The person's first name.
     */
    firstName: string
    lastName: string
    age: number
}

export const Person = {
    validate: PersonValidator as ValidateFunction<Person>,
    get schema() {
        return Person.validate.schema
    },
    get errors() {
        return Person.validate.errors ?? undefined
    },
    is: (o: unknown): o is Person => Person.validate(o) === true,
    parse: (o: unknown): { right: Person } | { left: DefinedError[] } => {
        if (Person.is(o)) {
            return { right: o }
        }
        return { left: (Person.errors ?? []) as DefinedError[] }
    },
} as const

export type SalesPerson = {
    sales: number
} & {
    /**
     * The person's first name.
     */
    firstName: string
    lastName: string
    age: number
}

export const SalesPerson = {
    validate: SalesPersonValidator as ValidateFunction<SalesPerson>,
    get schema() {
        return SalesPerson.validate.schema
    },
    get errors() {
        return SalesPerson.validate.errors ?? undefined
    },
    is: (o: unknown): o is SalesPerson => SalesPerson.validate(o) === true,
    parse: (o: unknown): { right: SalesPerson } | { left: DefinedError[] } => {
        if (SalesPerson.is(o)) {
            return { right: o }
        }
        return { left: (SalesPerson.errors ?? []) as DefinedError[] }
    },
} as const

export interface SelfReference {
    bar?: SelfReference | undefined
    foo?: string | undefined
}

export const SelfReference = {
    validate: SelfReferenceValidator as ValidateFunction<SelfReference>,
    get schema() {
        return SelfReference.validate.schema
    },
    get errors() {
        return SelfReference.validate.errors ?? undefined
    },
    is: (o: unknown): o is SelfReference => SelfReference.validate(o) === true,
    assert: (o: unknown) => {
        if (!SelfReference.validate(o)) {
            throw new ValidationError(SelfReference.errors ?? [])
        }
    },
    parse: (o: unknown): { right: SelfReference } | { left: DefinedError[] } => {
        if (SelfReference.is(o)) {
            return { right: o }
        }
        return { left: (SelfReference.errors ?? []) as DefinedError[] }
    },
} as const
