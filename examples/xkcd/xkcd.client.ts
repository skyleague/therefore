/**
 * Generated by @skyleague/therefore@v1.0.0-local
 * Do not manually touch this
 */
/* eslint-disable */
import got from 'got'
import type { CancelableRequest, Got, Options, Response } from 'got'
import { Comic } from './xkcd.type'

export class Xkcd {
    public client: Got

    public constructor({
        prefixUrl = 'http://xkcd.com/',
        options,
    }: {
        prefixUrl?: string | 'http://xkcd.com/'
        options?: Options
    } = {}) {
        this.client = got.extend(...[{ prefixUrl }, options].filter((o): o is Options => o !== undefined))
    }

    /**
     * Fetch current comic and metadata.
     */
    public async getInfo0Json() {
        return this.awaitResponse(
            this.client.get(`info.0.json`, {
                responseType: 'json',
            }),
            {
                200: Comic,
            }
        )
    }

    /**
     * Fetch comics and metadata  by comic id.
     */
    public async getInfo0JsonByComicId({ path }: { path: { comicId: string } }) {
        return this.awaitResponse(
            this.client.get(`${path.comicId}/info.0.json`, {
                responseType: 'json',
            }),
            {
                200: Comic,
            }
        )
    }

    public async awaitResponse<
        T,
        S extends Record<PropertyKey, undefined | { is: (o: unknown) => o is T; assert: (o: unknown) => void }>
    >(response: CancelableRequest<Response<unknown>>, schemas: S) {
        const result = await response
        schemas[result.statusCode]?.assert(result.body)
        return { statusCode: result.statusCode, headers: result.headers, body: result.body }
    }
}
