/**
 * Generated by @skyleague/therefore@v1.0.0-local
 * Do not manually touch this
 */
/* eslint-disable */
import got, { Got, Options } from 'got'
import { Comic } from './xkcd.type'

export class Xkcd {
    public client: Got

    public constructor({
        prefixUrl = 'http://xkcd.com/',
        options,
    }: {
        prefixUrl?: string | 'http://xkcd.com/'
        options?: Options
    } = {}) {
        this.client = got.extend(...[{ prefixUrl }, options].filter((o): o is Options => o !== undefined))
    }

    /**
     * Fetch current comic and metadata.
     *
     */
    public async getInfo0Json(): Promise<Comic> {
        const result = await this.client.get(`info.0.json`).json<Comic>()
        return this.validateResponse(Comic, result)
    }

    /**
     * Fetch comics and metadata  by comic id.
     *
     */
    public async getInfo0Json({ path }: { path: { comicId: string } }): Promise<Comic> {
        const result = await this.client.get(`${path.comicId}/info.0.json`).json<Comic>()
        return this.validateResponse(Comic, result)
    }

    public validateResponse<T>(schema: { is: (o: unknown) => o is T; assert: (o: unknown) => void }, response: T) {
        schema.assert(response)
        return response
    }
}
