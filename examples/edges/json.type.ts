/**
 * Generated by @skyleague/therefore@v1.0.0-local
 * Do not manually touch this
 */
/* eslint-disable */

import { Ajv } from 'ajv'
import type { DefinedError } from 'ajv'

import ValidatorSchema from './schemas/validator.schema.json' with { type: 'json' }

export interface Validator {
    foo: string
}

export const Validator = {
    validate: new Ajv({
        strict: true,
        strictSchema: false,
        strictTypes: true,
        strictTuples: false,
        useDefaults: true,
        logger: false,
        loopRequired: 5,
        loopEnum: 5,
        multipleOfPrecision: 4,
        code: { esm: true },
    }).compile<Validator>(ValidatorSchema),
    schema: ValidatorSchema,
    get errors() {
        return Validator.validate.errors ?? undefined
    },
    is: (o: unknown): o is Validator => Validator.validate(o) === true,
    parse: (o: unknown): { right: Validator } | { left: DefinedError[] } => {
        if (Validator.is(o)) {
            return { right: o }
        }
        return { left: (Validator.errors ?? []) as DefinedError[] }
    },
} as const
