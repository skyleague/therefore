/**
 * Generated by @skyleague/therefore
 * Do not manually touch this
 */
/* eslint-disable */

export interface AddressSchema {
    street: string
    city: string
    country: string
}

export interface BaseConfig {
    timeout: number
    retries: number[]
    handler: {
        type: string
        enabled: boolean
    }
}

export interface ContactSchema {
    phone: string
    email: string
}

export type InlineKeys = 'name' | 'age'

export type MergedDramaticChanges = Omit<ProfileWithDetails, 'userId' | 'details' | 'metadata'> & OverwrittenProfile

export interface OverwrittenProfile {
    userId: string
    details: boolean
    metadata: string
    newField: number[]
}

export interface ProfileWithDetails {
    userId: number
    details: string[]
    metadata: {
        [k: string]: number | undefined
    }
}

export interface UserAllOptional {
    name?: string | undefined
    age?: number | undefined
}

export interface UserAllRequired {
    name: string
    age: number
    email: string
}

export type UserExtended = UserSchema & {
    email: string
}

export type UserKeys = keyof UserSchema

export type UserMerged = UserSchema & AddressSchema

export type UserMergedInlineLHS = {
    name: string
    age: number
} & AddressSchema

export type UserMergedInlineLRHS = {
    name: string
    age: number
} & {
    street: string
    city: string
    country: string
}

export type UserMergedInlineRHS = UserSchema & {
    street: string
    city: string
    country: string
}

export type UserMergedMultiple = (((UserSchema & AddressSchema) & {
    interests: string
    theme: string
}) &
    ContactSchema) & {
    hobby: string
    favoriteColor: string
}

export type UserMultipleChained = Omit<
    Omit<
        Pick<
            UserSchema & {
                email: string
            },
            'name' | 'age' | 'email'
        >,
        'email'
    > &
        ContactSchema,
    'email'
>

export type UserMultipleExtended = (UserSchema & {
    email: string
}) & {
    phone: string
}

export interface UserMultiplePartialFields {
    name?: string | undefined
    age?: number | undefined
}

export interface UserMultipleRequiredFields {
    name: string
    age: number
    email: string
    phone: string
}

export type UserOmit = Omit<UserSchema, 'age'>

export type UserOmitMultiple = Omit<UserMerged, 'name' | 'age'>

export interface UserPartialFields {
    name?: string | undefined
    age: number
}

export type UserPick = Pick<UserSchema, 'name'>

export type UserPickMultiple = Pick<UserSchema, 'name' | 'age'>

export type UserPreferencesOverwritten = Omit<UserWithPreferences, 'preferences' | 'tags'> & {
    preferences: boolean
    tags: number
}

export interface UserRequiredField {
    name: string
    age: number
    email: string
}

export interface UserSchema {
    name: string
    age: number
}

export interface UserStrict {
    name: string
    age: number
}

export interface UserWithOptionalField {
    name: string
    age: number
    email?: string | undefined
}

export interface UserWithPreferences {
    name: string
    preferences: {
        theme: 'light' | 'dark'
        fontSize: number
    }
    tags: string[]
}

export type WithDramaticChanges = Omit<
    Omit<BaseConfig, 'timeout' | 'retries' | 'handler'> & {
        timeout: boolean
        retries: string
        handler: number
    },
    'timeout' | 'retries' | 'handler'
> & {
    timeout: string[]
    retries: {
        [k: string]: unknown
    }
    handler: 'A' | 'B' | 'C'
}
