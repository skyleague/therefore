/**
 * Generated by @skyleague/therefore@v1.0.0-local
 * Do not manually touch this
 */
/* eslint-disable */

import type { DefinedError, ValidateFunction } from 'ajv'

import { validate as GetEmployeesResponseDefaultValidator } from './schemas/get-employees-response-default.schema.js'
import { validate as GetEmployeesResponse200Validator } from './schemas/get-employees-response200.schema.js'

export interface GetEmployeesResponse200 {
    fullTime?: boolean | undefined
    id?: number | undefined
    name?: string | undefined
}

export const GetEmployeesResponse200 = {
    validate: GetEmployeesResponse200Validator as ValidateFunction<GetEmployeesResponse200>,
    get schema() {
        return GetEmployeesResponse200.validate.schema
    },
    get errors() {
        return GetEmployeesResponse200.validate.errors ?? undefined
    },
    is: (o: unknown): o is GetEmployeesResponse200 => GetEmployeesResponse200.validate(o) === true,
    parse: (o: unknown): { right: GetEmployeesResponse200 } | { left: DefinedError[] } => {
        if (GetEmployeesResponse200.is(o)) {
            return { right: o }
        }
        return { left: (GetEmployeesResponse200.errors ?? []) as DefinedError[] }
    },
} as const

export interface GetEmployeesResponseDefault {
    fullTime?: boolean | undefined
    id?: number | undefined
    name?: string | undefined
}

export const GetEmployeesResponseDefault = {
    validate: GetEmployeesResponseDefaultValidator as ValidateFunction<GetEmployeesResponseDefault>,
    get schema() {
        return GetEmployeesResponseDefault.validate.schema
    },
    get errors() {
        return GetEmployeesResponseDefault.validate.errors ?? undefined
    },
    is: (o: unknown): o is GetEmployeesResponseDefault => GetEmployeesResponseDefault.validate(o) === true,
    parse: (o: unknown): { right: GetEmployeesResponseDefault } | { left: DefinedError[] } => {
        if (GetEmployeesResponseDefault.is(o)) {
            return { right: o }
        }
        return { left: (GetEmployeesResponseDefault.errors ?? []) as DefinedError[] }
    },
} as const
