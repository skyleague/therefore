/**
 * Generated by @skyleague/therefore
 * Do not manually touch this
 */
// biome-ignore-all lint: this file is generated
/* eslint-disable */

import type { DefinedError, ValidateFunction } from 'ajv'

import { validate as CustomerValidator } from './schemas/customer.schema.js'

export interface Address {
    street: string
    city: string
    country: string
    postalCode: string
}

export interface Contact {
    type: 'email' | 'phone'
    value: string
    /**
     * @default false
     */
    verified: boolean
}

export interface Customer {
    id: string
    name: string
    primaryAddress: Address
    otherAddresses: Address[]
    contacts: Contact[]
}

export const Customer = {
    validate: CustomerValidator as ValidateFunction<Customer>,
    get schema() {
        return Customer.validate.schema
    },
    get errors() {
        return Customer.validate.errors ?? undefined
    },
    is: (o: unknown): o is Customer => Customer.validate(o) === true,
    parse: (o: unknown): { right: Customer } | { left: DefinedError[] } => {
        if (Customer.is(o)) {
            return { right: o }
        }
        return { left: (Customer.errors ?? []) as DefinedError[] }
    },
} as const
