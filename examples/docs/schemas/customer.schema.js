/* eslint-disable */
// @ts-nocheck
/**
 * Generated by Ajv https://ajv.js.org/guide/managing-schemas.html#standalone-validation-code
 */
"use strict";
/** @type {unknown} */
export const validate = validate10;export default validate10;const schema11 = {"$schema":"http://json-schema.org/draft-07/schema#","title":"Customer","type":"object","properties":{"id":{"type":"string"},"name":{"type":"string"},"primaryAddress":{"$ref":"#/$defs/Address"},"otherAddresses":{"type":"array","items":{"$ref":"#/$defs/Address"}},"contacts":{"type":"array","items":{"$ref":"#/$defs/Contact"}}},"required":["contacts","id","name","otherAddresses","primaryAddress"],"additionalProperties":true,"$defs":{"Address":{"type":"object","properties":{"street":{"type":"string"},"city":{"type":"string"},"country":{"type":"string"},"postalCode":{"type":"string"}},"required":["city","country","postalCode","street"],"additionalProperties":true},"Contact":{"type":"object","properties":{"type":{"enum":["email","phone"]},"value":{"type":"string"},"verified":{"type":"boolean","default":false}},"required":["type","value"],"additionalProperties":true}}};const schema12 = {"type":"object","properties":{"street":{"type":"string"},"city":{"type":"string"},"country":{"type":"string"},"postalCode":{"type":"string"}},"required":["city","country","postalCode","street"],"additionalProperties":true};const schema14 = {"type":"object","properties":{"type":{"enum":["email","phone"]},"value":{"type":"string"},"verified":{"type":"boolean","default":false}},"required":["type","value"],"additionalProperties":true};function validate10(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){let vErrors = null;let errors = 0;if(errors === 0){if(data && typeof data == "object" && !Array.isArray(data)){let missing0;let valid0 = true;for( missing0 of schema11.required){valid0 = data[missing0] !== undefined;if(!valid0){validate10.errors = [{instancePath,schemaPath:"#/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];return false;break;}}if(valid0){if(data.id !== undefined){const _errs2 = errors;if(typeof data.id !== "string"){validate10.errors = [{instancePath:instancePath+"/id",schemaPath:"#/properties/id/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid1 = _errs2 === errors;}else {var valid1 = true;}if(valid1){if(data.name !== undefined){const _errs4 = errors;if(typeof data.name !== "string"){validate10.errors = [{instancePath:instancePath+"/name",schemaPath:"#/properties/name/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid1 = _errs4 === errors;}else {var valid1 = true;}if(valid1){if(data.primaryAddress !== undefined){let data2 = data.primaryAddress;const _errs6 = errors;const _errs7 = errors;if(errors === _errs7){if(data2 && typeof data2 == "object" && !Array.isArray(data2)){let missing1;if(((((data2.city === undefined) && (missing1 = "city")) || ((data2.country === undefined) && (missing1 = "country"))) || ((data2.postalCode === undefined) && (missing1 = "postalCode"))) || ((data2.street === undefined) && (missing1 = "street"))){validate10.errors = [{instancePath:instancePath+"/primaryAddress",schemaPath:"#/$defs/Address/required",keyword:"required",params:{missingProperty: missing1},message:"must have required property '"+missing1+"'"}];return false;}else {if(data2.street !== undefined){const _errs10 = errors;if(typeof data2.street !== "string"){validate10.errors = [{instancePath:instancePath+"/primaryAddress/street",schemaPath:"#/$defs/Address/properties/street/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid3 = _errs10 === errors;}else {var valid3 = true;}if(valid3){if(data2.city !== undefined){const _errs12 = errors;if(typeof data2.city !== "string"){validate10.errors = [{instancePath:instancePath+"/primaryAddress/city",schemaPath:"#/$defs/Address/properties/city/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid3 = _errs12 === errors;}else {var valid3 = true;}if(valid3){if(data2.country !== undefined){const _errs14 = errors;if(typeof data2.country !== "string"){validate10.errors = [{instancePath:instancePath+"/primaryAddress/country",schemaPath:"#/$defs/Address/properties/country/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid3 = _errs14 === errors;}else {var valid3 = true;}if(valid3){if(data2.postalCode !== undefined){const _errs16 = errors;if(typeof data2.postalCode !== "string"){validate10.errors = [{instancePath:instancePath+"/primaryAddress/postalCode",schemaPath:"#/$defs/Address/properties/postalCode/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid3 = _errs16 === errors;}else {var valid3 = true;}}}}}}else {validate10.errors = [{instancePath:instancePath+"/primaryAddress",schemaPath:"#/$defs/Address/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}var valid1 = _errs6 === errors;}else {var valid1 = true;}if(valid1){if(data.otherAddresses !== undefined){let data7 = data.otherAddresses;const _errs18 = errors;if(errors === _errs18){if(Array.isArray(data7)){var valid4 = true;const len0 = data7.length;for(let i0=0; i0<len0; i0++){let data8 = data7[i0];const _errs20 = errors;const _errs21 = errors;if(errors === _errs21){if(data8 && typeof data8 == "object" && !Array.isArray(data8)){let missing2;if(((((data8.city === undefined) && (missing2 = "city")) || ((data8.country === undefined) && (missing2 = "country"))) || ((data8.postalCode === undefined) && (missing2 = "postalCode"))) || ((data8.street === undefined) && (missing2 = "street"))){validate10.errors = [{instancePath:instancePath+"/otherAddresses/" + i0,schemaPath:"#/$defs/Address/required",keyword:"required",params:{missingProperty: missing2},message:"must have required property '"+missing2+"'"}];return false;}else {if(data8.street !== undefined){const _errs24 = errors;if(typeof data8.street !== "string"){validate10.errors = [{instancePath:instancePath+"/otherAddresses/" + i0+"/street",schemaPath:"#/$defs/Address/properties/street/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid6 = _errs24 === errors;}else {var valid6 = true;}if(valid6){if(data8.city !== undefined){const _errs26 = errors;if(typeof data8.city !== "string"){validate10.errors = [{instancePath:instancePath+"/otherAddresses/" + i0+"/city",schemaPath:"#/$defs/Address/properties/city/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid6 = _errs26 === errors;}else {var valid6 = true;}if(valid6){if(data8.country !== undefined){const _errs28 = errors;if(typeof data8.country !== "string"){validate10.errors = [{instancePath:instancePath+"/otherAddresses/" + i0+"/country",schemaPath:"#/$defs/Address/properties/country/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid6 = _errs28 === errors;}else {var valid6 = true;}if(valid6){if(data8.postalCode !== undefined){const _errs30 = errors;if(typeof data8.postalCode !== "string"){validate10.errors = [{instancePath:instancePath+"/otherAddresses/" + i0+"/postalCode",schemaPath:"#/$defs/Address/properties/postalCode/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid6 = _errs30 === errors;}else {var valid6 = true;}}}}}}else {validate10.errors = [{instancePath:instancePath+"/otherAddresses/" + i0,schemaPath:"#/$defs/Address/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}var valid4 = _errs20 === errors;if(!valid4){break;}}}else {validate10.errors = [{instancePath:instancePath+"/otherAddresses",schemaPath:"#/properties/otherAddresses/type",keyword:"type",params:{type: "array"},message:"must be array"}];return false;}}var valid1 = _errs18 === errors;}else {var valid1 = true;}if(valid1){if(data.contacts !== undefined){let data13 = data.contacts;const _errs32 = errors;if(errors === _errs32){if(Array.isArray(data13)){var valid7 = true;const len1 = data13.length;for(let i1=0; i1<len1; i1++){let data14 = data13[i1];const _errs34 = errors;const _errs35 = errors;if(errors === _errs35){if(data14 && typeof data14 == "object" && !Array.isArray(data14)){if(data14.verified === undefined){data14.verified = false;}let missing3;if(((data14.type === undefined) && (missing3 = "type")) || ((data14.value === undefined) && (missing3 = "value"))){validate10.errors = [{instancePath:instancePath+"/contacts/" + i1,schemaPath:"#/$defs/Contact/required",keyword:"required",params:{missingProperty: missing3},message:"must have required property '"+missing3+"'"}];return false;}else {if(data14.type !== undefined){let data15 = data14.type;const _errs38 = errors;if(!((data15 === "email") || (data15 === "phone"))){validate10.errors = [{instancePath:instancePath+"/contacts/" + i1+"/type",schemaPath:"#/$defs/Contact/properties/type/enum",keyword:"enum",params:{allowedValues: schema14.properties.type.enum},message:"must be equal to one of the allowed values"}];return false;}var valid9 = _errs38 === errors;}else {var valid9 = true;}if(valid9){if(data14.value !== undefined){const _errs39 = errors;if(typeof data14.value !== "string"){validate10.errors = [{instancePath:instancePath+"/contacts/" + i1+"/value",schemaPath:"#/$defs/Contact/properties/value/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid9 = _errs39 === errors;}else {var valid9 = true;}if(valid9){const _errs41 = errors;if(typeof data14.verified !== "boolean"){validate10.errors = [{instancePath:instancePath+"/contacts/" + i1+"/verified",schemaPath:"#/$defs/Contact/properties/verified/type",keyword:"type",params:{type: "boolean"},message:"must be boolean"}];return false;}var valid9 = _errs41 === errors;}}}}else {validate10.errors = [{instancePath:instancePath+"/contacts/" + i1,schemaPath:"#/$defs/Contact/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}var valid7 = _errs34 === errors;if(!valid7){break;}}}else {validate10.errors = [{instancePath:instancePath+"/contacts",schemaPath:"#/properties/contacts/type",keyword:"type",params:{type: "array"},message:"must be array"}];return false;}}var valid1 = _errs32 === errors;}else {var valid1 = true;}}}}}}}else {validate10.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}validate10.errors = vErrors;return errors === 0;};validate.schema=schema11;