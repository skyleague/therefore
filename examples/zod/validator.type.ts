/**
 * Generated by @skyleague/therefore
 * Do not manually touch this
 */
/* eslint-disable */

import type { DefinedError, ValidateFunction } from 'ajv'

import { validate as ObjectSchemaAjvValidator } from './schemas/object-schema-ajv.schema.js'
import { validate as ObjectSchemaDefaultValidator } from './schemas/object-schema-default.schema.js'

export interface Name {
    first: string
    last: string
}

export interface ObjectSchemaAjv {
    name: string
    age: number
}

export const ObjectSchemaAjv = {
    validate: ObjectSchemaAjvValidator as ValidateFunction<ObjectSchemaAjv>,
    get schema() {
        return ObjectSchemaAjv.validate.schema
    },
    get errors() {
        return ObjectSchemaAjv.validate.errors ?? undefined
    },
    is: (o: unknown): o is ObjectSchemaAjv => ObjectSchemaAjv.validate(o) === true,
    parse: (o: unknown): { right: ObjectSchemaAjv } | { left: DefinedError[] } => {
        if (ObjectSchemaAjv.is(o)) {
            return { right: o }
        }
        return { left: (ObjectSchemaAjv.errors ?? []) as DefinedError[] }
    },
} as const

export interface ObjectSchemaDefault {
    name: string
    age: number
}

export const ObjectSchemaDefault = {
    validate: ObjectSchemaDefaultValidator as ValidateFunction<ObjectSchemaDefault>,
    get schema() {
        return ObjectSchemaDefault.validate.schema
    },
    get errors() {
        return ObjectSchemaDefault.validate.errors ?? undefined
    },
    is: (o: unknown): o is ObjectSchemaDefault => ObjectSchemaDefault.validate(o) === true,
    parse: (o: unknown): { right: ObjectSchemaDefault } | { left: DefinedError[] } => {
        if (ObjectSchemaDefault.is(o)) {
            return { right: o }
        }
        return { left: (ObjectSchemaDefault.errors ?? []) as DefinedError[] }
    },
} as const
