/**
 * Generated by @skyleague/therefore
 * Do not manually touch this
 */
/* eslint-disable */

import type { DefinedError, ValidateFunction } from 'ajv'

import { validate as myUnionValidator } from './schemas/my-union.schema.js'
import { validate as userSchemaValidator } from './schemas/user-schema.schema.js'

export interface ValidatedUser {
    id: number
    username: string
    email: Email
    attributes: Attributes
}

export const userSchema = {
    validate: userSchemaValidator as ValidateFunction<ValidatedUser>,
    get schema() {
        return userSchema.validate.schema
    },
    get errors() {
        return userSchema.validate.errors ?? undefined
    },
    is: (o: unknown): o is ValidatedUser => userSchema.validate(o) === true,
    parse: (o: unknown): { right: ValidatedUser } | { left: DefinedError[] } => {
        if (userSchema.is(o)) {
            return { right: o }
        }
        return { left: (userSchema.errors ?? []) as DefinedError[] }
    },
} as const

export interface Attributes {
    [k: string]: string | undefined
}

export type Email = string

export type MyUnion =
    | {
          status: 'success'
          data: string
      }
    | {
          status: 'failed'
          error: unknown
      }

export const myUnion = {
    validate: myUnionValidator as ValidateFunction<MyUnion>,
    get schema() {
        return myUnion.validate.schema
    },
    get errors() {
        return myUnion.validate.errors ?? undefined
    },
    is: (o: unknown): o is MyUnion => myUnion.validate(o) === true,
    parse: (o: unknown): { right: MyUnion } | { left: DefinedError[] } => {
        if (myUnion.is(o)) {
            return { right: o }
        }
        return { left: (myUnion.errors ?? []) as DefinedError[] }
    },
} as const

export type Users = ValidatedUser[]
