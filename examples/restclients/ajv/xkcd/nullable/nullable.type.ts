/**
 * Generated by @skyleague/therefore
 * Do not manually touch this
 */
// biome-ignore-all lint: this file is generated
/* eslint-disable */

import type { DefinedError } from 'ajv'
import { Ajv, ValidationError } from 'ajv'

import ComicSchema from './schemas/comic.schema.json' with { type: 'json' }

export interface Comic {
    alt?: string | null | undefined
    day?: string | null | undefined
    img?: string | null | undefined
    link?: string | null | undefined
    month?: string | null | undefined
    news?: string | null | undefined
    num?: number | null | undefined
    safe_title?: string | null | undefined
    title?: string | null | undefined
    transcript?: string | null | undefined
    year?: string | null | undefined
}

export const Comic = {
    validate: new Ajv({
        strict: true,
        strictSchema: false,
        strictTypes: true,
        strictTuples: false,
        useDefaults: true,
        logger: false,
        loopRequired: 5,
        loopEnum: 5,
        multipleOfPrecision: 4,
        code: { esm: true },
    }).compile<Comic>(ComicSchema),
    schema: ComicSchema,
    get errors() {
        return Comic.validate.errors ?? undefined
    },
    is: (o: unknown): o is Comic => Comic.validate(o) === true,
    assert: (o: unknown) => {
        if (!Comic.validate(o)) {
            throw new ValidationError(Comic.errors ?? [])
        }
    },
    parse: (o: unknown): { right: Comic } | { left: DefinedError[] } => {
        if (Comic.is(o)) {
            return { right: o }
        }
        return { left: (Comic.errors ?? []) as DefinedError[] }
    },
} as const
