/**
 * Generated by @skyleague/therefore@v1.0.0-local
 * Do not manually touch this
 */
/* eslint-disable */

import { ValidationError } from 'ajv'
import type { DefinedError, ValidateFunction } from 'ajv'

import { validate as ComicValidator } from './schemas/comic.schema.js'

export interface Comic {
    alt?: string | undefined
    day?: string | undefined
    img?: string | undefined
    link?: string | undefined
    month?: string | undefined
    news?: string | undefined
    num?: number | undefined
    safe_title?: string | undefined
    title?: string | undefined
    transcript?: string | undefined
    year?: string | undefined
}

export const Comic = {
    validate: ComicValidator as ValidateFunction<Comic>,
    get schema() {
        return Comic.validate.schema
    },
    get errors() {
        return Comic.validate.errors ?? undefined
    },
    is: (o: unknown): o is Comic => Comic.validate(o) === true,
    assert: (o: unknown) => {
        if (!Comic.validate(o)) {
            throw new ValidationError(Comic.errors ?? [])
        }
    },
    parse: (o: unknown): { right: Comic } | { left: DefinedError[] } => {
        if (Comic.is(o)) {
            return { right: o }
        }
        return { left: (Comic.errors ?? []) as DefinedError[] }
    },
} as const
