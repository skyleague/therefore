/**
 * Generated by @skyleague/therefore@v1.0.0-local
 * Do not manually touch this
 */
/* eslint-disable */

import type { IncomingHttpHeaders } from 'node:http'

import type { DefinedError } from 'ajv'
import { got } from 'got'
import type { CancelableRequest, Got, Options, OptionsInit, Response } from 'got'

import { ConvertApiRequest, ConvertApiResponse } from './apimatic.type.js'

/**
 * APIMATIC API Transformer
 *
 * Transform API Descriptions from/to various formats
 */
export class Banking {
    public client: Got

    public auth: {
        apiKey?: string | (() => Promise<string>)
        basic?: [username: string, password: string] | (() => Promise<[username: string, password: string]>)
    }

    public availableAuth: Set<string>
    public defaultAuth: string[][] | string[] | undefined

    public constructor({
        prefixUrl = 'https://apimatic.io/api/transform',
        options,
        auth = {},
        defaultAuth,
        client = got,
    }: {
        prefixUrl?: string | 'https://apimatic.io/api/transform'
        options?: Options | OptionsInit
        auth: {
            apiKey?: string | (() => Promise<string>)
            basic?: [username: string, password: string] | (() => Promise<[username: string, password: string]>)
        }
        defaultAuth?: string[][] | string[]
        client?: Got
    }) {
        this.client = client.extend(
            ...[{ prefixUrl, throwHttpErrors: false }, options].filter((o): o is Options => o !== undefined),
        )
        this.auth = auth
        this.availableAuth = new Set(Object.keys(auth))
        this.defaultAuth = defaultAuth
    }

    /**
     * POST /transform
     *
     * Transform API Descriptions from/to various formats
     *
     * Transform API Descriptions from/to various formats e.g., Swagger, API Blueprint, RAML, WADL, Google Discovery, I/O Docs.
     *
     * ### INPUTS
     * * API Blueprint
     * * Swagger 1.0 - 1.2
     * * Swagger 2.0 JSON
     * * Swagger 2.0 YAML
     * * WADL - W3C 2009
     * * Google Discovery
     * * RAML 0.8
     * * I/O Docs - Mashery
     * * HAR 1.2
     * * Postman Collection 1.0 - 2.0
     * * APIMATIC Format
     * * Mashape
     *
     * ### OUTPUTS
     * * API Blueprint
     * * Swagger 1.2
     * * Swagger 2.0 JSON
     * * Swagger 2.0 YAML
     * * WADL - W3C 2009
     * * RAML 0.8 - 1.0
     * * APIMATIC Format
     */
    public convertApi({
        body,
        query,
    }: { body: ConvertApiRequest; query: { format: string } }): Promise<
        | SuccessResponse<'200', ConvertApiResponse>
        | FailureResponse<'429', unknown, 'response:statuscode'>
        | FailureResponse<undefined, unknown, 'request:body', undefined>
        | FailureResponse<StatusCode<2>, string, 'response:body', IncomingHttpHeaders>
        | FailureResponse<Exclude<StatusCode<1 | 3 | 4 | 5>, '429'>, unknown, 'response:statuscode', IncomingHttpHeaders>
    > {
        const _body = this.validateRequestBody(ConvertApiRequest, body)
        if ('left' in _body) {
            return Promise.resolve(_body)
        }

        return this.awaitResponse(
            this.buildClient().post('transform', {
                form: _body.right,
                searchParams: query,
                headers: { Accept: 'application/json' },
                responseType: 'json',
            }),
            {
                200: ConvertApiResponse,
                429: { parse: (x: unknown) => ({ right: x }) },
            },
        ) as ReturnType<this['convertApi']>
    }

    public validateRequestBody<Body>(
        parser: { parse: (o: unknown) => { left: DefinedError[] } | { right: Body } },
        body: unknown,
    ) {
        const _body = parser.parse(body)
        if ('left' in _body) {
            return {
                success: false as const,
                statusCode: undefined,
                status: undefined,
                headers: undefined,
                left: body,
                validationErrors: _body.left,
                where: 'request:body',
            } satisfies FailureResponse<undefined, unknown, 'request:body', undefined>
        }
        return _body
    }

    public async awaitResponse<
        I,
        S extends Record<PropertyKey, { parse: (o: I) => { left: DefinedError[] } | { right: unknown } }>,
    >(response: CancelableRequest<NoInfer<Response<I>>>, schemas: S) {
        const result = await response
        const status =
            result.statusCode < 200
                ? 'informational'
                : result.statusCode < 300
                  ? 'success'
                  : result.statusCode < 400
                    ? 'redirection'
                    : result.statusCode < 500
                      ? 'client-error'
                      : 'server-error'
        const validator = schemas[result.statusCode] ?? schemas.default
        const body = validator?.parse?.(result.body)
        if (result.statusCode < 200 || result.statusCode >= 300) {
            return {
                success: false as const,
                statusCode: result.statusCode.toString(),
                status,
                headers: result.headers,
                left: body !== undefined && 'right' in body ? body.right : result.body,
                validationErrors: body !== undefined && 'left' in body ? body.left : undefined,
                where: 'response:statuscode',
            }
        }
        if (body === undefined || 'left' in body) {
            return {
                success: body === undefined,
                statusCode: result.statusCode.toString(),
                status,
                headers: result.headers,
                left: result.body,
                validationErrors: body?.left,
                where: 'response:body',
            }
        }
        return {
            success: true as const,
            statusCode: result.statusCode.toString(),
            status,
            headers: result.headers,
            right: result.body,
        }
    }

    protected buildApiKeyClient(client: Got) {
        return client.extend({
            hooks: {
                beforeRequest: [
                    async (options) => {
                        const apiKey = this.auth.apiKey
                        const key = typeof apiKey === 'function' ? await apiKey() : apiKey
                        options.headers.apikey = key
                    },
                ],
            },
        })
    }

    protected buildBasicClient(client: Got) {
        return client.extend({
            hooks: {
                beforeRequest: [
                    async (options) => {
                        const basic = this.auth.basic
                        if (basic !== undefined) {
                            const [username, password] = typeof basic === 'function' ? await basic() : basic
                            options.username = username
                            options.password = password
                        }
                    },
                ],
            },
        })
    }

    protected buildClient(auths: string[][] | string[] | undefined = this.defaultAuth, client?: Got): Got {
        const auth = (auths ?? [...this.availableAuth])
            .map((auth) => (Array.isArray(auth) ? auth : [auth]))
            .filter((auth) => auth.every((a) => this.availableAuth.has(a)))
        let chosenClient = client ?? this.client
        for (const chosen of auth[0] ?? []) {
            if (chosen === 'apiKey') {
                chosenClient = this.buildApiKeyClient(chosenClient)
            } else if (chosen === 'basic') {
                chosenClient = this.buildBasicClient(chosenClient)
            }
        }
        return chosenClient
    }
}

export type Status<Major> = Major extends string
    ? Major extends `1${number}`
        ? 'informational'
        : Major extends `2${number}`
          ? 'success'
          : Major extends `3${number}`
            ? 'redirection'
            : Major extends `4${number}`
              ? 'client-error'
              : 'server-error'
    : undefined
export interface SuccessResponse<StatusCode extends string, T> {
    success: true
    statusCode: StatusCode
    status: Status<StatusCode>
    headers: IncomingHttpHeaders
    right: T
}
export interface FailureResponse<StatusCode = string, T = unknown, Where = never, Headers = IncomingHttpHeaders> {
    success: false
    statusCode: StatusCode
    status: Status<StatusCode>
    headers: Headers
    validationErrors: DefinedError[] | undefined
    left: T
    where: Where
}
export type StatusCode<Major extends number = 1 | 2 | 3 | 4 | 5> = `${Major}${number}`
