/* eslint-disable */
// @ts-nocheck
/**
 * Generated by Ajv https://ajv.js.org/guide/managing-schemas.html#standalone-validation-code
 */
"use strict";
/** @type {unknown} */
export const validate = validate10;export default validate10;const schema11 = {"$schema":"http://json-schema.org/draft-07/schema#","title":"CallWithResponsesResponse200","type":"object","properties":{"@namespace.integer":{"type":"integer"},"@namespace.string":{"type":"string"},"value":{"type":"array","items":{"$ref":"#/$defs/ModelWithString"}}},"additionalProperties":true,"$defs":{"ModelWithString":{"type":"object","description":"This is a model with one string property","properties":{"prop":{"type":"string","description":"This is a simple string property"}},"additionalProperties":true}}};const schema12 = {"type":"object","description":"This is a model with one string property","properties":{"prop":{"type":"string","description":"This is a simple string property"}},"additionalProperties":true};function validate10(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){let vErrors = null;let errors = 0;if(errors === 0){if(data && typeof data == "object" && !Array.isArray(data)){if(data["@namespace.integer"] !== undefined){let data0 = data["@namespace.integer"];const _errs2 = errors;if(!(((typeof data0 == "number") && (!(data0 % 1) && !isNaN(data0))) && (isFinite(data0)))){validate10.errors = [{instancePath:instancePath+"/@namespace.integer",schemaPath:"#/properties/%40namespace.integer/type",keyword:"type",params:{type: "integer"},message:"must be integer"}];return false;}var valid0 = _errs2 === errors;}else {var valid0 = true;}if(valid0){if(data["@namespace.string"] !== undefined){const _errs4 = errors;if(typeof data["@namespace.string"] !== "string"){validate10.errors = [{instancePath:instancePath+"/@namespace.string",schemaPath:"#/properties/%40namespace.string/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}var valid0 = _errs4 === errors;}else {var valid0 = true;}if(valid0){if(data.value !== undefined){let data2 = data.value;const _errs6 = errors;if(errors === _errs6){if(Array.isArray(data2)){var valid1 = true;const len0 = data2.length;for(let i0=0; i0<len0; i0++){let data3 = data2[i0];const _errs8 = errors;const _errs9 = errors;if(errors === _errs9){if(data3 && typeof data3 == "object" && !Array.isArray(data3)){if(data3.prop !== undefined){if(typeof data3.prop !== "string"){validate10.errors = [{instancePath:instancePath+"/value/" + i0+"/prop",schemaPath:"#/$defs/ModelWithString/properties/prop/type",keyword:"type",params:{type: "string"},message:"must be string"}];return false;}}}else {validate10.errors = [{instancePath:instancePath+"/value/" + i0,schemaPath:"#/$defs/ModelWithString/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}var valid1 = _errs8 === errors;if(!valid1){break;}}}else {validate10.errors = [{instancePath:instancePath+"/value",schemaPath:"#/properties/value/type",keyword:"type",params:{type: "array"},message:"must be array"}];return false;}}var valid0 = _errs6 === errors;}else {var valid0 = true;}}}}else {validate10.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}validate10.errors = vErrors;return errors === 0;};validate.schema=schema11;