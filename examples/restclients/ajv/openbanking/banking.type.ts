/**
 * Generated by @skyleague/therefore@v1.0.0-local
 * Do not manually touch this
 */
/* eslint-disable */

import type { DefinedError, ValidateFunction } from 'ajv'

import { validate as FileValidator } from './schemas/file.schema.js'
import { validate as OBErrorResponse1Validator } from './schemas/ob-error-response1.schema.js'

export interface File {}

export const File = {
    validate: FileValidator as ValidateFunction<File>,
    get schema() {
        return File.validate.schema
    },
    get errors() {
        return File.validate.errors ?? undefined
    },
    is: (o: unknown): o is File => File.validate(o) === true,
    parse: (o: unknown): { right: File } | { left: DefinedError[] } => {
        if (File.is(o)) {
            return { right: o }
        }
        return { left: (File.errors ?? []) as DefinedError[] }
    },
} as const

export interface OBError1 {
    /**
     * Low level textual error code, e.g., UK.OBIE.Field.Missing
     */
    ErrorCode: string
    /**
     * A description of the error that occurred. e.g., 'A mandatory field isn't supplied' or 'RequestedExecutionDateTime must be in future'
     * OBIE doesn't standardise this field
     */
    Message: string
    /**
     * Recommended but optional reference to the JSON Path of the field with error, e.g., Data.Initiation.InstructedAmount.Currency
     */
    Path?: string | undefined
    /**
     * URL to help remediate the problem, or provide more information, or to API Reference, or help etc
     */
    Url?: string | undefined
}

/**
 * An array of detail error codes, and messages, and URLs to documentation to help remediation.
 */
export interface OBErrorResponse1 {
    /**
     * High level textual error code, to help categorize the errors.
     */
    Code: string
    Errors: [OBError1, ...OBError1[]]
    /**
     * A unique reference for the error instance, for audit purposes, in case of unknown/unclassified errors.
     */
    Id?: string | undefined
    /**
     * Brief Error message, e.g., 'There is something wrong with the request parameters provided'
     */
    Message: string
}

export const OBErrorResponse1 = {
    validate: OBErrorResponse1Validator as ValidateFunction<OBErrorResponse1>,
    get schema() {
        return OBErrorResponse1.validate.schema
    },
    get errors() {
        return OBErrorResponse1.validate.errors ?? undefined
    },
    is: (o: unknown): o is OBErrorResponse1 => OBErrorResponse1.validate(o) === true,
    parse: (o: unknown): { right: OBErrorResponse1 } | { left: DefinedError[] } => {
        if (OBErrorResponse1.is(o)) {
            return { right: o }
        }
        return { left: (OBErrorResponse1.errors ?? []) as DefinedError[] }
    },
} as const
