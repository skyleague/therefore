/**
 * Generated by @skyleague/therefore
 * Do not manually touch this
 */
/* eslint-disable */

import { z } from 'zod'
import type { ZodType } from 'zod'

export type EntityType = {
    hasRelationA?: ParentRelationRegistrationType | undefined
    hasRelationB?: ChildrenRelationRegistrationType | undefined
}
export const EntityType: ZodType<EntityType> = z.lazy(() =>
    z.object({
        hasRelationA: ParentRelationRegistrationType.optional(),
        hasRelationB: ChildrenRelationRegistrationType.optional(),
    }),
)

export const EntityRelationRegistrationType = z.object({
    entity: EntityType.optional(),
})

export type EntityRelationRegistrationType = z.infer<typeof EntityRelationRegistrationType>

export type ICompany = {
    owns?: ICompany[] | undefined
}
export const ICompany: ZodType<ICompany> = z.lazy(() =>
    z.object({
        owns: ICompany.array().optional(),
    }),
)

export const ParentType = z.object({
    hasChildren: EntityRelationRegistrationType.array().optional(),
})

export type ParentType = z.infer<typeof ParentType>

export const ChildrenRelationRegistrationType = z.object({
    children: EntityType.array().optional(),
})

export type ChildrenRelationRegistrationType = z.infer<typeof ChildrenRelationRegistrationType>

export const Company = z.object({
    owns: ICompany.array().nullable().optional(),
})

export type Company = z.infer<typeof Company>

export const Foobar = z.object({
    prop: z.string().nullable().describe('foobar').optional(),
})

export type Foobar = z.infer<typeof Foobar>

export const ParentRelationRegistrationType = z.object({
    parent: ParentType.optional(),
})

export type ParentRelationRegistrationType = z.infer<typeof ParentRelationRegistrationType>
