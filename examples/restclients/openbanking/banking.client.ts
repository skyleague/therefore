/**
 * Generated by @skyleague/therefore@v1.0.0-local
 * Do not manually touch this
 */
/* eslint-disable */

import type { IncomingHttpHeaders } from 'node:http'

import type { DefinedError } from 'ajv'
import { got } from 'got'
import type { CancelableRequest, Got, Options, OptionsInit, Response } from 'got'

import { File, OBErrorResponse1 } from './banking.type.js'

/**
 * Payment Initiation API
 *
 * Swagger for Payment Initiation API Specification
 */
export class Banking {
    public client: Got

    public auth: {
        psuoAuth2Security?: string | (() => Promise<string>)
        tppoAuth2Security?: string | (() => Promise<string>)
    }

    public availableAuth: Set<string>
    public defaultAuth: string[][] | string[] | undefined

    public constructor({
        prefixUrl = 'https://openbanking.org.uk',
        options,
        auth = {},
        defaultAuth,
    }: {
        prefixUrl?: string | 'https://openbanking.org.uk' | `${string}/open-banking/v3.1/pisp`
        options?: Options | OptionsInit
        auth: {
            psuoAuth2Security?: string | (() => Promise<string>)
            tppoAuth2Security?: string | (() => Promise<string>)
        }
        defaultAuth?: string[][] | string[]
    }) {
        this.client = got.extend(...[{ prefixUrl, throwHttpErrors: false }, options].filter((o): o is Options => o !== undefined))
        this.auth = auth
        this.availableAuth = new Set(Object.keys(auth))
        this.defaultAuth = defaultAuth
    }

    /**
     * Create File Payment Consents
     */
    public createFilePaymentConsentsConsentIdFile({
        body,
        path,
        headers,
        auth = [['tppoAuth2Security']],
    }: {
        body: File
        path: { consentId: string }
        headers: {
            'x-fapi-auth-date'?: string
            'x-fapi-customer-ip-address'?: string
            'x-fapi-interaction-id'?: string
            Authorization: string
            'x-idempotency-key': string
            'x-jws-signature': string
            'x-customer-user-agent'?: string
        }
        auth?: string[][] | string[]
    }): Promise<
        | SuccessResponse<'200', unknown>
        | FailureResponse<'400', OBErrorResponse1, 'response:statuscode'>
        | FailureResponse<'401', unknown, 'response:statuscode'>
        | FailureResponse<'403', OBErrorResponse1, 'response:statuscode'>
        | FailureResponse<'404', unknown, 'response:statuscode'>
        | FailureResponse<'405', unknown, 'response:statuscode'>
        | FailureResponse<'406', unknown, 'response:statuscode'>
        | FailureResponse<'415', unknown, 'response:statuscode'>
        | FailureResponse<'429', unknown, 'response:statuscode'>
        | FailureResponse<'500', OBErrorResponse1, 'response:statuscode'>
        | FailureResponse<undefined, unknown, 'request:body', undefined>
        | FailureResponse<StatusCode<2>, string, 'response:body', IncomingHttpHeaders>
        | FailureResponse<
              Exclude<StatusCode<1 | 3 | 4 | 5>, '400' | '401' | '403' | '404' | '405' | '406' | '415' | '429' | '500'>,
              string,
              'response:statuscode',
              IncomingHttpHeaders
          >
    > {
        const _body = this.validateRequestBody(File, body)
        if ('left' in _body) {
            return Promise.resolve(_body)
        }

        return this.awaitResponse(
            this.buildClient(auth).post(`file-payment-consents/${path.consentId}/file`, {
                json: _body.right as File,
                headers: headers,
                responseType: 'text',
            }),
            {
                200: { parse: (x: unknown) => ({ right: x }) },
                400: OBErrorResponse1,
                401: { parse: (x: unknown) => ({ right: x }) },
                403: OBErrorResponse1,
                404: { parse: (x: unknown) => ({ right: x }) },
                405: { parse: (x: unknown) => ({ right: x }) },
                406: { parse: (x: unknown) => ({ right: x }) },
                415: { parse: (x: unknown) => ({ right: x }) },
                429: { parse: (x: unknown) => ({ right: x }) },
                500: OBErrorResponse1,
            },
        ) as ReturnType<this['createFilePaymentConsentsConsentIdFile']>
    }

    /**
     * Get File Payment Consents
     */
    public getFilePaymentConsentsConsentIdFile({
        path,
        headers,
        auth = [['tppoAuth2Security']],
    }: {
        path: { consentId: string }
        headers: {
            'x-fapi-auth-date'?: string
            'x-fapi-customer-ip-address'?: string
            'x-fapi-interaction-id'?: string
            Authorization: string
            'x-customer-user-agent'?: string
        }
        auth?: string[][] | string[]
    }): Promise<
        | SuccessResponse<'200', File>
        | FailureResponse<'400', OBErrorResponse1, 'response:statuscode'>
        | FailureResponse<'401', unknown, 'response:statuscode'>
        | FailureResponse<'403', OBErrorResponse1, 'response:statuscode'>
        | FailureResponse<'404', unknown, 'response:statuscode'>
        | FailureResponse<'405', unknown, 'response:statuscode'>
        | FailureResponse<'406', unknown, 'response:statuscode'>
        | FailureResponse<'429', unknown, 'response:statuscode'>
        | FailureResponse<'500', OBErrorResponse1, 'response:statuscode'>
        | FailureResponse<StatusCode<2>, string, 'response:body', IncomingHttpHeaders>
        | FailureResponse<
              Exclude<StatusCode<1 | 3 | 4 | 5>, '400' | '401' | '403' | '404' | '405' | '406' | '429' | '500'>,
              string,
              'response:statuscode',
              IncomingHttpHeaders
          >
    > {
        return this.awaitResponse(
            this.buildClient(auth).get(`file-payment-consents/${path.consentId}/file`, {
                headers: headers,
                responseType: 'json',
            }),
            {
                200: File,
                400: OBErrorResponse1,
                401: { parse: (x: unknown) => ({ right: x }) },
                403: OBErrorResponse1,
                404: { parse: (x: unknown) => ({ right: x }) },
                405: { parse: (x: unknown) => ({ right: x }) },
                406: { parse: (x: unknown) => ({ right: x }) },
                429: { parse: (x: unknown) => ({ right: x }) },
                500: OBErrorResponse1,
            },
        ) as ReturnType<this['getFilePaymentConsentsConsentIdFile']>
    }

    public validateRequestBody<Parser extends { parse: (o: unknown) => { left: DefinedError[] } | { right: Body } }, Body>(
        parser: Parser,
        body: unknown,
    ) {
        const _body = parser.parse(body)
        if ('left' in _body) {
            return {
                statusCode: undefined,
                status: undefined,
                headers: undefined,
                left: body,
                validationErrors: _body.left,
                where: 'request:body',
            } satisfies FailureResponse<undefined, unknown, 'request:body', undefined>
        }
        return _body
    }

    public async awaitResponse<
        I,
        S extends Record<PropertyKey, { parse: (o: I) => { left: DefinedError[] } | { right: unknown } } | undefined>,
    >(response: CancelableRequest<Response<I>>, schemas: S) {
        const result = await response
        const status =
            result.statusCode < 200
                ? 'informational'
                : result.statusCode < 300
                  ? 'success'
                  : result.statusCode < 400
                    ? 'redirection'
                    : result.statusCode < 500
                      ? 'client-error'
                      : 'server-error'
        const validator = schemas[result.statusCode] ?? schemas.default
        const body = validator?.parse?.(result.body)
        if (result.statusCode < 200 || result.statusCode >= 300) {
            return {
                statusCode: result.statusCode.toString(),
                status,
                headers: result.headers,
                left: body !== undefined && 'right' in body ? body.right : result.body,
                validationErrors: body !== undefined && 'left' in body ? body.left : undefined,
                where: 'response:statuscode',
            }
        }
        if (body === undefined || 'left' in body) {
            return {
                statusCode: result.statusCode.toString(),
                status,
                headers: result.headers,
                left: result.body,
                validationErrors: body?.left,
                where: 'response:body',
            }
        }
        return { statusCode: result.statusCode.toString(), status, headers: result.headers, right: result.body }
    }

    protected buildPsuoAuth2SecurityClient(client: Got) {
        return client
    }

    protected buildTppoAuth2SecurityClient(client: Got) {
        return client
    }

    protected buildClient(auths: string[][] | string[] | undefined = this.defaultAuth, client?: Got): Got {
        const auth = (auths ?? [...this.availableAuth])
            .map((auth) => (Array.isArray(auth) ? auth : [auth]))
            .filter((auth) => auth.every((a) => this.availableAuth.has(a)))
        let chosenClient = client ?? this.client
        for (const chosen of auth[0] ?? []) {
            if (chosen === 'psuoAuth2Security') {
                chosenClient = this.buildPsuoAuth2SecurityClient(chosenClient)
            } else if (chosen === 'tppoAuth2Security') {
                chosenClient = this.buildTppoAuth2SecurityClient(chosenClient)
            }
        }
        return chosenClient
    }
}

export type Status<Major> = Major extends string
    ? Major extends `1${number}`
        ? 'informational'
        : Major extends `2${number}`
          ? 'success'
          : Major extends `3${number}`
            ? 'redirection'
            : Major extends `4${number}`
              ? 'client-error'
              : 'server-error'
    : undefined
export interface SuccessResponse<StatusCode extends string, T> {
    statusCode: StatusCode
    status: Status<StatusCode>
    headers: IncomingHttpHeaders
    right: T
}
export interface FailureResponse<StatusCode = string, T = unknown, Where = never, Headers = IncomingHttpHeaders> {
    statusCode: StatusCode
    status: Status<StatusCode>
    headers: Headers
    validationErrors: DefinedError[] | undefined
    left: T
    where: Where
}
export type StatusCode<Major extends number = 1 | 2 | 3 | 4 | 5> = `${Major}${number}`
