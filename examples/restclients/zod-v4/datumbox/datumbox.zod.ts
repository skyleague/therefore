/**
 * Generated by @skyleague/therefore
 * Do not manually touch this
 */
// biome-ignore-all lint: this file is generated
/* eslint-disable */

import { z } from 'zod/v4'

export const AdultContentDetectionRequest = z.object({
    api_key: z.string().describe('Your API Key'),
    text: z.string().describe('The text that you want to analyze. It should not contain HTML tags.').optional(),
})

export type AdultContentDetectionRequest = z.infer<typeof AdultContentDetectionRequest>

export const CommercialDetectionRequest = z.object({
    api_key: z.string().describe('Your API Key'),
    text: z.string().describe('The text that you want to analyze. It should not contain HTML tags.').optional(),
})

export type CommercialDetectionRequest = z.infer<typeof CommercialDetectionRequest>

export const DocumentSimilarityRequest = z.object({
    api_key: z.string().describe('Your API Key'),
    copy: z.string().describe('The second text. It should not contain HTML tags.').optional(),
    original: z.string().describe('The first text. It should not contain HTML tags.').optional(),
})

export type DocumentSimilarityRequest = z.infer<typeof DocumentSimilarityRequest>

export const EducationalDetectionRequest = z.object({
    api_key: z.string().describe('Your API Key'),
    text: z.string().describe('The text that you want to analyze. It should not contain HTML tags.').optional(),
})

export type EducationalDetectionRequest = z.infer<typeof EducationalDetectionRequest>

export const GenderDetectionRequest = z.object({
    api_key: z.string().describe('Your API Key'),
    text: z.string().describe('The text that you want to analyze. It should not contain HTML tags.').optional(),
})

export type GenderDetectionRequest = z.infer<typeof GenderDetectionRequest>

export const KeywordExtractionRequest = z.object({
    api_key: z.string().describe('Your API Key'),
    n: z
        .number()
        .int()
        .gte(1)
        .lte(5)
        .describe('The number of keyword combinations (n-grams) that you wish to extract.')
        .optional(),
    text: z.string().describe('The text that you want to analyze. It should not contain HTML tags.').optional(),
})

export type KeywordExtractionRequest = z.infer<typeof KeywordExtractionRequest>

export const LanguageDetectionRequest = z.object({
    api_key: z.string().describe('Your API Key'),
    text: z.string().describe('The text that you want to analyze. It should not contain HTML tags.').optional(),
})

export type LanguageDetectionRequest = z.infer<typeof LanguageDetectionRequest>

export const ReadabilityAssessmentRequest = z.object({
    api_key: z.string().describe('Your API Key'),
    text: z.string().describe('The text that you want to analyze. It should not contain HTML tags.').optional(),
})

export type ReadabilityAssessmentRequest = z.infer<typeof ReadabilityAssessmentRequest>

export const SentimentAnalysisRequest = z.object({
    api_key: z.string().describe('Your API Key'),
    text: z.string().describe('The text that you want to analyze. It should not contain HTML tags.').optional(),
})

export type SentimentAnalysisRequest = z.infer<typeof SentimentAnalysisRequest>

export const SpamDetectionRequest = z.object({
    api_key: z.string().describe('Your API Key'),
    text: z.string().describe('The text that you want to analyze. It should not contain HTML tags.').optional(),
})

export type SpamDetectionRequest = z.infer<typeof SpamDetectionRequest>

export const SubjectivityAnalysisRequest = z.object({
    api_key: z.string().describe('Your API Key'),
    text: z.string().describe('The text that you want to analyze. It should not contain HTML tags.').optional(),
})

export type SubjectivityAnalysisRequest = z.infer<typeof SubjectivityAnalysisRequest>

export const TextExtractionRequest = z.object({
    api_key: z.string().describe('Your API Key'),
    text: z.string().describe('The HTML source of the webpage.').optional(),
})

export type TextExtractionRequest = z.infer<typeof TextExtractionRequest>

export const TopicClassificationRequest = z.object({
    api_key: z.string().describe('Your API Key'),
    text: z.string().describe('The text that you want to analyze. It should not contain HTML tags.').optional(),
})

export type TopicClassificationRequest = z.infer<typeof TopicClassificationRequest>

export const TwitterSentimentAnalysisRequest = z.object({
    api_key: z.string().describe('Your API Key'),
    text: z.string().describe('The text of the tweet that we evaluate.').optional(),
})

export type TwitterSentimentAnalysisRequest = z.infer<typeof TwitterSentimentAnalysisRequest>
